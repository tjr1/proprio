
transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000a9a  00800100  00800100  000001cc  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000089  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000027e  00000000  00000000  00000275  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000013d  00000000  00000000  000004f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000199  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000007cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000fa  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000064  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  0000096a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   8:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  10:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  14:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  18:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  1c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  20:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  24:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  28:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  2c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  30:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  34:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  38:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  3c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  40:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  44:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  48:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  4c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  50:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  54:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  58:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  5c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  60:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  68:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  6c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d0 e1       	ldi	r29, 0x10	; 16
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_clear_bss>:
  7c:	1b e0       	ldi	r17, 0x0B	; 11
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	01 c0       	rjmp	.+2      	; 0x86 <.do_clear_bss_start>

00000084 <.do_clear_bss_loop>:
  84:	1d 92       	st	X+, r1

00000086 <.do_clear_bss_start>:
  86:	aa 39       	cpi	r26, 0x9A	; 154
  88:	b1 07       	cpc	r27, r17
  8a:	e1 f7       	brne	.-8      	; 0x84 <.do_clear_bss_loop>
  8c:	0e 94 95 00 	call	0x12a	; 0x12a <main>
  90:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

00000094 <__bad_interrupt>:
  94:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000098 <USART_SENDBYTE>:



/*USART SEND*/
void USART_SENDBYTE(unsigned char SendByte)
begin 
  98:	98 2f       	mov	r25, r24
	while(!(UCSR0A & (1<<UDRE0)));
  9a:	80 91 c0 00 	lds	r24, 0x00C0
  9e:	85 ff       	sbrs	r24, 5
  a0:	fc cf       	rjmp	.-8      	; 0x9a <USART_SENDBYTE+0x2>
	UDR0 = SendByte;
  a2:	90 93 c6 00 	sts	0x00C6, r25
end
  a6:	08 95       	ret

000000a8 <Send_Packet>:

/*Send Packet*/
void Send_Packet( uint8_t row_addr, uint8_t col_addr, uint16_t msg)
begin
  a8:	28 2f       	mov	r18, r24


/*USART SEND*/
void USART_SENDBYTE(unsigned char SendByte)
begin 
	while(!(UCSR0A & (1<<UDRE0)));
  aa:	80 91 c0 00 	lds	r24, 0x00C0
  ae:	85 ff       	sbrs	r24, 5
  b0:	fc cf       	rjmp	.-8      	; 0xaa <Send_Packet+0x2>
	UDR0 = SendByte;
  b2:	8a ea       	ldi	r24, 0xAA	; 170
  b4:	80 93 c6 00 	sts	0x00C6, r24


/*USART SEND*/
void USART_SENDBYTE(unsigned char SendByte)
begin 
	while(!(UCSR0A & (1<<UDRE0)));
  b8:	80 91 c0 00 	lds	r24, 0x00C0
  bc:	85 ff       	sbrs	r24, 5
  be:	fc cf       	rjmp	.-8      	; 0xb8 <Send_Packet+0x10>
	UDR0 = SendByte;
  c0:	8b eb       	ldi	r24, 0xBB	; 187
  c2:	80 93 c6 00 	sts	0x00C6, r24


/*USART SEND*/
void USART_SENDBYTE(unsigned char SendByte)
begin 
	while(!(UCSR0A & (1<<UDRE0)));
  c6:	80 91 c0 00 	lds	r24, 0x00C0
  ca:	85 ff       	sbrs	r24, 5
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <Send_Packet+0x1e>
	UDR0 = SendByte;
  ce:	60 93 c6 00 	sts	0x00C6, r22


/*USART SEND*/
void USART_SENDBYTE(unsigned char SendByte)
begin 
	while(!(UCSR0A & (1<<UDRE0)));
  d2:	80 91 c0 00 	lds	r24, 0x00C0
  d6:	85 ff       	sbrs	r24, 5
  d8:	fc cf       	rjmp	.-8      	; 0xd2 <Send_Packet+0x2a>
	                      // RF channel

	//Column Address
	USART_SENDBYTE(col_addr);

	USART_SENDBYTE((uint8_t)(msg & 0x000F));
  da:	84 2f       	mov	r24, r20
  dc:	8f 70       	andi	r24, 0x0F	; 15

/*USART SEND*/
void USART_SENDBYTE(unsigned char SendByte)
begin 
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = SendByte;
  de:	80 93 c6 00 	sts	0x00C6, r24


/*USART SEND*/
void USART_SENDBYTE(unsigned char SendByte)
begin 
	while(!(UCSR0A & (1<<UDRE0)));
  e2:	80 91 c0 00 	lds	r24, 0x00C0
  e6:	85 ff       	sbrs	r24, 5
  e8:	fc cf       	rjmp	.-8      	; 0xe2 <Send_Packet+0x3a>

	//Column Address
	USART_SENDBYTE(col_addr);

	USART_SENDBYTE((uint8_t)(msg & 0x000F));
	USART_SENDBYTE((uint8_t)((msg & 0x00F0)>>4));
  ea:	ca 01       	movw	r24, r20
  ec:	80 7f       	andi	r24, 0xF0	; 240
  ee:	90 70       	andi	r25, 0x00	; 0
  f0:	34 e0       	ldi	r19, 0x04	; 4
  f2:	96 95       	lsr	r25
  f4:	87 95       	ror	r24
  f6:	3a 95       	dec	r19
  f8:	e1 f7       	brne	.-8      	; 0xf2 <Send_Packet+0x4a>

/*USART SEND*/
void USART_SENDBYTE(unsigned char SendByte)
begin 
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = SendByte;
  fa:	80 93 c6 00 	sts	0x00C6, r24


/*USART SEND*/
void USART_SENDBYTE(unsigned char SendByte)
begin 
	while(!(UCSR0A & (1<<UDRE0)));
  fe:	80 91 c0 00 	lds	r24, 0x00C0
 102:	85 ff       	sbrs	r24, 5
 104:	fc cf       	rjmp	.-8      	; 0xfe <Send_Packet+0x56>
	//Column Address
	USART_SENDBYTE(col_addr);

	USART_SENDBYTE((uint8_t)(msg & 0x000F));
	USART_SENDBYTE((uint8_t)((msg & 0x00F0)>>4));
	USART_SENDBYTE((uint8_t)((msg & 0x0F00)>>8));
 106:	40 70       	andi	r20, 0x00	; 0
 108:	5f 70       	andi	r21, 0x0F	; 15

/*USART SEND*/
void USART_SENDBYTE(unsigned char SendByte)
begin 
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = SendByte;
 10a:	50 93 c6 00 	sts	0x00C6, r21


/*USART SEND*/
void USART_SENDBYTE(unsigned char SendByte)
begin 
	while(!(UCSR0A & (1<<UDRE0)));
 10e:	80 91 c0 00 	lds	r24, 0x00C0
 112:	85 ff       	sbrs	r24, 5
 114:	fc cf       	rjmp	.-8      	; 0x10e <Send_Packet+0x66>
	UDR0 = SendByte;
 116:	20 93 c6 00 	sts	0x00C6, r18


/*USART SEND*/
void USART_SENDBYTE(unsigned char SendByte)
begin 
	while(!(UCSR0A & (1<<UDRE0)));
 11a:	80 91 c0 00 	lds	r24, 0x00C0
 11e:	85 ff       	sbrs	r24, 5
 120:	fc cf       	rjmp	.-8      	; 0x11a <Send_Packet+0x72>
	UDR0 = SendByte;
 122:	8f e7       	ldi	r24, 0x7F	; 127
 124:	80 93 c6 00 	sts	0x00C6, r24
	USART_SENDBYTE((uint8_t)((msg & 0x00F0)>>4));
	USART_SENDBYTE((uint8_t)((msg & 0x0F00)>>8));
	USART_SENDBYTE(row_addr);

	USART_SENDBYTE(ANTISYNC);
end
 128:	08 95       	ret

0000012a <main>:

/*Main*/
int main(void)
begin

  		DDRC |= 0b00001000;
 12a:	3b 9a       	sbi	0x07, 3	; 7
		PORTC = 0b00001000;
 12c:	98 e0       	ldi	r25, 0x08	; 8
 12e:	98 b9       	out	0x08, r25	; 8
		
		UBRR0H = (uint8_t) (UBRRVAL>>8);  	// high byte
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 c5 00 	sts	0x00C5, r24
		UBRR0L = (uint8_t) UBRRVAL;   		// low byte        
 136:	8f e9       	ldi	r24, 0x9F	; 159
 138:	80 93 c4 00 	sts	0x00C4, r24
		UCSR0B = (1<<TXEN0);  				// enable transmitter	
 13c:	90 93 c1 00 	sts	0x00C1, r25
		// data frame format, asynch mode, no parity, 1 stop bit, 8 bit size
        UCSR0C = (0<<UMSEL00) | (0<<UMSEL01) | (0<<UPM00) | (0<<UPM01) | (0<<USBS0) | (3<<UCSZ00) ;    
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	80 93 c2 00 	sts	0x00C2, r24
		

		Send_Packet(0,255,0xffff);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	6f ef       	ldi	r22, 0xFF	; 255
 14a:	4f ef       	ldi	r20, 0xFF	; 255
 14c:	5f ef       	ldi	r21, 0xFF	; 255
 14e:	0e 94 54 00 	call	0xa8	; 0xa8 <Send_Packet>
 152:	ff cf       	rjmp	.-2      	; 0x152 <main+0x28>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>

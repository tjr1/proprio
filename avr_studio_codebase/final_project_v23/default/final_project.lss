
final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  00002898  0000292c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002898  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a5d  0080020c  0080020c  00002a38  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  00002a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005d0  00000000  00000000  00002bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003649  00000000  00000000  000031c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000016cd  00000000  00000000  00006811  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000023fd  00000000  00000000  00007ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000470  00000000  00000000  0000a2dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007e9  00000000  00000000  0000a74c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015e4  00000000  00000000  0000af35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  0000c519  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__ctors_end>
       4:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <__vector_1>
       8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
       c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      10:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      14:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      18:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      1c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      20:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      28:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      2c:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__vector_11>
      30:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_13>
      38:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      3c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      40:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      44:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      4c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      50:	0c 94 96 03 	jmp	0x72c	; 0x72c <__vector_20>
      54:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      58:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      5c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      60:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      68:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      6c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>

00000070 <LCD_dispRPM>:
      70:	52 50 4d 3a 00 00                                   RPM:..

00000076 <LcdCustomChar>:
      76:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      86:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      96:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      a6:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000b6 <__ctors_end>:
      b6:	11 24       	eor	r1, r1
      b8:	1f be       	out	0x3f, r1	; 63
      ba:	cf ef       	ldi	r28, 0xFF	; 255
      bc:	d0 e1       	ldi	r29, 0x10	; 16
      be:	de bf       	out	0x3e, r29	; 62
      c0:	cd bf       	out	0x3d, r28	; 61

000000c2 <__do_clear_bss>:
      c2:	1c e0       	ldi	r17, 0x0C	; 12
      c4:	ac e0       	ldi	r26, 0x0C	; 12
      c6:	b2 e0       	ldi	r27, 0x02	; 2
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	a9 36       	cpi	r26, 0x69	; 105
      ce:	b1 07       	cpc	r27, r17
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>

000000d2 <__do_copy_data>:
      d2:	12 e0       	ldi	r17, 0x02	; 2
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	e8 e9       	ldi	r30, 0x98	; 152
      da:	f8 e2       	ldi	r31, 0x28	; 40
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <.do_copy_data_start>

000000de <.do_copy_data_loop>:
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0

000000e2 <.do_copy_data_start>:
      e2:	ac 30       	cpi	r26, 0x0C	; 12
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <.do_copy_data_loop>
      e8:	0e 94 90 0a 	call	0x1520	; 0x1520 <main>
      ec:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <_exit>

000000f0 <__bad_interrupt>:
      f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f4 <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
      f4:	1f 92       	push	r1
      f6:	0f 92       	push	r0
      f8:	0f b6       	in	r0, 0x3f	; 63
      fa:	0f 92       	push	r0
      fc:	11 24       	eor	r1, r1
      fe:	2f 92       	push	r2
     100:	3f 92       	push	r3
     102:	4f 92       	push	r4
     104:	5f 92       	push	r5
     106:	6f 92       	push	r6
     108:	7f 92       	push	r7
     10a:	8f 92       	push	r8
     10c:	9f 92       	push	r9
     10e:	af 92       	push	r10
     110:	bf 92       	push	r11
     112:	cf 92       	push	r12
     114:	df 92       	push	r13
     116:	ef 92       	push	r14
     118:	ff 92       	push	r15
     11a:	0f 93       	push	r16
     11c:	1f 93       	push	r17
     11e:	2f 93       	push	r18
     120:	3f 93       	push	r19
     122:	4f 93       	push	r20
     124:	5f 93       	push	r21
     126:	6f 93       	push	r22
     128:	7f 93       	push	r23
     12a:	8f 93       	push	r24
     12c:	9f 93       	push	r25
     12e:	af 93       	push	r26
     130:	bf 93       	push	r27
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
     136:	ef 93       	push	r30
     138:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
	
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     13a:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     13e:	50 90 19 0c 	lds	r5, 0x0C19
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     142:	b0 9b       	sbis	0x16, 0	; 22
     144:	14 c0       	rjmp	.+40     	; 0x16e <__vector_13+0x7a>
    ++kernel.cycles;
     146:	80 91 5a 0c 	lds	r24, 0x0C5A
     14a:	90 91 5b 0c 	lds	r25, 0x0C5B
     14e:	a0 91 5c 0c 	lds	r26, 0x0C5C
     152:	b0 91 5d 0c 	lds	r27, 0x0C5D
     156:	01 96       	adiw	r24, 0x01	; 1
     158:	a1 1d       	adc	r26, r1
     15a:	b1 1d       	adc	r27, r1
     15c:	80 93 5a 0c 	sts	0x0C5A, r24
     160:	90 93 5b 0c 	sts	0x0C5B, r25
     164:	a0 93 5c 0c 	sts	0x0C5C, r26
     168:	b0 93 5d 0c 	sts	0x0C5D, r27
    TIFR1 |= (1<<TOV1) ;
     16c:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     16e:	80 91 84 00 	lds	r24, 0x0084
     172:	90 91 85 00 	lds	r25, 0x0085
     176:	3c 01       	movw	r6, r24
     178:	88 24       	eor	r8, r8
     17a:	99 24       	eor	r9, r9
     17c:	80 91 5a 0c 	lds	r24, 0x0C5A
     180:	90 91 5b 0c 	lds	r25, 0x0C5B
     184:	a0 91 5c 0c 	lds	r26, 0x0C5C
     188:	b0 91 5d 0c 	lds	r27, 0x0C5D
     18c:	dc 01       	movw	r26, r24
     18e:	99 27       	eor	r25, r25
     190:	88 27       	eor	r24, r24
     192:	68 0e       	add	r6, r24
     194:	79 1e       	adc	r7, r25
     196:	8a 1e       	adc	r8, r26
     198:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     19a:	40 90 18 0c 	lds	r4, 0x0C18
     19e:	70 e0       	ldi	r23, 0x00	; 0
     1a0:	61 e0       	ldi	r22, 0x01	; 1
     1a2:	ff ef       	ldi	r31, 0xFF	; 255
     1a4:	af 2e       	mov	r10, r31
     1a6:	ff ef       	ldi	r31, 0xFF	; 255
     1a8:	bf 2e       	mov	r11, r31
     1aa:	ff ef       	ldi	r31, 0xFF	; 255
     1ac:	cf 2e       	mov	r12, r31
     1ae:	ff e7       	ldi	r31, 0x7F	; 127
     1b0:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     1b2:	eb e0       	ldi	r30, 0x0B	; 11
     1b4:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
	t->state = READYQ;
     1b6:	33 24       	eor	r3, r3
     1b8:	33 94       	inc	r3
      } else if (t->release < nextHit) {
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     1ba:	cb e0       	ldi	r28, 0x0B	; 11
     1bc:	d0 e0       	ldi	r29, 0x00	; 0
     1be:	43 c0       	rjmp	.+134    	; 0x246 <__vector_13+0x152>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     1c0:	62 9d       	mul	r22, r2
     1c2:	d0 01       	movw	r26, r0
     1c4:	11 24       	eor	r1, r1
     1c6:	a6 5e       	subi	r26, 0xE6	; 230
     1c8:	b3 4f       	sbci	r27, 0xF3	; 243
    if (t->state == TIMEQ) {
     1ca:	1a 96       	adiw	r26, 0x0a	; 10
     1cc:	8c 91       	ld	r24, X
     1ce:	1a 97       	sbiw	r26, 0x0a	; 10
     1d0:	82 30       	cpi	r24, 0x02	; 2
     1d2:	a1 f4       	brne	.+40     	; 0x1fc <__vector_13+0x108>
      if (t->release <= now) {
     1d4:	12 96       	adiw	r26, 0x02	; 2
     1d6:	ed 90       	ld	r14, X+
     1d8:	fd 90       	ld	r15, X+
     1da:	0d 91       	ld	r16, X+
     1dc:	1c 91       	ld	r17, X
     1de:	15 97       	sbiw	r26, 0x05	; 5
     1e0:	6e 14       	cp	r6, r14
     1e2:	7f 04       	cpc	r7, r15
     1e4:	80 06       	cpc	r8, r16
     1e6:	91 06       	cpc	r9, r17
     1e8:	20 f0       	brcs	.+8      	; 0x1f2 <__vector_13+0xfe>
	t->state = READYQ;
     1ea:	1a 96       	adiw	r26, 0x0a	; 10
     1ec:	3c 92       	st	X, r3
     1ee:	1a 97       	sbiw	r26, 0x0a	; 10
     1f0:	05 c0       	rjmp	.+10     	; 0x1fc <__vector_13+0x108>
      } else if (t->release < nextHit) {
     1f2:	ea 14       	cp	r14, r10
     1f4:	fb 04       	cpc	r15, r11
     1f6:	0c 05       	cpc	r16, r12
     1f8:	1d 05       	cpc	r17, r13
     1fa:	10 f0       	brcs	.+4      	; 0x200 <__vector_13+0x10c>
     1fc:	86 01       	movw	r16, r12
     1fe:	75 01       	movw	r14, r10
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     200:	1a 96       	adiw	r26, 0x0a	; 10
     202:	8c 91       	ld	r24, X
     204:	1a 97       	sbiw	r26, 0x0a	; 10
     206:	81 30       	cpi	r24, 0x01	; 1
     208:	d9 f4       	brne	.+54     	; 0x240 <__vector_13+0x14c>
      if (t->deadline < kernel.tasks[running].deadline) {
     20a:	87 2f       	mov	r24, r23
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	8c 9f       	mul	r24, r28
     210:	f0 01       	movw	r30, r0
     212:	8d 9f       	mul	r24, r29
     214:	f0 0d       	add	r31, r0
     216:	9c 9f       	mul	r25, r28
     218:	f0 0d       	add	r31, r0
     21a:	11 24       	eor	r1, r1
     21c:	e8 5e       	subi	r30, 0xE8	; 232
     21e:	f3 4f       	sbci	r31, 0xF3	; 243
     220:	16 96       	adiw	r26, 0x06	; 6
     222:	2d 91       	ld	r18, X+
     224:	3d 91       	ld	r19, X+
     226:	4d 91       	ld	r20, X+
     228:	5c 91       	ld	r21, X
     22a:	19 97       	sbiw	r26, 0x09	; 9
     22c:	80 85       	ldd	r24, Z+8	; 0x08
     22e:	91 85       	ldd	r25, Z+9	; 0x09
     230:	a2 85       	ldd	r26, Z+10	; 0x0a
     232:	b3 85       	ldd	r27, Z+11	; 0x0b
     234:	28 17       	cp	r18, r24
     236:	39 07       	cpc	r19, r25
     238:	4a 07       	cpc	r20, r26
     23a:	5b 07       	cpc	r21, r27
     23c:	08 f4       	brcc	.+2      	; 0x240 <__vector_13+0x14c>
     23e:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     240:	6f 5f       	subi	r22, 0xFF	; 255
     242:	57 01       	movw	r10, r14
     244:	68 01       	movw	r12, r16
     246:	46 16       	cp	r4, r22
     248:	08 f0       	brcs	.+2      	; 0x24c <__vector_13+0x158>
     24a:	ba cf       	rjmp	.-140    	; 0x1c0 <__vector_13+0xcc>
	running = i;
      }
    }
  }

  if (running != oldrunning) { // perform context switch?
     24c:	75 15       	cp	r23, r5
     24e:	b1 f0       	breq	.+44     	; 0x27c <__vector_13+0x188>

    // store old context
    t = &kernel.tasks[oldrunning];
     250:	eb e0       	ldi	r30, 0x0B	; 11
     252:	5e 9e       	mul	r5, r30
     254:	d0 01       	movw	r26, r0
     256:	11 24       	eor	r1, r1
     258:	a6 5e       	subi	r26, 0xE6	; 230
     25a:	b3 4f       	sbci	r27, 0xF3	; 243
    t->spl = SPL;
     25c:	8d b7       	in	r24, 0x3d	; 61
     25e:	8c 93       	st	X, r24
    t->sph = SPH;
     260:	8e b7       	in	r24, 0x3e	; 62
     262:	11 96       	adiw	r26, 0x01	; 1
     264:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     266:	7e 9f       	mul	r23, r30
     268:	f0 01       	movw	r30, r0
     26a:	11 24       	eor	r1, r1
     26c:	e6 5e       	subi	r30, 0xE6	; 230
     26e:	f3 4f       	sbci	r31, 0xF3	; 243
    SPH = t->sph;
     270:	81 81       	ldd	r24, Z+1	; 0x01
     272:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     274:	80 81       	ld	r24, Z
     276:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     278:	70 93 19 0c 	sts	0x0C19, r23

  }

  kernel.nextHit = nextHit;  
     27c:	a0 92 5e 0c 	sts	0x0C5E, r10
     280:	b0 92 5f 0c 	sts	0x0C5F, r11
     284:	c0 92 60 0c 	sts	0x0C60, r12
     288:	d0 92 61 0c 	sts	0x0C61, r13

  now = (kernel.cycles << 16) + TCNT1;
     28c:	20 91 84 00 	lds	r18, 0x0084
     290:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     294:	40 e0       	ldi	r20, 0x00	; 0
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	80 91 5a 0c 	lds	r24, 0x0C5A
     29c:	90 91 5b 0c 	lds	r25, 0x0C5B
     2a0:	a0 91 5c 0c 	lds	r26, 0x0C5C
     2a4:	b0 91 5d 0c 	lds	r27, 0x0C5D
     2a8:	dc 01       	movw	r26, r24
     2aa:	99 27       	eor	r25, r25
     2ac:	88 27       	eor	r24, r24
     2ae:	28 0f       	add	r18, r24
     2b0:	39 1f       	adc	r19, r25
     2b2:	4a 1f       	adc	r20, r26
     2b4:	5b 1f       	adc	r21, r27
     2b6:	d6 01       	movw	r26, r12
     2b8:	c5 01       	movw	r24, r10
     2ba:	82 1b       	sub	r24, r18
     2bc:	93 0b       	sbc	r25, r19
     2be:	a4 0b       	sbc	r26, r20
     2c0:	b5 0b       	sbc	r27, r21
     2c2:	9c 01       	movw	r18, r24
     2c4:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     2c6:	84 30       	cpi	r24, 0x04	; 4
     2c8:	91 05       	cpc	r25, r1
     2ca:	a1 05       	cpc	r26, r1
     2cc:	b1 05       	cpc	r27, r1
     2ce:	24 f4       	brge	.+8      	; 0x2d8 <__vector_13+0x1e4>
     2d0:	24 e0       	ldi	r18, 0x04	; 4
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	40 e0       	ldi	r20, 0x00	; 0
     2d6:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     2d8:	80 91 84 00 	lds	r24, 0x0084
     2dc:	90 91 85 00 	lds	r25, 0x0085
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	82 0f       	add	r24, r18
     2e6:	93 1f       	adc	r25, r19
     2e8:	a4 1f       	adc	r26, r20
     2ea:	b5 1f       	adc	r27, r21
     2ec:	80 50       	subi	r24, 0x00	; 0
     2ee:	90 40       	sbci	r25, 0x00	; 0
     2f0:	a1 40       	sbci	r26, 0x01	; 1
     2f2:	b0 40       	sbci	r27, 0x00	; 0
     2f4:	38 f4       	brcc	.+14     	; 0x304 <__vector_13+0x210>
    OCR1A = TCNT1 + timeleft;
     2f6:	80 91 84 00 	lds	r24, 0x0084
     2fa:	90 91 85 00 	lds	r25, 0x0085
     2fe:	82 0f       	add	r24, r18
     300:	93 1f       	adc	r25, r19
     302:	0e c0       	rjmp	.+28     	; 0x320 <__vector_13+0x22c>
  } else if (TCNT1 < 65536 - 4) {
     304:	80 91 84 00 	lds	r24, 0x0084
     308:	90 91 85 00 	lds	r25, 0x0085
     30c:	8c 5f       	subi	r24, 0xFC	; 252
     30e:	9f 4f       	sbci	r25, 0xFF	; 255
     310:	28 f4       	brcc	.+10     	; 0x31c <__vector_13+0x228>
    OCR1A = 0x0000;
     312:	10 92 89 00 	sts	0x0089, r1
     316:	10 92 88 00 	sts	0x0088, r1
     31a:	06 c0       	rjmp	.+12     	; 0x328 <__vector_13+0x234>
  } else {
    OCR1A = 4;
     31c:	84 e0       	ldi	r24, 0x04	; 4
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	90 93 89 00 	sts	0x0089, r25
     324:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	80 93 6f 00 	sts	0x006F, r24
}
     32e:	ff 91       	pop	r31
     330:	ef 91       	pop	r30
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	bf 91       	pop	r27
     338:	af 91       	pop	r26
     33a:	9f 91       	pop	r25
     33c:	8f 91       	pop	r24
     33e:	7f 91       	pop	r23
     340:	6f 91       	pop	r22
     342:	5f 91       	pop	r21
     344:	4f 91       	pop	r20
     346:	3f 91       	pop	r19
     348:	2f 91       	pop	r18
     34a:	1f 91       	pop	r17
     34c:	0f 91       	pop	r16
     34e:	ff 90       	pop	r15
     350:	ef 90       	pop	r14
     352:	df 90       	pop	r13
     354:	cf 90       	pop	r12
     356:	bf 90       	pop	r11
     358:	af 90       	pop	r10
     35a:	9f 90       	pop	r9
     35c:	8f 90       	pop	r8
     35e:	7f 90       	pop	r7
     360:	6f 90       	pop	r6
     362:	5f 90       	pop	r5
     364:	4f 90       	pop	r4
     366:	3f 90       	pop	r3
     368:	2f 90       	pop	r2
     36a:	0f 90       	pop	r0
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	0f 90       	pop	r0
     370:	1f 90       	pop	r1
     372:	18 95       	reti

00000374 <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     374:	10 92 85 00 	sts	0x0085, r1
     378:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     37c:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     380:	25 e0       	ldi	r18, 0x05	; 5
     382:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     386:	22 e0       	ldi	r18, 0x02	; 2
     388:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     38c:	2f ef       	ldi	r18, 0xFF	; 255
     38e:	30 e1       	ldi	r19, 0x10	; 16
     390:	28 1b       	sub	r18, r24
     392:	39 0b       	sbc	r19, r25
     394:	30 93 59 0c 	sts	0x0C59, r19
     398:	20 93 58 0c 	sts	0x0C58, r18
  kernel.nbrOfTasks = 0;
     39c:	10 92 18 0c 	sts	0x0C18, r1
  kernel.running = 0;
     3a0:	10 92 19 0c 	sts	0x0C19, r1

  kernel.cycles = 0x0000;
     3a4:	10 92 5a 0c 	sts	0x0C5A, r1
     3a8:	10 92 5b 0c 	sts	0x0C5B, r1
     3ac:	10 92 5c 0c 	sts	0x0C5C, r1
     3b0:	10 92 5d 0c 	sts	0x0C5D, r1
  kernel.nextHit = 0x7FFFFFFF;
     3b4:	8f ef       	ldi	r24, 0xFF	; 255
     3b6:	9f ef       	ldi	r25, 0xFF	; 255
     3b8:	af ef       	ldi	r26, 0xFF	; 255
     3ba:	bf e7       	ldi	r27, 0x7F	; 127
     3bc:	80 93 5e 0c 	sts	0x0C5E, r24
     3c0:	90 93 5f 0c 	sts	0x0C5F, r25
     3c4:	a0 93 60 0c 	sts	0x0C60, r26
     3c8:	b0 93 61 0c 	sts	0x0C61, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     3cc:	80 93 20 0c 	sts	0x0C20, r24
     3d0:	90 93 21 0c 	sts	0x0C21, r25
     3d4:	a0 93 22 0c 	sts	0x0C22, r26
     3d8:	b0 93 23 0c 	sts	0x0C23, r27
  kernel.tasks[0].release = 0x00000000;
     3dc:	10 92 1c 0c 	sts	0x0C1C, r1
     3e0:	10 92 1d 0c 	sts	0x0C1D, r1
     3e4:	10 92 1e 0c 	sts	0x0C1E, r1
     3e8:	10 92 1f 0c 	sts	0x0C1F, r1

  sei(); /* set enabled interrupts */
     3ec:	78 94       	sei
}
     3ee:	08 95       	ret

000003f0 <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     3f0:	8f 92       	push	r8
     3f2:	9f 92       	push	r9
     3f4:	af 92       	push	r10
     3f6:	bf 92       	push	r11
     3f8:	cf 92       	push	r12
     3fa:	df 92       	push	r13
     3fc:	ef 92       	push	r14
     3fe:	ff 92       	push	r15
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	49 01       	movw	r8, r18
     40a:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     40c:	f8 94       	cli

  ++kernel.nbrOfTasks;
     40e:	20 91 18 0c 	lds	r18, 0x0C18
     412:	2f 5f       	subi	r18, 0xFF	; 255
     414:	20 93 18 0c 	sts	0x0C18, r18

  sp = kernel.memptr;
     418:	c0 91 58 0c 	lds	r28, 0x0C58
     41c:	d0 91 59 0c 	lds	r29, 0x0C59
  kernel.memptr -= stacksize;  // decrease free mem ptr
     420:	9e 01       	movw	r18, r28
     422:	26 1b       	sub	r18, r22
     424:	37 0b       	sbc	r19, r23
     426:	30 93 59 0c 	sts	0x0C59, r19
     42a:	20 93 58 0c 	sts	0x0C58, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     42e:	88 83       	st	Y, r24
     430:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     432:	92 93       	st	-Z, r25
     434:	31 97       	sbiw	r30, 0x01	; 1
     436:	df 01       	movw	r26, r30
  for (i=0; i<25; i++)    //WAS -- for (i=0; i<24; i++)
     438:	ce 01       	movw	r24, r28
     43a:	4b 97       	sbiw	r24, 0x1b	; 27
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     43c:	1c 92       	st	X, r1
     43e:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<25; i++)    //WAS -- for (i=0; i<24; i++)
     440:	a8 17       	cp	r26, r24
     442:	b9 07       	cpc	r27, r25
     444:	d9 f7       	brne	.-10     	; 0x43c <trtCreateTask+0x4c>
     446:	79 97       	sbiw	r30, 0x19	; 25
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     448:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     44a:	d2 92       	st	-Z, r13
     44c:	31 97       	sbiw	r30, 0x01	; 1
     44e:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     450:	9e 01       	movw	r18, r28
     452:	23 52       	subi	r18, 0x23	; 35
     454:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     456:	1c 92       	st	X, r1
     458:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     45a:	a2 17       	cp	r26, r18
     45c:	b3 07       	cpc	r27, r19
     45e:	d9 f7       	brne	.-10     	; 0x456 <trtCreateTask+0x66>
     460:	9f 01       	movw	r18, r30
     462:	26 50       	subi	r18, 0x06	; 6
     464:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     466:	e0 91 18 0c 	lds	r30, 0x0C18
     46a:	8b e0       	ldi	r24, 0x0B	; 11
     46c:	e8 9f       	mul	r30, r24
     46e:	f0 01       	movw	r30, r0
     470:	11 24       	eor	r1, r1
     472:	e6 5e       	subi	r30, 0xE6	; 230
     474:	f3 4f       	sbci	r31, 0xF3	; 243

  t->release = release;
     476:	82 82       	std	Z+2, r8	; 0x02
     478:	93 82       	std	Z+3, r9	; 0x03
     47a:	a4 82       	std	Z+4, r10	; 0x04
     47c:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     47e:	e6 82       	std	Z+6, r14	; 0x06
     480:	f7 82       	std	Z+7, r15	; 0x07
     482:	00 87       	std	Z+8, r16	; 0x08
     484:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     486:	82 e0       	ldi	r24, 0x02	; 2
     488:	82 87       	std	Z+10, r24	; 0x0a

  t->spl = lo8(sp);       // store stack pointer
     48a:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     48c:	31 83       	std	Z+1, r19	; 0x01
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     48e:	0e 94 7a 00 	call	0xf4	; 0xf4 <__vector_13>

}
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	0f 91       	pop	r16
     49a:	ff 90       	pop	r15
     49c:	ef 90       	pop	r14
     49e:	df 90       	pop	r13
     4a0:	cf 90       	pop	r12
     4a2:	bf 90       	pop	r11
     4a4:	af 90       	pop	r10
     4a6:	9f 90       	pop	r9
     4a8:	8f 90       	pop	r8
     4aa:	08 95       	ret

000004ac <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     4ac:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     4ae:	e8 e1       	ldi	r30, 0x18	; 24
     4b0:	fc e0       	ldi	r31, 0x0C	; 12
     4b2:	e8 0f       	add	r30, r24
     4b4:	f1 1d       	adc	r31, r1
     4b6:	60 af       	std	Z+56, r22	; 0x38
  
  sei(); // set enabled interrupts;
     4b8:	78 94       	sei
}
     4ba:	08 95       	ret

000004bc <trtWait>:

void trtWait(uint8_t semnbr) {
     4bc:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     4be:	20 91 19 0c 	lds	r18, 0x0C19

  cli(); // disable interrupts
     4c2:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     4c4:	e8 2f       	mov	r30, r24
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	e0 5b       	subi	r30, 0xB0	; 176
     4ca:	f3 4f       	sbci	r31, 0xF3	; 243
  if ((*s) > 0) {
     4cc:	80 81       	ld	r24, Z
     4ce:	88 23       	and	r24, r24
     4d0:	19 f0       	breq	.+6      	; 0x4d8 <trtWait+0x1c>
    (*s)--;
     4d2:	81 50       	subi	r24, 0x01	; 1
     4d4:	80 83       	st	Z, r24
     4d6:	10 c0       	rjmp	.+32     	; 0x4f8 <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	8b e0       	ldi	r24, 0x0B	; 11
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	28 9f       	mul	r18, r24
     4e0:	f0 01       	movw	r30, r0
     4e2:	29 9f       	mul	r18, r25
     4e4:	f0 0d       	add	r31, r0
     4e6:	38 9f       	mul	r19, r24
     4e8:	f0 0d       	add	r31, r0
     4ea:	11 24       	eor	r1, r1
     4ec:	e6 5e       	subi	r30, 0xE6	; 230
     4ee:	f3 4f       	sbci	r31, 0xF3	; 243
     4f0:	4e 5f       	subi	r20, 0xFE	; 254
     4f2:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     4f4:	0e 94 7a 00 	call	0xf4	; 0xf4 <__vector_13>
  }

  sei(); // reenable interrupts
     4f8:	78 94       	sei
}
     4fa:	08 95       	ret

000004fc <trtSignal>:

void trtSignal(uint8_t semnbr) {
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     504:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     506:	00 91 18 0c 	lds	r16, 0x0C18
     50a:	e1 e0       	ldi	r30, 0x01	; 1
     50c:	4f ef       	ldi	r20, 0xFF	; 255
     50e:	5f ef       	ldi	r21, 0xFF	; 255
     510:	6f ef       	ldi	r22, 0xFF	; 255
     512:	7f ef       	ldi	r23, 0xFF	; 255
     514:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     516:	8b e0       	ldi	r24, 0x0B	; 11
     518:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     51a:	21 2f       	mov	r18, r17
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	2e 5f       	subi	r18, 0xFE	; 254
     520:	3f 4f       	sbci	r19, 0xFF	; 255
     522:	1e c0       	rjmp	.+60     	; 0x560 <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     524:	ef 9d       	mul	r30, r15
     526:	d0 01       	movw	r26, r0
     528:	11 24       	eor	r1, r1
     52a:	a6 5e       	subi	r26, 0xE6	; 230
     52c:	b3 4f       	sbci	r27, 0xF3	; 243
    if (t->state == (semnbr + WAIT_OFFSET)) {
     52e:	1a 96       	adiw	r26, 0x0a	; 10
     530:	8c 91       	ld	r24, X
     532:	1a 97       	sbiw	r26, 0x0a	; 10
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	82 17       	cp	r24, r18
     538:	93 07       	cpc	r25, r19
     53a:	69 f4       	brne	.+26     	; 0x556 <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     53c:	16 96       	adiw	r26, 0x06	; 6
     53e:	8d 91       	ld	r24, X+
     540:	9d 91       	ld	r25, X+
     542:	0d 90       	ld	r0, X+
     544:	bc 91       	ld	r27, X
     546:	a0 2d       	mov	r26, r0
     548:	48 17       	cp	r20, r24
     54a:	59 07       	cpc	r21, r25
     54c:	6a 07       	cpc	r22, r26
     54e:	7b 07       	cpc	r23, r27
     550:	10 f0       	brcs	.+4      	; 0x556 <trtSignal+0x5a>
     552:	fe 2f       	mov	r31, r30
     554:	02 c0       	rjmp	.+4      	; 0x55a <trtSignal+0x5e>
     556:	db 01       	movw	r26, r22
     558:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     55a:	ef 5f       	subi	r30, 0xFF	; 255
     55c:	ac 01       	movw	r20, r24
     55e:	bd 01       	movw	r22, r26
     560:	0e 17       	cp	r16, r30
     562:	00 f7       	brcc	.-64     	; 0x524 <trtSignal+0x28>
	minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     564:	ff 23       	and	r31, r31
     566:	41 f4       	brne	.+16     	; 0x578 <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     568:	e1 2f       	mov	r30, r17
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	e9 5e       	subi	r30, 0xE9	; 233
     56e:	f3 4f       	sbci	r31, 0xF3	; 243
     570:	81 ad       	ldd	r24, Z+57	; 0x39
     572:	8f 5f       	subi	r24, 0xFF	; 255
     574:	81 af       	std	Z+57, r24	; 0x39
     576:	11 c0       	rjmp	.+34     	; 0x59a <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     578:	2f 2f       	mov	r18, r31
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	8b e0       	ldi	r24, 0x0B	; 11
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	28 9f       	mul	r18, r24
     582:	f0 01       	movw	r30, r0
     584:	29 9f       	mul	r18, r25
     586:	f0 0d       	add	r31, r0
     588:	38 9f       	mul	r19, r24
     58a:	f0 0d       	add	r31, r0
     58c:	11 24       	eor	r1, r1
     58e:	e8 5e       	subi	r30, 0xE8	; 232
     590:	f3 4f       	sbci	r31, 0xF3	; 243
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     596:	0e 94 7a 00 	call	0xf4	; 0xf4 <__vector_13>
  }

  sei(); // reenable interrupts
     59a:	78 94       	sei
}
     59c:	1f 91       	pop	r17
     59e:	0f 91       	pop	r16
     5a0:	ff 90       	pop	r15
     5a2:	08 95       	ret

000005a4 <trtCurrentTime>:

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     5a4:	20 91 84 00 	lds	r18, 0x0084
     5a8:	30 91 85 00 	lds	r19, 0x0085
     5ac:	40 e0       	ldi	r20, 0x00	; 0
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	80 91 5a 0c 	lds	r24, 0x0C5A
     5b4:	90 91 5b 0c 	lds	r25, 0x0C5B
     5b8:	a0 91 5c 0c 	lds	r26, 0x0C5C
     5bc:	b0 91 5d 0c 	lds	r27, 0x0C5D
     5c0:	dc 01       	movw	r26, r24
     5c2:	99 27       	eor	r25, r25
     5c4:	88 27       	eor	r24, r24
     5c6:	28 0f       	add	r18, r24
     5c8:	39 1f       	adc	r19, r25
     5ca:	4a 1f       	adc	r20, r26
     5cc:	5b 1f       	adc	r21, r27
}
     5ce:	b9 01       	movw	r22, r18
     5d0:	ca 01       	movw	r24, r20
     5d2:	08 95       	ret

000005d4 <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     5d4:	e0 91 19 0c 	lds	r30, 0x0C19
     5d8:	ab e0       	ldi	r26, 0x0B	; 11
     5da:	ea 9f       	mul	r30, r26
     5dc:	f0 01       	movw	r30, r0
     5de:	11 24       	eor	r1, r1
     5e0:	e6 5e       	subi	r30, 0xE6	; 230
     5e2:	f3 4f       	sbci	r31, 0xF3	; 243

  cli(); // turn off interrupts
     5e4:	f8 94       	cli

  t->state = TIMEQ;
     5e6:	a2 e0       	ldi	r26, 0x02	; 2
     5e8:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     5ea:	62 83       	std	Z+2, r22	; 0x02
     5ec:	73 83       	std	Z+3, r23	; 0x03
     5ee:	84 83       	std	Z+4, r24	; 0x04
     5f0:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     5f2:	26 83       	std	Z+6, r18	; 0x06
     5f4:	37 83       	std	Z+7, r19	; 0x07
     5f6:	40 87       	std	Z+8, r20	; 0x08
     5f8:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     5fa:	0e 94 7a 00 	call	0xf4	; 0xf4 <__vector_13>
}
     5fe:	08 95       	ret

00000600 <trtGetRelease>:


uint32_t trtGetRelease(void) {
     600:	80 91 19 0c 	lds	r24, 0x0C19
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	2b e0       	ldi	r18, 0x0B	; 11
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	82 9f       	mul	r24, r18
     60c:	f0 01       	movw	r30, r0
     60e:	83 9f       	mul	r24, r19
     610:	f0 0d       	add	r31, r0
     612:	92 9f       	mul	r25, r18
     614:	f0 0d       	add	r31, r0
     616:	11 24       	eor	r1, r1
     618:	e8 5e       	subi	r30, 0xE8	; 232
     61a:	f3 4f       	sbci	r31, 0xF3	; 243
     61c:	df 01       	movw	r26, r30
     61e:	14 96       	adiw	r26, 0x04	; 4
     620:	64 81       	ldd	r22, Z+4	; 0x04
     622:	11 96       	adiw	r26, 0x01	; 1
     624:	7c 91       	ld	r23, X
     626:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     628:	12 96       	adiw	r26, 0x02	; 2
     62a:	8c 91       	ld	r24, X
     62c:	12 97       	sbiw	r26, 0x02	; 2
     62e:	13 96       	adiw	r26, 0x03	; 3
     630:	9c 91       	ld	r25, X
     632:	08 95       	ret

00000634 <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     634:	80 91 19 0c 	lds	r24, 0x0C19
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	2b e0       	ldi	r18, 0x0B	; 11
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	82 9f       	mul	r24, r18
     640:	f0 01       	movw	r30, r0
     642:	83 9f       	mul	r24, r19
     644:	f0 0d       	add	r31, r0
     646:	92 9f       	mul	r25, r18
     648:	f0 0d       	add	r31, r0
     64a:	11 24       	eor	r1, r1
     64c:	e8 5e       	subi	r30, 0xE8	; 232
     64e:	f3 4f       	sbci	r31, 0xF3	; 243
     650:	df 01       	movw	r26, r30
     652:	18 96       	adiw	r26, 0x08	; 8
     654:	60 85       	ldd	r22, Z+8	; 0x08
     656:	11 96       	adiw	r26, 0x01	; 1
     658:	7c 91       	ld	r23, X
     65a:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     65c:	12 96       	adiw	r26, 0x02	; 2
     65e:	8c 91       	ld	r24, X
     660:	12 97       	sbiw	r26, 0x02	; 2
     662:	13 96       	adiw	r26, 0x03	; 3
     664:	9c 91       	ld	r25, X
     666:	08 95       	ret

00000668 <trtTerminate>:

void trtTerminate(void) {

  cli();
     668:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     66a:	80 91 19 0c 	lds	r24, 0x0C19
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	2b e0       	ldi	r18, 0x0B	; 11
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	82 9f       	mul	r24, r18
     676:	f0 01       	movw	r30, r0
     678:	83 9f       	mul	r24, r19
     67a:	f0 0d       	add	r31, r0
     67c:	92 9f       	mul	r25, r18
     67e:	f0 0d       	add	r31, r0
     680:	11 24       	eor	r1, r1
     682:	e8 5e       	subi	r30, 0xE8	; 232
     684:	f3 4f       	sbci	r31, 0xF3	; 243
     686:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     688:	0e 94 7a 00 	call	0xf4	; 0xf4 <__vector_13>
}
     68c:	08 95       	ret

0000068e <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     68e:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     690:	e8 2f       	mov	r30, r24
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	e0 5b       	subi	r30, 0xB0	; 176
     696:	f3 4f       	sbci	r31, 0xF3	; 243
  temp = *s ;
     698:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     69a:	88 23       	and	r24, r24
     69c:	19 f0       	breq	.+6      	; 0x6a4 <trtAccept+0x16>
    (*s)--;
     69e:	81 50       	subi	r24, 0x01	; 1
     6a0:	80 83       	st	Z, r24
     6a2:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     6a4:	78 94       	sei
  return temp ;
}
     6a6:	08 95       	ret

000006a8 <__vector_1>:


//*************************************************************
// --- external interrupt ISR ------------------------
ISR (INT0_vect) 
begin
     6a8:	1f 92       	push	r1
     6aa:	0f 92       	push	r0
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	0f 92       	push	r0
     6b0:	11 24       	eor	r1, r1
     6b2:	2f 93       	push	r18
     6b4:	8f 93       	push	r24
     6b6:	9f 93       	push	r25
     6b8:	ef 93       	push	r30
     6ba:	ff 93       	push	r31
		//calculate motor speed
        motor_period = TCNT2 + motor_period_ovlf  ;
     6bc:	e2 eb       	ldi	r30, 0xB2	; 178
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	20 81       	ld	r18, Z
     6c2:	80 91 15 0c 	lds	r24, 0x0C15
     6c6:	90 91 16 0c 	lds	r25, 0x0C16
     6ca:	82 0f       	add	r24, r18
     6cc:	91 1d       	adc	r25, r1
     6ce:	90 93 66 0c 	sts	0x0C66, r25
     6d2:	80 93 65 0c 	sts	0x0C65, r24
        TCNT2 = 0 ;
     6d6:	10 82       	st	Z, r1
        motor_period_ovlf = 0 ;	
     6d8:	10 92 16 0c 	sts	0x0C16, r1
     6dc:	10 92 15 0c 	sts	0x0C15, r1
		ledPos = 0;
     6e0:	10 92 12 0c 	sts	0x0C12, r1
     6e4:	10 92 11 0c 	sts	0x0C11, r1
end
     6e8:	ff 91       	pop	r31
     6ea:	ef 91       	pop	r30
     6ec:	9f 91       	pop	r25
     6ee:	8f 91       	pop	r24
     6f0:	2f 91       	pop	r18
     6f2:	0f 90       	pop	r0
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	0f 90       	pop	r0
     6f8:	1f 90       	pop	r1
     6fa:	18 95       	reti

000006fc <__vector_11>:

//************************************************************
// --- set up extra 8 bits on timer 2 ----------------
ISR (TIMER2_OVF_vect) 
begin
     6fc:	1f 92       	push	r1
     6fe:	0f 92       	push	r0
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	0f 92       	push	r0
     704:	11 24       	eor	r1, r1
     706:	8f 93       	push	r24
     708:	9f 93       	push	r25
        motor_period_ovlf = motor_period_ovlf + 256 ;
     70a:	80 91 15 0c 	lds	r24, 0x0C15
     70e:	90 91 16 0c 	lds	r25, 0x0C16
     712:	80 50       	subi	r24, 0x00	; 0
     714:	9f 4f       	sbci	r25, 0xFF	; 255
     716:	90 93 16 0c 	sts	0x0C16, r25
     71a:	80 93 15 0c 	sts	0x0C15, r24
end
     71e:	9f 91       	pop	r25
     720:	8f 91       	pop	r24
     722:	0f 90       	pop	r0
     724:	0f be       	out	0x3f, r0	; 63
     726:	0f 90       	pop	r0
     728:	1f 90       	pop	r1
     72a:	18 95       	reti

0000072c <__vector_20>:


//************************************************************
/*Interupt for receive*/
ISR(USART0_RX_vect)
{		
     72c:	1f 92       	push	r1
     72e:	0f 92       	push	r0
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	0f 92       	push	r0
     734:	11 24       	eor	r1, r1
     736:	2f 93       	push	r18
     738:	3f 93       	push	r19
     73a:	4f 93       	push	r20
     73c:	5f 93       	push	r21
     73e:	6f 93       	push	r22
     740:	7f 93       	push	r23
     742:	8f 93       	push	r24
     744:	9f 93       	push	r25
     746:	af 93       	push	r26
     748:	bf 93       	push	r27
     74a:	ef 93       	push	r30
     74c:	ff 93       	push	r31
	data = UDR0;	//retrieve data from receiver register
     74e:	80 91 c6 00 	lds	r24, 0x00C6
     752:	80 93 10 0c 	sts	0x0C10, r24
	
	//if transmitter is ever cut while transmitting, this will get it back to WAIT_SYNC state
	if(data == SYNC)
     756:	80 91 10 0c 	lds	r24, 0x0C10
     75a:	8a 3a       	cpi	r24, 0xAA	; 170
     75c:	41 f4       	brne	.+16     	; 0x76e <__vector_20+0x42>
	begin
		state = WAIT_SYNC;
     75e:	10 92 f3 0b 	sts	0x0BF3, r1
     762:	10 92 f2 0b 	sts	0x0BF2, r1
		next_state = WAIT_SYNC;
     766:	10 92 f0 0b 	sts	0x0BF0, r1
     76a:	10 92 ef 0b 	sts	0x0BEF, r1
	end
	
	//state machine for receiving data
	switch(state){
     76e:	80 91 f2 0b 	lds	r24, 0x0BF2
     772:	90 91 f3 0b 	lds	r25, 0x0BF3
     776:	81 30       	cpi	r24, 0x01	; 1
     778:	91 05       	cpc	r25, r1
     77a:	11 f1       	breq	.+68     	; 0x7c0 <__vector_20+0x94>
     77c:	82 30       	cpi	r24, 0x02	; 2
     77e:	91 05       	cpc	r25, r1
     780:	59 f1       	breq	.+86     	; 0x7d8 <__vector_20+0xac>
     782:	89 2b       	or	r24, r25
     784:	09 f0       	breq	.+2      	; 0x788 <__vector_20+0x5c>
     786:	2a c1       	rjmp	.+596    	; 0x9dc <__vector_20+0x2b0>
		
		//Wait for SYNC 8-bits
		case WAIT_SYNC:
			//reset all the data and pixel 
			SET_COL = 0;
     788:	10 92 64 0c 	sts	0x0C64, r1
     78c:	10 92 63 0c 	sts	0x0C63, r1
			row = 0;
     790:	10 92 68 0c 	sts	0x0C68, r1
     794:	10 92 67 0c 	sts	0x0C67, r1
			col = 0;
     798:	10 92 0f 0c 	sts	0x0C0F, r1
     79c:	10 92 0e 0c 	sts	0x0C0E, r1
			nible_1 = 0;
     7a0:	10 92 17 0c 	sts	0x0C17, r1
			nible_2 = 0;
     7a4:	10 92 14 02 	sts	0x0214, r1
			nible_3 = 0;
     7a8:	10 92 f1 0b 	sts	0x0BF1, r1
			nible_4 = 0;
     7ac:	10 92 f8 0b 	sts	0x0BF8, r1

			//if the sync 8-bits are received, confirm address of transmitter
			if(data==SYNC)
     7b0:	80 91 10 0c 	lds	r24, 0x0C10
     7b4:	8a 3a       	cpi	r24, 0xAA	; 170
     7b6:	09 f0       	breq	.+2      	; 0x7ba <__vector_20+0x8e>
     7b8:	0c c1       	rjmp	.+536    	; 0x9d2 <__vector_20+0x2a6>
				next_state=WAIT_ADDRESS;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	07 c0       	rjmp	.+14     	; 0x7ce <__vector_20+0xa2>

		//Wait ADDR to confirm data is sent from right transmitter
		case WAIT_ADDRESS:

			//if the address 8-bits are received, get data bits
			if(data == ADDR)
     7c0:	80 91 10 0c 	lds	r24, 0x0C10
     7c4:	8b 3b       	cpi	r24, 0xBB	; 187
     7c6:	09 f0       	breq	.+2      	; 0x7ca <__vector_20+0x9e>
     7c8:	04 c1       	rjmp	.+520    	; 0x9d2 <__vector_20+0x2a6>
				next_state = WAIT_DATA;
     7ca:	82 e0       	ldi	r24, 0x02	; 2
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	90 93 f0 0b 	sts	0x0BF0, r25
     7d2:	80 93 ef 0b 	sts	0x0BEF, r24
     7d6:	06 c1       	rjmp	.+524    	; 0x9e4 <__vector_20+0x2b8>

		//Wait for 5, 8-bit packets of data to arrive
		case WAIT_DATA:

			//If antisync 8-bits are received, the packet is complete
			if (data == ANTISYNC)
     7d8:	80 91 10 0c 	lds	r24, 0x0C10
     7dc:	8f 37       	cpi	r24, 0x7F	; 127
     7de:	09 f0       	breq	.+2      	; 0x7e2 <__vector_20+0xb6>
     7e0:	a4 c0       	rjmp	.+328    	; 0x92a <__vector_20+0x1fe>
			{
				next_state = WAIT_SYNC;
     7e2:	10 92 f0 0b 	sts	0x0BF0, r1
     7e6:	10 92 ef 0b 	sts	0x0BEF, r1
				row = nible_4;
     7ea:	80 91 f8 0b 	lds	r24, 0x0BF8
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	90 93 68 0c 	sts	0x0C68, r25
     7f4:	80 93 67 0c 	sts	0x0C67, r24

				//Combine the bits received into 16-bit pixel information
				col_data = (uint16_t)nible_1
     7f8:	60 91 17 0c 	lds	r22, 0x0C17
     7fc:	20 91 14 02 	lds	r18, 0x0214
     800:	40 91 f1 0b 	lds	r20, 0x0BF1
     804:	50 91 f8 0b 	lds	r21, 0x0BF8
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	94 e0       	ldi	r25, 0x04	; 4
     80c:	22 0f       	add	r18, r18
     80e:	33 1f       	adc	r19, r19
     810:	9a 95       	dec	r25
     812:	e1 f7       	brne	.-8      	; 0x80c <__vector_20+0xe0>
     814:	94 2f       	mov	r25, r20
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	28 0f       	add	r18, r24
     81a:	39 1f       	adc	r19, r25
     81c:	26 0f       	add	r18, r22
     81e:	31 1d       	adc	r19, r1
     820:	95 2f       	mov	r25, r21
     822:	92 95       	swap	r25
     824:	90 7f       	andi	r25, 0xF0	; 240
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	28 0f       	add	r18, r24
     82a:	39 1f       	adc	r19, r25
     82c:	30 93 f7 0b 	sts	0x0BF7, r19
     830:	20 93 f6 0b 	sts	0x0BF6, r18
							+ (((uint16_t)nible_2)<<4)
							+ (((uint16_t)nible_3)<<8)
							+ (((uint16_t)nible_4)<<12);
				
				//Confirm data is within bounds
				if((row < 14) && (row>=0) && (col<90) && (col>=0))
     834:	80 91 67 0c 	lds	r24, 0x0C67
     838:	90 91 68 0c 	lds	r25, 0x0C68
     83c:	0e 97       	sbiw	r24, 0x0e	; 14
     83e:	84 f5       	brge	.+96     	; 0x8a0 <__vector_20+0x174>
     840:	80 91 67 0c 	lds	r24, 0x0C67
     844:	90 91 68 0c 	lds	r25, 0x0C68
     848:	97 fd       	sbrc	r25, 7
     84a:	2a c0       	rjmp	.+84     	; 0x8a0 <__vector_20+0x174>
     84c:	80 91 0e 0c 	lds	r24, 0x0C0E
     850:	90 91 0f 0c 	lds	r25, 0x0C0F
     854:	8a 35       	cpi	r24, 0x5A	; 90
     856:	91 05       	cpc	r25, r1
     858:	1c f5       	brge	.+70     	; 0x8a0 <__vector_20+0x174>
     85a:	80 91 0e 0c 	lds	r24, 0x0C0E
     85e:	90 91 0f 0c 	lds	r25, 0x0C0F
     862:	97 fd       	sbrc	r25, 7
     864:	1d c0       	rjmp	.+58     	; 0x8a0 <__vector_20+0x174>
					testMat[row][col] = col_data;
     866:	20 91 67 0c 	lds	r18, 0x0C67
     86a:	30 91 68 0c 	lds	r19, 0x0C68
     86e:	40 91 0e 0c 	lds	r20, 0x0C0E
     872:	50 91 0f 0c 	lds	r21, 0x0C0F
     876:	60 91 f6 0b 	lds	r22, 0x0BF6
     87a:	70 91 f7 0b 	lds	r23, 0x0BF7
     87e:	8a e5       	ldi	r24, 0x5A	; 90
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	28 9f       	mul	r18, r24
     884:	f0 01       	movw	r30, r0
     886:	29 9f       	mul	r18, r25
     888:	f0 0d       	add	r31, r0
     88a:	38 9f       	mul	r19, r24
     88c:	f0 0d       	add	r31, r0
     88e:	11 24       	eor	r1, r1
     890:	e4 0f       	add	r30, r20
     892:	f5 1f       	adc	r31, r21
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	eb 5e       	subi	r30, 0xEB	; 235
     89a:	fd 4f       	sbci	r31, 0xFD	; 253
     89c:	71 83       	std	Z+1, r23	; 0x01
     89e:	60 83       	st	Z, r22
				
				//If OPP code of col = 255, clear entire display
				if(col == 255)
     8a0:	80 91 0e 0c 	lds	r24, 0x0C0E
     8a4:	90 91 0f 0c 	lds	r25, 0x0C0F
     8a8:	8f 3f       	cpi	r24, 0xFF	; 255
     8aa:	91 05       	cpc	r25, r1
     8ac:	19 f5       	brne	.+70     	; 0x8f4 <__vector_20+0x1c8>
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
				begin
					for(int k = 0; k < 14; k++)
					begin
						for(int j = 0; j < 90; j++)
						begin
							testMat[k][j] = 0xffff;
     8b2:	aa e5       	ldi	r26, 0x5A	; 90
     8b4:	b0 e0       	ldi	r27, 0x00	; 0
     8b6:	6f ef       	ldi	r22, 0xFF	; 255
     8b8:	7f ef       	ldi	r23, 0xFF	; 255
     8ba:	12 c0       	rjmp	.+36     	; 0x8e0 <__vector_20+0x1b4>
     8bc:	fa 01       	movw	r30, r20
     8be:	e8 0f       	add	r30, r24
     8c0:	f9 1f       	adc	r31, r25
     8c2:	ee 0f       	add	r30, r30
     8c4:	ff 1f       	adc	r31, r31
     8c6:	eb 5e       	subi	r30, 0xEB	; 235
     8c8:	fd 4f       	sbci	r31, 0xFD	; 253
     8ca:	71 83       	std	Z+1, r23	; 0x01
     8cc:	60 83       	st	Z, r22
				//If OPP code of col = 255, clear entire display
				if(col == 255)
				begin
					for(int k = 0; k < 14; k++)
					begin
						for(int j = 0; j < 90; j++)
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	8a 35       	cpi	r24, 0x5A	; 90
     8d2:	91 05       	cpc	r25, r1
     8d4:	99 f7       	brne	.-26     	; 0x8bc <__vector_20+0x190>
					testMat[row][col] = col_data;
				
				//If OPP code of col = 255, clear entire display
				if(col == 255)
				begin
					for(int k = 0; k < 14; k++)
     8d6:	2f 5f       	subi	r18, 0xFF	; 255
     8d8:	3f 4f       	sbci	r19, 0xFF	; 255
     8da:	2e 30       	cpi	r18, 0x0E	; 14
     8dc:	31 05       	cpc	r19, r1
     8de:	51 f0       	breq	.+20     	; 0x8f4 <__vector_20+0x1c8>
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
					begin
						for(int j = 0; j < 90; j++)
						begin
							testMat[k][j] = 0xffff;
     8e4:	2a 9f       	mul	r18, r26
     8e6:	a0 01       	movw	r20, r0
     8e8:	2b 9f       	mul	r18, r27
     8ea:	50 0d       	add	r21, r0
     8ec:	3a 9f       	mul	r19, r26
     8ee:	50 0d       	add	r21, r0
     8f0:	11 24       	eor	r1, r1
     8f2:	e4 cf       	rjmp	.-56     	; 0x8bc <__vector_20+0x190>
						end
					end
				end

				//If OPP code of col = 254, run animation
				if(col == 254)
     8f4:	80 91 0e 0c 	lds	r24, 0x0C0E
     8f8:	90 91 0f 0c 	lds	r25, 0x0C0F
     8fc:	8e 3f       	cpi	r24, 0xFE	; 254
     8fe:	91 05       	cpc	r25, r1
     900:	39 f4       	brne	.+14     	; 0x910 <__vector_20+0x1e4>
					runAnimations = 1;
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	90 93 ee 0b 	sts	0x0BEE, r25
     90a:	80 93 ed 0b 	sts	0x0BED, r24
     90e:	61 c0       	rjmp	.+194    	; 0x9d2 <__vector_20+0x2a6>
				else if(col == 253)
     910:	80 91 0e 0c 	lds	r24, 0x0C0E
     914:	90 91 0f 0c 	lds	r25, 0x0C0F
     918:	8d 3f       	cpi	r24, 0xFD	; 253
     91a:	91 05       	cpc	r25, r1
     91c:	09 f0       	breq	.+2      	; 0x920 <__vector_20+0x1f4>
     91e:	59 c0       	rjmp	.+178    	; 0x9d2 <__vector_20+0x2a6>
					runAnimations = 0;
     920:	10 92 ee 0b 	sts	0x0BEE, r1
     924:	10 92 ed 0b 	sts	0x0BED, r1
     928:	54 c0       	rjmp	.+168    	; 0x9d2 <__vector_20+0x2a6>
	
			}
			else
			{
				//Parse incoming data into appropriate nibbles in order of receving
				if (SET_COL < 5)
     92a:	80 91 63 0c 	lds	r24, 0x0C63
     92e:	90 91 64 0c 	lds	r25, 0x0C64
     932:	05 97       	sbiw	r24, 0x05	; 5
     934:	0c f0       	brlt	.+2      	; 0x938 <__vector_20+0x20c>
     936:	4d c0       	rjmp	.+154    	; 0x9d2 <__vector_20+0x2a6>
				{
					if (SET_COL == 0) 
     938:	80 91 63 0c 	lds	r24, 0x0C63
     93c:	90 91 64 0c 	lds	r25, 0x0C64
     940:	89 2b       	or	r24, r25
     942:	41 f4       	brne	.+16     	; 0x954 <__vector_20+0x228>
						col = data;
     944:	80 91 10 0c 	lds	r24, 0x0C10
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	90 93 0f 0c 	sts	0x0C0F, r25
     94e:	80 93 0e 0c 	sts	0x0C0E, r24
     952:	2f c0       	rjmp	.+94     	; 0x9b2 <__vector_20+0x286>

					else if(SET_COL == 1)
     954:	80 91 63 0c 	lds	r24, 0x0C63
     958:	90 91 64 0c 	lds	r25, 0x0C64
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	31 f4       	brne	.+12     	; 0x96c <__vector_20+0x240>
						nible_1 = data & 0x0F;
     960:	80 91 10 0c 	lds	r24, 0x0C10
     964:	8f 70       	andi	r24, 0x0F	; 15
     966:	80 93 17 0c 	sts	0x0C17, r24
     96a:	23 c0       	rjmp	.+70     	; 0x9b2 <__vector_20+0x286>
					
					else if(SET_COL == 2)
     96c:	80 91 63 0c 	lds	r24, 0x0C63
     970:	90 91 64 0c 	lds	r25, 0x0C64
     974:	02 97       	sbiw	r24, 0x02	; 2
     976:	31 f4       	brne	.+12     	; 0x984 <__vector_20+0x258>
						nible_2 = data & 0x0F;
     978:	80 91 10 0c 	lds	r24, 0x0C10
     97c:	8f 70       	andi	r24, 0x0F	; 15
     97e:	80 93 14 02 	sts	0x0214, r24
     982:	17 c0       	rjmp	.+46     	; 0x9b2 <__vector_20+0x286>
						
					else if(SET_COL == 3)
     984:	80 91 63 0c 	lds	r24, 0x0C63
     988:	90 91 64 0c 	lds	r25, 0x0C64
     98c:	03 97       	sbiw	r24, 0x03	; 3
     98e:	31 f4       	brne	.+12     	; 0x99c <__vector_20+0x270>
						nible_3 = data & 0x0F;						
     990:	80 91 10 0c 	lds	r24, 0x0C10
     994:	8f 70       	andi	r24, 0x0F	; 15
     996:	80 93 f1 0b 	sts	0x0BF1, r24
     99a:	0b c0       	rjmp	.+22     	; 0x9b2 <__vector_20+0x286>
						
					else if(SET_COL == 4)
     99c:	80 91 63 0c 	lds	r24, 0x0C63
     9a0:	90 91 64 0c 	lds	r25, 0x0C64
     9a4:	04 97       	sbiw	r24, 0x04	; 4
     9a6:	29 f4       	brne	.+10     	; 0x9b2 <__vector_20+0x286>
						nible_4 = data & 0x0F;
     9a8:	80 91 10 0c 	lds	r24, 0x0C10
     9ac:	8f 70       	andi	r24, 0x0F	; 15
     9ae:	80 93 f8 0b 	sts	0x0BF8, r24

					next_state = WAIT_DATA;	
     9b2:	82 e0       	ldi	r24, 0x02	; 2
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	90 93 f0 0b 	sts	0x0BF0, r25
     9ba:	80 93 ef 0b 	sts	0x0BEF, r24
					SET_COL++;
     9be:	80 91 63 0c 	lds	r24, 0x0C63
     9c2:	90 91 64 0c 	lds	r25, 0x0C64
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	90 93 64 0c 	sts	0x0C64, r25
     9cc:	80 93 63 0c 	sts	0x0C63, r24
     9d0:	09 c0       	rjmp	.+18     	; 0x9e4 <__vector_20+0x2b8>
				}
				else
				{
					next_state = WAIT_SYNC;
     9d2:	10 92 f0 0b 	sts	0x0BF0, r1
     9d6:	10 92 ef 0b 	sts	0x0BEF, r1
     9da:	04 c0       	rjmp	.+8      	; 0x9e4 <__vector_20+0x2b8>
				}
			}		
		break;

		default:
			state=WAIT_SYNC;
     9dc:	10 92 f3 0b 	sts	0x0BF3, r1
     9e0:	10 92 f2 0b 	sts	0x0BF2, r1
		break;
	}//end switch

	state = next_state;
     9e4:	80 91 ef 0b 	lds	r24, 0x0BEF
     9e8:	90 91 f0 0b 	lds	r25, 0x0BF0
     9ec:	90 93 f3 0b 	sts	0x0BF3, r25
     9f0:	80 93 f2 0b 	sts	0x0BF2, r24
}
     9f4:	ff 91       	pop	r31
     9f6:	ef 91       	pop	r30
     9f8:	bf 91       	pop	r27
     9fa:	af 91       	pop	r26
     9fc:	9f 91       	pop	r25
     9fe:	8f 91       	pop	r24
     a00:	7f 91       	pop	r23
     a02:	6f 91       	pop	r22
     a04:	5f 91       	pop	r21
     a06:	4f 91       	pop	r20
     a08:	3f 91       	pop	r19
     a0a:	2f 91       	pop	r18
     a0c:	0f 90       	pop	r0
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	0f 90       	pop	r0
     a12:	1f 90       	pop	r1
     a14:	18 95       	reti

00000a16 <task1>:

//***************************************************************
// --- Execute main loop ----------------------------------
void task1(void* args)
begin
     a16:	af 92       	push	r10
     a18:	bf 92       	push	r11
     a1a:	cf 92       	push	r12
     a1c:	df 92       	push	r13
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
	while(1)
	begin
		if(motor_period != 0)
			rpm = 1/(.000064*motor_period);	//calculate current rpm
		else
			rpm = 0;
     a26:	0f 2e       	mov	r0, r31
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	af 2e       	mov	r10, r31
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	bf 2e       	mov	r11, r31
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	cf 2e       	mov	r12, r31
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	df 2e       	mov	r13, r31
     a38:	f0 2d       	mov	r31, r0
void task1(void* args)
begin
	uint32_t rel, dead;
	while(1)
	begin
		if(motor_period != 0)
     a3a:	80 91 65 0c 	lds	r24, 0x0C65
     a3e:	90 91 66 0c 	lds	r25, 0x0C66
     a42:	89 2b       	or	r24, r25
     a44:	09 f1       	breq	.+66     	; 0xa88 <task1+0x72>
			rpm = 1/(.000064*motor_period);	//calculate current rpm
     a46:	60 91 65 0c 	lds	r22, 0x0C65
     a4a:	70 91 66 0c 	lds	r23, 0x0C66
     a4e:	88 27       	eor	r24, r24
     a50:	77 fd       	sbrc	r23, 7
     a52:	80 95       	com	r24
     a54:	98 2f       	mov	r25, r24
     a56:	0e 94 88 10 	call	0x2110	; 0x2110 <__floatsisf>
     a5a:	2d eb       	ldi	r18, 0xBD	; 189
     a5c:	37 e3       	ldi	r19, 0x37	; 55
     a5e:	46 e8       	ldi	r20, 0x86	; 134
     a60:	58 e3       	ldi	r21, 0x38	; 56
     a62:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     a66:	9b 01       	movw	r18, r22
     a68:	ac 01       	movw	r20, r24
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	80 e8       	ldi	r24, 0x80	; 128
     a70:	9f e3       	ldi	r25, 0x3F	; 63
     a72:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__divsf3>
     a76:	60 93 0a 0c 	sts	0x0C0A, r22
     a7a:	70 93 0b 0c 	sts	0x0C0B, r23
     a7e:	80 93 0c 0c 	sts	0x0C0C, r24
     a82:	90 93 0d 0c 	sts	0x0C0D, r25
     a86:	08 c0       	rjmp	.+16     	; 0xa98 <task1+0x82>
		else
			rpm = 0;
     a88:	a0 92 0a 0c 	sts	0x0C0A, r10
     a8c:	b0 92 0b 0c 	sts	0x0C0B, r11
     a90:	c0 92 0c 0c 	sts	0x0C0C, r12
     a94:	d0 92 0d 0c 	sts	0x0C0D, r13
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     a98:	20 91 5a 0c 	lds	r18, 0x0C5A
     a9c:	30 91 5b 0c 	lds	r19, 0x0C5B
     aa0:	40 91 5c 0c 	lds	r20, 0x0C5C
     aa4:	50 91 5d 0c 	lds	r21, 0x0C5D
     aa8:	a9 01       	movw	r20, r18
     aaa:	33 27       	eor	r19, r19
     aac:	22 27       	eor	r18, r18
     aae:	60 91 84 00 	lds	r22, 0x0084
     ab2:	70 91 85 00 	lds	r23, 0x0085

		//update release and deadline
		rel = trtCurrentTime() + SECONDS2TICKS(0.005);
		dead = trtCurrentTime() + SECONDS2TICKS(0.006);
		trtSleepUntil(rel, dead);
     ab6:	e0 90 84 00 	lds	r14, 0x0084
     aba:	f0 90 85 00 	lds	r15, 0x0085
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	62 0f       	add	r22, r18
     ac4:	73 1f       	adc	r23, r19
     ac6:	84 1f       	adc	r24, r20
     ac8:	95 1f       	adc	r25, r21
     aca:	62 5b       	subi	r22, 0xB2	; 178
     acc:	7f 4f       	sbci	r23, 0xFF	; 255
     ace:	8f 4f       	sbci	r24, 0xFF	; 255
     ad0:	9f 4f       	sbci	r25, 0xFF	; 255
     ad2:	00 e0       	ldi	r16, 0x00	; 0
     ad4:	10 e0       	ldi	r17, 0x00	; 0
     ad6:	2e 0d       	add	r18, r14
     ad8:	3f 1d       	adc	r19, r15
     ada:	40 1f       	adc	r20, r16
     adc:	51 1f       	adc	r21, r17
     ade:	23 5a       	subi	r18, 0xA3	; 163
     ae0:	3f 4f       	sbci	r19, 0xFF	; 255
     ae2:	4f 4f       	sbci	r20, 0xFF	; 255
     ae4:	5f 4f       	sbci	r21, 0xFF	; 255
     ae6:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <trtSleepUntil>
     aea:	a7 cf       	rjmp	.-178    	; 0xa3a <task1+0x24>

00000aec <task4>:
end

//***************************************************************
// --- Run Animations Code ----------------------------------
void task4(void* args)
begin
     aec:	2f 92       	push	r2
     aee:	3f 92       	push	r3
     af0:	4f 92       	push	r4
     af2:	5f 92       	push	r5
     af4:	6f 92       	push	r6
     af6:	7f 92       	push	r7
     af8:	8f 92       	push	r8
     afa:	9f 92       	push	r9
     afc:	af 92       	push	r10
     afe:	bf 92       	push	r11
     b00:	cf 92       	push	r12
     b02:	df 92       	push	r13
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	df 93       	push	r29
     b0e:	cf 93       	push	r28
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	60 97       	sbiw	r28, 0x10	; 16
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	cd bf       	out	0x3d, r28	; 61
     b20:	1a 86       	std	Y+10, r1	; 0x0a
     b22:	2c e4       	ldi	r18, 0x4C	; 76
     b24:	29 87       	std	Y+9, r18	; 0x09
     b26:	28 87       	std	Y+8, r18	; 0x08
     b28:	2f 83       	std	Y+7, r18	; 0x07
     b2a:	2e 83       	std	Y+6, r18	; 0x06
     b2c:	4d e4       	ldi	r20, 0x4D	; 77
     b2e:	4d 83       	std	Y+5, r20	; 0x05
     b30:	4c 83       	std	Y+4, r20	; 0x04
     b32:	4b 83       	std	Y+3, r20	; 0x03
     b34:	6e e4       	ldi	r22, 0x4E	; 78
     b36:	6a 83       	std	Y+2, r22	; 0x02
     b38:	69 83       	std	Y+1, r22	; 0x01
     b3a:	be e4       	ldi	r27, 0x4E	; 78
     b3c:	2b 2e       	mov	r2, r27
     b3e:	ae e4       	ldi	r26, 0x4E	; 78
     b40:	3a 2e       	mov	r3, r26
     b42:	55 24       	eor	r5, r5
     b44:	53 94       	inc	r5
			end
			else if(dir == RIGHT)
			begin
				curTime--;
				// clear old image
				testMat[s0x][s0y] = (uint16_t)0xffff;
     b46:	66 24       	eor	r6, r6
     b48:	6a 94       	dec	r6
     b4a:	76 2c       	mov	r7, r6
				testMat[s8x][s8y] = (uint16_t)0xffff;
				testMat[s9x][s9y] = (uint16_t)0xffff;
				testMat[s10x][s10y] = (uint16_t)0xffff;
				// update and write new image
				s0y--; s1y--; s2y--; s3y--; s4y--; s5y--; s6y--; s7y--; s8y--; s9y--; s10y--;
				testMat[s0x][s0y] = (uint16_t)0xf0f0;
     b4c:	f0 ef       	ldi	r31, 0xF0	; 240
     b4e:	8f 2e       	mov	r8, r31
     b50:	9f 2e       	mov	r9, r31
	curTime = 0;
	s0x = 3; s1x = 5; s2x = 6; s3x = 7; s4x = 3; s5x = 5; s6x = 7; s7x = 3; s8x = 4; s9x = 5; s10x = 7;
	s0y = 76; s1y = 76; s2y = 76; s3y = 76; s4y = 77; s5y = 77; s6y = 77; s7y = 78; s8y = 78; s9y = 78; s10y = 78;
	while(1)
	begin
		if(runAnimations == 1)
     b52:	80 91 ed 0b 	lds	r24, 0x0BED
     b56:	90 91 ee 0b 	lds	r25, 0x0BEE
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	09 f0       	breq	.+2      	; 0xb60 <task4+0x74>
     b5e:	fa c1       	rjmp	.+1012   	; 0xf54 <task4+0x468>
		begin
			if((curTime < moveTime) && (dir == LEFT))
     b60:	40 90 62 0c 	lds	r4, 0x0C62
     b64:	99 85       	ldd	r25, Y+9	; 0x09
     b66:	89 2f       	mov	r24, r25
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	9c 87       	std	Y+12, r25	; 0x0c
     b6c:	8b 87       	std	Y+11, r24	; 0x0b
     b6e:	e8 85       	ldd	r30, Y+8	; 0x08
     b70:	ae 2f       	mov	r26, r30
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	89 2f       	mov	r24, r25
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	9e 87       	std	Y+14, r25	; 0x0e
     b7c:	8d 87       	std	Y+13, r24	; 0x0d
     b7e:	fe 81       	ldd	r31, Y+6	; 0x06
     b80:	ef 2f       	mov	r30, r31
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	f8 8b       	std	Y+16, r31	; 0x10
     b86:	ef 87       	std	Y+15, r30	; 0x0f
     b88:	4d 81       	ldd	r20, Y+5	; 0x05
     b8a:	24 2f       	mov	r18, r20
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	6c 81       	ldd	r22, Y+4	; 0x04
     b90:	46 2f       	mov	r20, r22
     b92:	50 e0       	ldi	r21, 0x00	; 0
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	68 2f       	mov	r22, r24
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	9a 81       	ldd	r25, Y+2	; 0x02
     b9c:	09 2f       	mov	r16, r25
     b9e:	10 e0       	ldi	r17, 0x00	; 0
     ba0:	e9 81       	ldd	r30, Y+1	; 0x01
     ba2:	ee 2e       	mov	r14, r30
     ba4:	ff 24       	eor	r15, r15
     ba6:	c2 2c       	mov	r12, r2
     ba8:	dd 24       	eor	r13, r13
     baa:	a3 2c       	mov	r10, r3
     bac:	bb 24       	eor	r11, r11
     bae:	fa 85       	ldd	r31, Y+10	; 0x0a
     bb0:	f4 15       	cp	r31, r4
     bb2:	18 f4       	brcc	.+6      	; 0xbba <task4+0xce>
     bb4:	55 20       	and	r5, r5
     bb6:	39 f4       	brne	.+14     	; 0xbc6 <task4+0xda>
     bb8:	0d c0       	rjmp	.+26     	; 0xbd4 <task4+0xe8>
				dir = LEFT;
			else if((curTime == moveTime) && (dir == LEFT))
     bba:	8a 85       	ldd	r24, Y+10	; 0x0a
     bbc:	84 15       	cp	r24, r4
     bbe:	19 f4       	brne	.+6      	; 0xbc6 <task4+0xda>
     bc0:	55 20       	and	r5, r5
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <task4+0xda>
     bc4:	e7 c0       	rjmp	.+462    	; 0xd94 <task4+0x2a8>
				dir = RIGHT;
			else if((curTime > 0) && (dir == RIGHT))
     bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc8:	99 23       	and	r25, r25
     bca:	21 f0       	breq	.+8      	; 0xbd4 <task4+0xe8>
     bcc:	e1 e0       	ldi	r30, 0x01	; 1
     bce:	5e 16       	cp	r5, r30
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <task4+0xe8>
     bd2:	e0 c0       	rjmp	.+448    	; 0xd94 <task4+0x2a8>
				dir = RIGHT;
			else if((curTime == 0) && (dir == RIGHT))
				dir = LEFT;
			if(dir == LEFT)
			begin
				curTime++;
     bd4:	fa 85       	ldd	r31, Y+10	; 0x0a
     bd6:	ff 5f       	subi	r31, 0xFF	; 255
     bd8:	fa 87       	std	Y+10, r31	; 0x0a
				// clear old image
				testMat[s0x][s0y] = (uint16_t)0xffff;
     bda:	8b 85       	ldd	r24, Y+11	; 0x0b
     bdc:	9c 85       	ldd	r25, Y+12	; 0x0c
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	8f 5c       	subi	r24, 0xCF	; 207
     be4:	9b 4f       	sbci	r25, 0xFB	; 251
     be6:	fc 01       	movw	r30, r24
     be8:	71 82       	std	Z+1, r7	; 0x01
     bea:	60 82       	st	Z, r6
				testMat[s1x][s1y] = (uint16_t)0xffff;
     bec:	aa 0f       	add	r26, r26
     bee:	bb 1f       	adc	r27, r27
     bf0:	a7 56       	subi	r26, 0x67	; 103
     bf2:	ba 4f       	sbci	r27, 0xFA	; 250
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	7c 92       	st	X, r7
     bf8:	6e 92       	st	-X, r6
				testMat[s2x][s2y] = (uint16_t)0xffff;
     bfa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bfc:	9e 85       	ldd	r25, Y+14	; 0x0e
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	83 5b       	subi	r24, 0xB3	; 179
     c04:	99 4f       	sbci	r25, 0xF9	; 249
     c06:	dc 01       	movw	r26, r24
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	7c 92       	st	X, r7
     c0c:	6e 92       	st	-X, r6
				testMat[s3x][s3y] = (uint16_t)0xffff;
     c0e:	ef 85       	ldd	r30, Y+15	; 0x0f
     c10:	f8 89       	ldd	r31, Y+16	; 0x10
     c12:	ee 0f       	add	r30, r30
     c14:	ff 1f       	adc	r31, r31
     c16:	ef 5f       	subi	r30, 0xFF	; 255
     c18:	f8 4f       	sbci	r31, 0xF8	; 248
     c1a:	71 82       	std	Z+1, r7	; 0x01
     c1c:	60 82       	st	Z, r6
				testMat[s4x][s4y] = (uint16_t)0xffff;
     c1e:	22 0f       	add	r18, r18
     c20:	33 1f       	adc	r19, r19
     c22:	2f 5c       	subi	r18, 0xCF	; 207
     c24:	3b 4f       	sbci	r19, 0xFB	; 251
     c26:	d9 01       	movw	r26, r18
     c28:	11 96       	adiw	r26, 0x01	; 1
     c2a:	7c 92       	st	X, r7
     c2c:	6e 92       	st	-X, r6
				testMat[s5x][s5y] = (uint16_t)0xffff;
     c2e:	44 0f       	add	r20, r20
     c30:	55 1f       	adc	r21, r21
     c32:	47 56       	subi	r20, 0x67	; 103
     c34:	5a 4f       	sbci	r21, 0xFA	; 250
     c36:	fa 01       	movw	r30, r20
     c38:	71 82       	std	Z+1, r7	; 0x01
     c3a:	60 82       	st	Z, r6
				testMat[s6x][s6y] = (uint16_t)0xffff;
     c3c:	66 0f       	add	r22, r22
     c3e:	77 1f       	adc	r23, r23
     c40:	6f 5f       	subi	r22, 0xFF	; 255
     c42:	78 4f       	sbci	r23, 0xF8	; 248
     c44:	db 01       	movw	r26, r22
     c46:	11 96       	adiw	r26, 0x01	; 1
     c48:	7c 92       	st	X, r7
     c4a:	6e 92       	st	-X, r6
				testMat[s7x][s7y] = (uint16_t)0xffff;
     c4c:	00 0f       	add	r16, r16
     c4e:	11 1f       	adc	r17, r17
     c50:	0f 5c       	subi	r16, 0xCF	; 207
     c52:	1b 4f       	sbci	r17, 0xFB	; 251
     c54:	f8 01       	movw	r30, r16
     c56:	71 82       	std	Z+1, r7	; 0x01
     c58:	60 82       	st	Z, r6
				testMat[s8x][s8y] = (uint16_t)0xffff;
     c5a:	ee 0c       	add	r14, r14
     c5c:	ff 1c       	adc	r15, r15
     c5e:	85 ee       	ldi	r24, 0xE5	; 229
     c60:	94 e0       	ldi	r25, 0x04	; 4
     c62:	e8 0e       	add	r14, r24
     c64:	f9 1e       	adc	r15, r25
     c66:	d7 01       	movw	r26, r14
     c68:	11 96       	adiw	r26, 0x01	; 1
     c6a:	7c 92       	st	X, r7
     c6c:	6e 92       	st	-X, r6
				testMat[s9x][s9y] = (uint16_t)0xffff;
     c6e:	cc 0c       	add	r12, r12
     c70:	dd 1c       	adc	r13, r13
     c72:	e9 e9       	ldi	r30, 0x99	; 153
     c74:	f5 e0       	ldi	r31, 0x05	; 5
     c76:	ce 0e       	add	r12, r30
     c78:	df 1e       	adc	r13, r31
     c7a:	d6 01       	movw	r26, r12
     c7c:	11 96       	adiw	r26, 0x01	; 1
     c7e:	7c 92       	st	X, r7
     c80:	6e 92       	st	-X, r6
				testMat[s10x][s10y] = (uint16_t)0xffff;
     c82:	aa 0c       	add	r10, r10
     c84:	bb 1c       	adc	r11, r11
     c86:	e1 e0       	ldi	r30, 0x01	; 1
     c88:	f7 e0       	ldi	r31, 0x07	; 7
     c8a:	ae 0e       	add	r10, r30
     c8c:	bf 1e       	adc	r11, r31
     c8e:	d5 01       	movw	r26, r10
     c90:	11 96       	adiw	r26, 0x01	; 1
     c92:	7c 92       	st	X, r7
     c94:	6e 92       	st	-X, r6
				// update and write new image
				s0y++; s1y++; s2y++; s3y++; s4y++; s5y++; s6y++; s7y++; s8y++; s9y++; s10y++;
     c96:	b9 85       	ldd	r27, Y+9	; 0x09
     c98:	bf 5f       	subi	r27, 0xFF	; 255
     c9a:	b9 87       	std	Y+9, r27	; 0x09
     c9c:	e8 85       	ldd	r30, Y+8	; 0x08
     c9e:	ef 5f       	subi	r30, 0xFF	; 255
     ca0:	e8 87       	std	Y+8, r30	; 0x08
     ca2:	ff 81       	ldd	r31, Y+7	; 0x07
     ca4:	ff 5f       	subi	r31, 0xFF	; 255
     ca6:	ff 83       	std	Y+7, r31	; 0x07
     ca8:	2e 81       	ldd	r18, Y+6	; 0x06
     caa:	2f 5f       	subi	r18, 0xFF	; 255
     cac:	2e 83       	std	Y+6, r18	; 0x06
     cae:	4d 81       	ldd	r20, Y+5	; 0x05
     cb0:	4f 5f       	subi	r20, 0xFF	; 255
     cb2:	4d 83       	std	Y+5, r20	; 0x05
     cb4:	6c 81       	ldd	r22, Y+4	; 0x04
     cb6:	6f 5f       	subi	r22, 0xFF	; 255
     cb8:	6c 83       	std	Y+4, r22	; 0x04
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	8f 5f       	subi	r24, 0xFF	; 255
     cbe:	8b 83       	std	Y+3, r24	; 0x03
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	9f 5f       	subi	r25, 0xFF	; 255
     cc4:	9a 83       	std	Y+2, r25	; 0x02
     cc6:	a9 81       	ldd	r26, Y+1	; 0x01
     cc8:	af 5f       	subi	r26, 0xFF	; 255
     cca:	a9 83       	std	Y+1, r26	; 0x01
     ccc:	23 94       	inc	r2
     cce:	33 94       	inc	r3
				testMat[s0x][s0y] = (uint16_t)0xf0f0;
     cd0:	eb 2f       	mov	r30, r27
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	ee 0f       	add	r30, r30
     cd6:	ff 1f       	adc	r31, r31
     cd8:	ef 5c       	subi	r30, 0xCF	; 207
     cda:	fb 4f       	sbci	r31, 0xFB	; 251
     cdc:	91 82       	std	Z+1, r9	; 0x01
     cde:	80 82       	st	Z, r8
				testMat[s1x][s1y] = (uint16_t)0xf0f0;
     ce0:	b8 85       	ldd	r27, Y+8	; 0x08
     ce2:	eb 2f       	mov	r30, r27
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	ee 0f       	add	r30, r30
     ce8:	ff 1f       	adc	r31, r31
     cea:	e7 56       	subi	r30, 0x67	; 103
     cec:	fa 4f       	sbci	r31, 0xFA	; 250
     cee:	91 82       	std	Z+1, r9	; 0x01
     cf0:	80 82       	st	Z, r8
				testMat[s2x][s2y] = (uint16_t)0xf0f0;
     cf2:	2f 81       	ldd	r18, Y+7	; 0x07
     cf4:	e2 2f       	mov	r30, r18
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	ee 0f       	add	r30, r30
     cfa:	ff 1f       	adc	r31, r31
     cfc:	e3 5b       	subi	r30, 0xB3	; 179
     cfe:	f9 4f       	sbci	r31, 0xF9	; 249
     d00:	91 82       	std	Z+1, r9	; 0x01
     d02:	80 82       	st	Z, r8
				testMat[s3x][s3y] = (uint16_t)0xf0f0;
     d04:	4e 81       	ldd	r20, Y+6	; 0x06
     d06:	e4 2f       	mov	r30, r20
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	ee 0f       	add	r30, r30
     d0c:	ff 1f       	adc	r31, r31
     d0e:	ef 5f       	subi	r30, 0xFF	; 255
     d10:	f8 4f       	sbci	r31, 0xF8	; 248
     d12:	91 82       	std	Z+1, r9	; 0x01
     d14:	80 82       	st	Z, r8
				testMat[s4x][s4y] = (uint16_t)0xf0f0;
     d16:	6d 81       	ldd	r22, Y+5	; 0x05
     d18:	e6 2f       	mov	r30, r22
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	ee 0f       	add	r30, r30
     d1e:	ff 1f       	adc	r31, r31
     d20:	ef 5c       	subi	r30, 0xCF	; 207
     d22:	fb 4f       	sbci	r31, 0xFB	; 251
     d24:	91 82       	std	Z+1, r9	; 0x01
     d26:	80 82       	st	Z, r8
				testMat[s5x][s5y] = (uint16_t)0xf0f0;
     d28:	8c 81       	ldd	r24, Y+4	; 0x04
     d2a:	e8 2f       	mov	r30, r24
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	ee 0f       	add	r30, r30
     d30:	ff 1f       	adc	r31, r31
     d32:	e7 56       	subi	r30, 0x67	; 103
     d34:	fa 4f       	sbci	r31, 0xFA	; 250
     d36:	91 82       	std	Z+1, r9	; 0x01
     d38:	80 82       	st	Z, r8
				testMat[s6x][s6y] = (uint16_t)0xf0f0;
     d3a:	9b 81       	ldd	r25, Y+3	; 0x03
     d3c:	e9 2f       	mov	r30, r25
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	ee 0f       	add	r30, r30
     d42:	ff 1f       	adc	r31, r31
     d44:	ef 5f       	subi	r30, 0xFF	; 255
     d46:	f8 4f       	sbci	r31, 0xF8	; 248
     d48:	91 82       	std	Z+1, r9	; 0x01
     d4a:	80 82       	st	Z, r8
				testMat[s7x][s7y] = (uint16_t)0xf0f0;
     d4c:	aa 81       	ldd	r26, Y+2	; 0x02
     d4e:	ea 2f       	mov	r30, r26
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	ee 0f       	add	r30, r30
     d54:	ff 1f       	adc	r31, r31
     d56:	ef 5c       	subi	r30, 0xCF	; 207
     d58:	fb 4f       	sbci	r31, 0xFB	; 251
     d5a:	91 82       	std	Z+1, r9	; 0x01
     d5c:	80 82       	st	Z, r8
				testMat[s8x][s8y] = (uint16_t)0xf0f0;
     d5e:	b9 81       	ldd	r27, Y+1	; 0x01
     d60:	eb 2f       	mov	r30, r27
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	ee 0f       	add	r30, r30
     d66:	ff 1f       	adc	r31, r31
     d68:	eb 51       	subi	r30, 0x1B	; 27
     d6a:	fb 4f       	sbci	r31, 0xFB	; 251
     d6c:	91 82       	std	Z+1, r9	; 0x01
     d6e:	80 82       	st	Z, r8
				testMat[s9x][s9y] = (uint16_t)0xf0f0;
     d70:	e2 2d       	mov	r30, r2
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	ee 0f       	add	r30, r30
     d76:	ff 1f       	adc	r31, r31
     d78:	e7 56       	subi	r30, 0x67	; 103
     d7a:	fa 4f       	sbci	r31, 0xFA	; 250
     d7c:	91 82       	std	Z+1, r9	; 0x01
     d7e:	80 82       	st	Z, r8
				testMat[s10x][s10y] = (uint16_t)0xf0f0;
     d80:	e3 2d       	mov	r30, r3
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	ee 0f       	add	r30, r30
     d86:	ff 1f       	adc	r31, r31
     d88:	ef 5f       	subi	r30, 0xFF	; 255
     d8a:	f8 4f       	sbci	r31, 0xF8	; 248
     d8c:	91 82       	std	Z+1, r9	; 0x01
     d8e:	80 82       	st	Z, r8
     d90:	55 24       	eor	r5, r5
     d92:	e0 c0       	rjmp	.+448    	; 0xf54 <task4+0x468>
			end
			else if(dir == RIGHT)
			begin
				curTime--;
     d94:	ea 85       	ldd	r30, Y+10	; 0x0a
     d96:	e1 50       	subi	r30, 0x01	; 1
     d98:	ea 87       	std	Y+10, r30	; 0x0a
				// clear old image
				testMat[s0x][s0y] = (uint16_t)0xffff;
     d9a:	8b 85       	ldd	r24, Y+11	; 0x0b
     d9c:	9c 85       	ldd	r25, Y+12	; 0x0c
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	8f 5c       	subi	r24, 0xCF	; 207
     da4:	9b 4f       	sbci	r25, 0xFB	; 251
     da6:	fc 01       	movw	r30, r24
     da8:	71 82       	std	Z+1, r7	; 0x01
     daa:	60 82       	st	Z, r6
				testMat[s1x][s1y] = (uint16_t)0xffff;
     dac:	aa 0f       	add	r26, r26
     dae:	bb 1f       	adc	r27, r27
     db0:	a7 56       	subi	r26, 0x67	; 103
     db2:	ba 4f       	sbci	r27, 0xFA	; 250
     db4:	11 96       	adiw	r26, 0x01	; 1
     db6:	7c 92       	st	X, r7
     db8:	6e 92       	st	-X, r6
				testMat[s2x][s2y] = (uint16_t)0xffff;
     dba:	8d 85       	ldd	r24, Y+13	; 0x0d
     dbc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	83 5b       	subi	r24, 0xB3	; 179
     dc4:	99 4f       	sbci	r25, 0xF9	; 249
     dc6:	dc 01       	movw	r26, r24
     dc8:	11 96       	adiw	r26, 0x01	; 1
     dca:	7c 92       	st	X, r7
     dcc:	6e 92       	st	-X, r6
				testMat[s3x][s3y] = (uint16_t)0xffff;
     dce:	ef 85       	ldd	r30, Y+15	; 0x0f
     dd0:	f8 89       	ldd	r31, Y+16	; 0x10
     dd2:	ee 0f       	add	r30, r30
     dd4:	ff 1f       	adc	r31, r31
     dd6:	ef 5f       	subi	r30, 0xFF	; 255
     dd8:	f8 4f       	sbci	r31, 0xF8	; 248
     dda:	71 82       	std	Z+1, r7	; 0x01
     ddc:	60 82       	st	Z, r6
				testMat[s4x][s4y] = (uint16_t)0xffff;
     dde:	22 0f       	add	r18, r18
     de0:	33 1f       	adc	r19, r19
     de2:	2f 5c       	subi	r18, 0xCF	; 207
     de4:	3b 4f       	sbci	r19, 0xFB	; 251
     de6:	d9 01       	movw	r26, r18
     de8:	11 96       	adiw	r26, 0x01	; 1
     dea:	7c 92       	st	X, r7
     dec:	6e 92       	st	-X, r6
				testMat[s5x][s5y] = (uint16_t)0xffff;
     dee:	44 0f       	add	r20, r20
     df0:	55 1f       	adc	r21, r21
     df2:	47 56       	subi	r20, 0x67	; 103
     df4:	5a 4f       	sbci	r21, 0xFA	; 250
     df6:	fa 01       	movw	r30, r20
     df8:	71 82       	std	Z+1, r7	; 0x01
     dfa:	60 82       	st	Z, r6
				testMat[s6x][s6y] = (uint16_t)0xffff;
     dfc:	66 0f       	add	r22, r22
     dfe:	77 1f       	adc	r23, r23
     e00:	6f 5f       	subi	r22, 0xFF	; 255
     e02:	78 4f       	sbci	r23, 0xF8	; 248
     e04:	db 01       	movw	r26, r22
     e06:	11 96       	adiw	r26, 0x01	; 1
     e08:	7c 92       	st	X, r7
     e0a:	6e 92       	st	-X, r6
				testMat[s7x][s7y] = (uint16_t)0xffff;
     e0c:	00 0f       	add	r16, r16
     e0e:	11 1f       	adc	r17, r17
     e10:	0f 5c       	subi	r16, 0xCF	; 207
     e12:	1b 4f       	sbci	r17, 0xFB	; 251
     e14:	f8 01       	movw	r30, r16
     e16:	71 82       	std	Z+1, r7	; 0x01
     e18:	60 82       	st	Z, r6
				testMat[s8x][s8y] = (uint16_t)0xffff;
     e1a:	ee 0c       	add	r14, r14
     e1c:	ff 1c       	adc	r15, r15
     e1e:	85 ee       	ldi	r24, 0xE5	; 229
     e20:	94 e0       	ldi	r25, 0x04	; 4
     e22:	e8 0e       	add	r14, r24
     e24:	f9 1e       	adc	r15, r25
     e26:	d7 01       	movw	r26, r14
     e28:	11 96       	adiw	r26, 0x01	; 1
     e2a:	7c 92       	st	X, r7
     e2c:	6e 92       	st	-X, r6
				testMat[s9x][s9y] = (uint16_t)0xffff;
     e2e:	cc 0c       	add	r12, r12
     e30:	dd 1c       	adc	r13, r13
     e32:	e9 e9       	ldi	r30, 0x99	; 153
     e34:	f5 e0       	ldi	r31, 0x05	; 5
     e36:	ce 0e       	add	r12, r30
     e38:	df 1e       	adc	r13, r31
     e3a:	d6 01       	movw	r26, r12
     e3c:	11 96       	adiw	r26, 0x01	; 1
     e3e:	7c 92       	st	X, r7
     e40:	6e 92       	st	-X, r6
				testMat[s10x][s10y] = (uint16_t)0xffff;
     e42:	aa 0c       	add	r10, r10
     e44:	bb 1c       	adc	r11, r11
     e46:	e1 e0       	ldi	r30, 0x01	; 1
     e48:	f7 e0       	ldi	r31, 0x07	; 7
     e4a:	ae 0e       	add	r10, r30
     e4c:	bf 1e       	adc	r11, r31
     e4e:	d5 01       	movw	r26, r10
     e50:	11 96       	adiw	r26, 0x01	; 1
     e52:	7c 92       	st	X, r7
     e54:	6e 92       	st	-X, r6
				// update and write new image
				s0y--; s1y--; s2y--; s3y--; s4y--; s5y--; s6y--; s7y--; s8y--; s9y--; s10y--;
     e56:	b9 85       	ldd	r27, Y+9	; 0x09
     e58:	b1 50       	subi	r27, 0x01	; 1
     e5a:	b9 87       	std	Y+9, r27	; 0x09
     e5c:	e8 85       	ldd	r30, Y+8	; 0x08
     e5e:	e1 50       	subi	r30, 0x01	; 1
     e60:	e8 87       	std	Y+8, r30	; 0x08
     e62:	ff 81       	ldd	r31, Y+7	; 0x07
     e64:	f1 50       	subi	r31, 0x01	; 1
     e66:	ff 83       	std	Y+7, r31	; 0x07
     e68:	2e 81       	ldd	r18, Y+6	; 0x06
     e6a:	21 50       	subi	r18, 0x01	; 1
     e6c:	2e 83       	std	Y+6, r18	; 0x06
     e6e:	4d 81       	ldd	r20, Y+5	; 0x05
     e70:	41 50       	subi	r20, 0x01	; 1
     e72:	4d 83       	std	Y+5, r20	; 0x05
     e74:	6c 81       	ldd	r22, Y+4	; 0x04
     e76:	61 50       	subi	r22, 0x01	; 1
     e78:	6c 83       	std	Y+4, r22	; 0x04
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	81 50       	subi	r24, 0x01	; 1
     e7e:	8b 83       	std	Y+3, r24	; 0x03
     e80:	9a 81       	ldd	r25, Y+2	; 0x02
     e82:	91 50       	subi	r25, 0x01	; 1
     e84:	9a 83       	std	Y+2, r25	; 0x02
     e86:	a9 81       	ldd	r26, Y+1	; 0x01
     e88:	a1 50       	subi	r26, 0x01	; 1
     e8a:	a9 83       	std	Y+1, r26	; 0x01
     e8c:	2a 94       	dec	r2
     e8e:	3a 94       	dec	r3
				testMat[s0x][s0y] = (uint16_t)0xf0f0;
     e90:	eb 2f       	mov	r30, r27
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	ee 0f       	add	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	ef 5c       	subi	r30, 0xCF	; 207
     e9a:	fb 4f       	sbci	r31, 0xFB	; 251
     e9c:	91 82       	std	Z+1, r9	; 0x01
     e9e:	80 82       	st	Z, r8
				testMat[s1x][s1y] = (uint16_t)0xf0f0;
     ea0:	b8 85       	ldd	r27, Y+8	; 0x08
     ea2:	eb 2f       	mov	r30, r27
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	ee 0f       	add	r30, r30
     ea8:	ff 1f       	adc	r31, r31
     eaa:	e7 56       	subi	r30, 0x67	; 103
     eac:	fa 4f       	sbci	r31, 0xFA	; 250
     eae:	91 82       	std	Z+1, r9	; 0x01
     eb0:	80 82       	st	Z, r8
				testMat[s2x][s2y] = (uint16_t)0xf0f0;
     eb2:	2f 81       	ldd	r18, Y+7	; 0x07
     eb4:	e2 2f       	mov	r30, r18
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	ee 0f       	add	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	e3 5b       	subi	r30, 0xB3	; 179
     ebe:	f9 4f       	sbci	r31, 0xF9	; 249
     ec0:	91 82       	std	Z+1, r9	; 0x01
     ec2:	80 82       	st	Z, r8
				testMat[s3x][s3y] = (uint16_t)0xf0f0;
     ec4:	4e 81       	ldd	r20, Y+6	; 0x06
     ec6:	e4 2f       	mov	r30, r20
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	ee 0f       	add	r30, r30
     ecc:	ff 1f       	adc	r31, r31
     ece:	ef 5f       	subi	r30, 0xFF	; 255
     ed0:	f8 4f       	sbci	r31, 0xF8	; 248
     ed2:	91 82       	std	Z+1, r9	; 0x01
     ed4:	80 82       	st	Z, r8
				testMat[s4x][s4y] = (uint16_t)0xf0f0;
     ed6:	6d 81       	ldd	r22, Y+5	; 0x05
     ed8:	e6 2f       	mov	r30, r22
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	ee 0f       	add	r30, r30
     ede:	ff 1f       	adc	r31, r31
     ee0:	ef 5c       	subi	r30, 0xCF	; 207
     ee2:	fb 4f       	sbci	r31, 0xFB	; 251
     ee4:	91 82       	std	Z+1, r9	; 0x01
     ee6:	80 82       	st	Z, r8
				testMat[s5x][s5y] = (uint16_t)0xf0f0;
     ee8:	8c 81       	ldd	r24, Y+4	; 0x04
     eea:	e8 2f       	mov	r30, r24
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	ee 0f       	add	r30, r30
     ef0:	ff 1f       	adc	r31, r31
     ef2:	e7 56       	subi	r30, 0x67	; 103
     ef4:	fa 4f       	sbci	r31, 0xFA	; 250
     ef6:	91 82       	std	Z+1, r9	; 0x01
     ef8:	80 82       	st	Z, r8
				testMat[s6x][s6y] = (uint16_t)0xf0f0;
     efa:	9b 81       	ldd	r25, Y+3	; 0x03
     efc:	e9 2f       	mov	r30, r25
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	ee 0f       	add	r30, r30
     f02:	ff 1f       	adc	r31, r31
     f04:	ef 5f       	subi	r30, 0xFF	; 255
     f06:	f8 4f       	sbci	r31, 0xF8	; 248
     f08:	91 82       	std	Z+1, r9	; 0x01
     f0a:	80 82       	st	Z, r8
				testMat[s7x][s7y] = (uint16_t)0xf0f0;
     f0c:	aa 81       	ldd	r26, Y+2	; 0x02
     f0e:	ea 2f       	mov	r30, r26
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	ee 0f       	add	r30, r30
     f14:	ff 1f       	adc	r31, r31
     f16:	ef 5c       	subi	r30, 0xCF	; 207
     f18:	fb 4f       	sbci	r31, 0xFB	; 251
     f1a:	91 82       	std	Z+1, r9	; 0x01
     f1c:	80 82       	st	Z, r8
				testMat[s8x][s8y] = (uint16_t)0xf0f0;
     f1e:	b9 81       	ldd	r27, Y+1	; 0x01
     f20:	eb 2f       	mov	r30, r27
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	ee 0f       	add	r30, r30
     f26:	ff 1f       	adc	r31, r31
     f28:	eb 51       	subi	r30, 0x1B	; 27
     f2a:	fb 4f       	sbci	r31, 0xFB	; 251
     f2c:	91 82       	std	Z+1, r9	; 0x01
     f2e:	80 82       	st	Z, r8
				testMat[s9x][s9y] = (uint16_t)0xf0f0;
     f30:	e2 2d       	mov	r30, r2
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	ee 0f       	add	r30, r30
     f36:	ff 1f       	adc	r31, r31
     f38:	e7 56       	subi	r30, 0x67	; 103
     f3a:	fa 4f       	sbci	r31, 0xFA	; 250
     f3c:	91 82       	std	Z+1, r9	; 0x01
     f3e:	80 82       	st	Z, r8
				testMat[s10x][s10y] = (uint16_t)0xf0f0;
     f40:	e3 2d       	mov	r30, r3
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	ee 0f       	add	r30, r30
     f46:	ff 1f       	adc	r31, r31
     f48:	ef 5f       	subi	r30, 0xFF	; 255
     f4a:	f8 4f       	sbci	r31, 0xF8	; 248
     f4c:	91 82       	std	Z+1, r9	; 0x01
     f4e:	80 82       	st	Z, r8
     f50:	55 24       	eor	r5, r5
     f52:	53 94       	inc	r5
     f54:	20 91 5a 0c 	lds	r18, 0x0C5A
     f58:	30 91 5b 0c 	lds	r19, 0x0C5B
     f5c:	40 91 5c 0c 	lds	r20, 0x0C5C
     f60:	50 91 5d 0c 	lds	r21, 0x0C5D
     f64:	a9 01       	movw	r20, r18
     f66:	33 27       	eor	r19, r19
     f68:	22 27       	eor	r18, r18
     f6a:	60 91 84 00 	lds	r22, 0x0084
     f6e:	70 91 85 00 	lds	r23, 0x0085
			end
		end
		//update release and deadline
		rel = trtCurrentTime() + SECONDS2TICKS(.5);
		dead = trtCurrentTime() + SECONDS2TICKS(.55);
		trtSleepUntil(rel, dead);
     f72:	e0 90 84 00 	lds	r14, 0x0084
     f76:	f0 90 85 00 	lds	r15, 0x0085
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	62 0f       	add	r22, r18
     f80:	73 1f       	adc	r23, r19
     f82:	84 1f       	adc	r24, r20
     f84:	95 1f       	adc	r25, r21
     f86:	6c 57       	subi	r22, 0x7C	; 124
     f88:	71 4e       	sbci	r23, 0xE1	; 225
     f8a:	8f 4f       	sbci	r24, 0xFF	; 255
     f8c:	9f 4f       	sbci	r25, 0xFF	; 255
     f8e:	00 e0       	ldi	r16, 0x00	; 0
     f90:	10 e0       	ldi	r17, 0x00	; 0
     f92:	2e 0d       	add	r18, r14
     f94:	3f 1d       	adc	r19, r15
     f96:	40 1f       	adc	r20, r16
     f98:	51 1f       	adc	r21, r17
     f9a:	2f 56       	subi	r18, 0x6F	; 111
     f9c:	3e 4d       	sbci	r19, 0xDE	; 222
     f9e:	4f 4f       	sbci	r20, 0xFF	; 255
     fa0:	5f 4f       	sbci	r21, 0xFF	; 255
     fa2:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <trtSleepUntil>
     fa6:	d5 cd       	rjmp	.-1110   	; 0xb52 <task4+0x66>

00000fa8 <initTimers>:
//***************************************************************
// --- Initialize Timer for INT0 ----------------------------------
void initTimers(void) 
begin
	//set up INT0
	EIMSK = 1<<INT0 ; // turn on int0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	8d bb       	out	0x1d, r24	; 29
	EICRA = 3 ;       // rising edge
     fac:	93 e0       	ldi	r25, 0x03	; 3
     fae:	90 93 69 00 	sts	0x0069, r25
	// turn on timer 2 to be read in int0 ISR	
	TCCR2B = 7 ; // divide by 1024
     fb2:	97 e0       	ldi	r25, 0x07	; 7
     fb4:	90 93 b1 00 	sts	0x00B1, r25
	// turn on timer 2 overflow ISR for double precision time
	TIMSK2 = 1 ;
     fb8:	80 93 70 00 	sts	0x0070, r24
end
     fbc:	08 95       	ret

00000fbe <initUART>:

//***************************************************************
// --- Initialize UART COMM ----------------------------------
void initUART(void)
begin
	state=WAIT_SYNC;
     fbe:	10 92 f3 0b 	sts	0x0BF3, r1
     fc2:	10 92 f2 0b 	sts	0x0BF2, r1
	next_state = WAIT_SYNC;
     fc6:	10 92 f0 0b 	sts	0x0BF0, r1
     fca:	10 92 ef 0b 	sts	0x0BEF, r1
	
	//USART Initialization
	UBRR0H = (uint8_t) (UBRRVAL>>8);  // high byte
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (uint8_t) UBRRVAL;   // low byte        
     fd4:	8f e9       	ldi	r24, 0x9F	; 159
     fd6:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B =  (1<<RXEN0)| (1 << RXCIE0) ;  // enable Receiver	
     fda:	80 e9       	ldi	r24, 0x90	; 144
     fdc:	80 93 c1 00 	sts	0x00C1, r24
	// data frame format, asynch mode, no parity, 1 stop bit, 8 bit size
    UCSR0C = (0<<UMSEL00) | (0<<UMSEL01) | (0<<UPM00) | (0<<UPM01) | (0<<USBS0) | (3<<UCSZ00) ;   
     fe0:	86 e0       	ldi	r24, 0x06	; 6
     fe2:	80 93 c2 00 	sts	0x00C2, r24
	
	//Initializing Varibles for state machine and data decoding
	SET_COL = 0;
     fe6:	10 92 64 0c 	sts	0x0C64, r1
     fea:	10 92 63 0c 	sts	0x0C63, r1
	col=0;
     fee:	10 92 0f 0c 	sts	0x0C0F, r1
     ff2:	10 92 0e 0c 	sts	0x0C0E, r1
	row=0;	
     ff6:	10 92 68 0c 	sts	0x0C68, r1
     ffa:	10 92 67 0c 	sts	0x0C67, r1
	nible_1 = 0;
     ffe:	10 92 17 0c 	sts	0x0C17, r1
	nible_2 = 0;
    1002:	10 92 14 02 	sts	0x0214, r1
	nible_3 = 0;
    1006:	10 92 f1 0b 	sts	0x0BF1, r1
	nible_4 = 0;
    100a:	10 92 f8 0b 	sts	0x0BF8, r1
	col_data = 0;
    100e:	10 92 f7 0b 	sts	0x0BF7, r1
    1012:	10 92 f6 0b 	sts	0x0BF6, r1
	data = 0;
    1016:	10 92 10 0c 	sts	0x0C10, r1
end
    101a:	08 95       	ret

0000101c <SPIwrite>:
begin

uint8_t junk;
	
	//chip select low begins conversion 
	CLR(PORTB,index);   
    101c:	95 b1       	in	r25, 0x05	; 5
    101e:	21 e0       	ldi	r18, 0x01	; 1
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <SPIwrite+0xc>
    1024:	22 0f       	add	r18, r18
    1026:	33 1f       	adc	r19, r19
    1028:	8a 95       	dec	r24
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <SPIwrite+0x8>
    102c:	82 2f       	mov	r24, r18
    102e:	80 95       	com	r24
    1030:	89 23       	and	r24, r25
    1032:	85 b9       	out	0x05, r24	; 5

	//send address
	SPDR = address;
    1034:	6e bd       	out	0x2e, r22	; 46
 
	//wait until SPIF is set (SPI done)
    while (!(SPSR & (1<<SPIF))) ;
    1036:	0d b4       	in	r0, 0x2d	; 45
    1038:	07 fe       	sbrs	r0, 7
    103a:	fd cf       	rjmp	.-6      	; 0x1036 <SPIwrite+0x1a>
		junk = SPDR ; // get back junk		  
    103c:	8e b5       	in	r24, 0x2e	; 46

        
	// Send SPI data
    SPDR = data ; 
    103e:	4e bd       	out	0x2e, r20	; 46

	// wait until SPIF is set (SPI done)
    while (!(SPSR & (1<<SPIF))) ;
    1040:	0d b4       	in	r0, 0x2d	; 45
    1042:	07 fe       	sbrs	r0, 7
    1044:	fd cf       	rjmp	.-6      	; 0x1040 <SPIwrite+0x24>
		junk = SPDR; // read back values from MAX6966
    1046:	8e b5       	in	r24, 0x2e	; 46


	//chip select high ends conversion
    SET(PORTB,index);  
    1048:	85 b1       	in	r24, 0x05	; 5
    104a:	28 2b       	or	r18, r24
    104c:	25 b9       	out	0x05, r18	; 5

end
    104e:	08 95       	ret

00001050 <SPIinitialize>:
end

//***************************************************************
// --- Initialize SPI ----------------------------------
void SPIinitialize(void)
begin
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    //DDRB.3 = 1; //output chip select for MAX3 
	//DDRB.4 = 1; //output chip select for MAX4 
    //DDRB.5 = 1; //output MOSI to ADC
    //DDRB.6 = 0; //input MISO from ADC
    //DDRB.7 = 1; //output SCLK   
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2) | (1<<DDB3) | (1<<DDB4) | (1<<DDB5) | (1<<DDB7) ; 
    1056:	8f eb       	ldi	r24, 0xBF	; 191
    1058:	84 b9       	out	0x04, r24	; 4
	
	// initialize notSYNC
	SET(PORTB,0) ;
    105a:	28 9a       	sbi	0x05, 0	; 5
	SET(PORTB,1) ;
    105c:	29 9a       	sbi	0x05, 1	; 5
	SET(PORTB,2) ;
    105e:	2a 9a       	sbi	0x05, 2	; 5
	SET(PORTB,3) ;
    1060:	2b 9a       	sbi	0x05, 3	; 5
	SET(PORTB,4) ;
    1062:	2c 9a       	sbi	0x05, 4	; 5
    //bit 5 DORD=0 msb first 
    //bit 4 MSTR=1 Mega32 is spi master
    //bit 3 CPOL=0 clock polarity (0 baseline)
    //bit 2 CPHA=0 clock phase (pos edge)
    //bit 1,0 rate sel=10 along with SPRC=1 sets clk to f/32 = 500 kHz
    SPCR = (1<<SPE) | (1<<MSTR); //SPCR SPCR = 0b01011110 ;                                                                               
    1064:	80 e5       	ldi	r24, 0x50	; 80
    1066:	8c bd       	out	0x2c, r24	; 44
    SPSR = (1<<SPI2X) ; //SPSR = 1;
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	8d bd       	out	0x2d, r24	; 45
    106c:	c0 e0       	ldi	r28, 0x00	; 0
    106e:	d0 e0       	ldi	r29, 0x00	; 0
    1070:	1b c0       	rjmp	.+54     	; 0x10a8 <SPIinitialize+0x58>
	begin

		//FOR EACH OUTPUT PIN ON MAX CHIP J
		for (int k = 0; k < 10; k++)
		begin
			SPIwrite(j, k, pin_high);
    1072:	ce 01       	movw	r24, r28
    1074:	61 2f       	mov	r22, r17
    1076:	4f ef       	ldi	r20, 0xFF	; 255
    1078:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
    107c:	1f 5f       	subi	r17, 0xFF	; 255

	for (int j = 0; j < 5; j++)
	begin

		//FOR EACH OUTPUT PIN ON MAX CHIP J
		for (int k = 0; k < 10; k++)
    107e:	1a 30       	cpi	r17, 0x0A	; 10
    1080:	c1 f7       	brne	.-16     	; 0x1072 <SPIinitialize+0x22>
		begin
			SPIwrite(j, k, pin_high);
		end

		//CONFIG REGISTERS
		SPIwrite(j, 0x15, 0x03);		// Max Current Sink
    1082:	ce 01       	movw	r24, r28
    1084:	65 e1       	ldi	r22, 0x15	; 21
    1086:	43 e0       	ldi	r20, 0x03	; 3
    1088:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
		SPIwrite(j, 0x13, 0b11111111);	//PORT 0-7 set to full current
    108c:	ce 01       	movw	r24, r28
    108e:	63 e1       	ldi	r22, 0x13	; 19
    1090:	4f ef       	ldi	r20, 0xFF	; 255
    1092:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
		//D4 = 0, Run Mode
		//D3 = 0, Run Mode
		//D2 = 0, Ramp up Enable
		//D1 = 1, CS Run
		//D0 = 1, Run Mode
		SPIwrite(j, 0x10, 0b00010001);
    1096:	ce 01       	movw	r24, r28
    1098:	60 e1       	ldi	r22, 0x10	; 16
    109a:	41 e1       	ldi	r20, 0x11	; 17
    109c:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
    SPCR = (1<<SPE) | (1<<MSTR); //SPCR SPCR = 0b01011110 ;                                                                               
    SPSR = (1<<SPI2X) ; //SPSR = 1;

	// FOR EACH MAX CHIP

	for (int j = 0; j < 5; j++)
    10a0:	21 96       	adiw	r28, 0x01	; 1
    10a2:	c5 30       	cpi	r28, 0x05	; 5
    10a4:	d1 05       	cpc	r29, r1
    10a6:	11 f0       	breq	.+4      	; 0x10ac <SPIinitialize+0x5c>
    10a8:	10 e0       	ldi	r17, 0x00	; 0
    10aa:	e3 cf       	rjmp	.-58     	; 0x1072 <SPIinitialize+0x22>
		//D1 = 1, CS Run
		//D0 = 1, Run Mode
		SPIwrite(j, 0x10, 0b00010001);
	end

end
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	08 95       	ret

000010b4 <task3>:
end

//***************************************************************
// --- Run LED code ----------------------------------
void task3(void* args)
begin
    10b4:	2f 92       	push	r2
    10b6:	3f 92       	push	r3
    10b8:	4f 92       	push	r4
    10ba:	5f 92       	push	r5
    10bc:	6f 92       	push	r6
    10be:	7f 92       	push	r7
    10c0:	8f 92       	push	r8
    10c2:	9f 92       	push	r9
    10c4:	af 92       	push	r10
    10c6:	bf 92       	push	r11
    10c8:	cf 92       	push	r12
    10ca:	df 92       	push	r13
    10cc:	ef 92       	push	r14
    10ce:	ff 92       	push	r15
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	aa 97       	sbiw	r28, 0x2a	; 42
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61

			//for each row pixel in the col (= ledPos), update the LED intensity.   
			for(int k = 0; k < 14; k++)
			begin
				//Map 4-bit value to 8-bit value.  (ie. 0a->aa, 04->44)
				tempR = testMat[k][ledPos] & 0x000f;
    10e8:	4a e5       	ldi	r20, 0x5A	; 90
    10ea:	24 2e       	mov	r2, r20
    10ec:	31 2c       	mov	r3, r1
				tempG = testMat[k][ledPos] & 0x00f0;
				tempB = testMat[k][ledPos] & 0x0f00;
				r[k] = (uint8_t)((tempR<<4)+tempR);
    10ee:	4e 01       	movw	r8, r28
    10f0:	08 94       	sec
    10f2:	81 1c       	adc	r8, r1
    10f4:	91 1c       	adc	r9, r1
				g[k] = (uint8_t)((tempG)+(tempG>>4));
    10f6:	3f e0       	ldi	r19, 0x0F	; 15
    10f8:	63 2e       	mov	r6, r19
    10fa:	71 2c       	mov	r7, r1
    10fc:	6c 0e       	add	r6, r28
    10fe:	7d 1e       	adc	r7, r29
				b[k] = (uint8_t)((tempB>>4)+(tempB>>8));
    1100:	2d e1       	ldi	r18, 0x1D	; 29
    1102:	42 2e       	mov	r4, r18
    1104:	51 2c       	mov	r5, r1
    1106:	4c 0e       	add	r4, r28
    1108:	5d 1e       	adc	r5, r29

	while(1)
	begin
		
		//if the ledPos varible is valid
		if(ledPos < 90)
    110a:	80 91 11 0c 	lds	r24, 0x0C11
    110e:	90 91 12 0c 	lds	r25, 0x0C12
    1112:	8a 35       	cpi	r24, 0x5A	; 90
    1114:	91 05       	cpc	r25, r1
    1116:	1c f0       	brlt	.+6      	; 0x111e <__stack+0x1f>
    1118:	00 e0       	ldi	r16, 0x00	; 0
    111a:	10 e0       	ldi	r17, 0x00	; 0
    111c:	61 c1       	rjmp	.+706    	; 0x13e0 <__stack+0x2e1>
    111e:	00 e0       	ldi	r16, 0x00	; 0
    1120:	10 e0       	ldi	r17, 0x00	; 0

			//for each row pixel in the col (= ledPos), update the LED intensity.   
			for(int k = 0; k < 14; k++)
			begin
				//Map 4-bit value to 8-bit value.  (ie. 0a->aa, 04->44)
				tempR = testMat[k][ledPos] & 0x000f;
    1122:	e0 91 11 0c 	lds	r30, 0x0C11
    1126:	f0 91 12 0c 	lds	r31, 0x0C12
    112a:	02 9d       	mul	r16, r2
    112c:	d0 01       	movw	r26, r0
    112e:	03 9d       	mul	r16, r3
    1130:	b0 0d       	add	r27, r0
    1132:	12 9d       	mul	r17, r2
    1134:	b0 0d       	add	r27, r0
    1136:	11 24       	eor	r1, r1
    1138:	ea 0f       	add	r30, r26
    113a:	fb 1f       	adc	r31, r27
    113c:	ee 0f       	add	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	eb 5e       	subi	r30, 0xEB	; 235
    1142:	fd 4f       	sbci	r31, 0xFD	; 253
    1144:	60 81       	ld	r22, Z
    1146:	71 81       	ldd	r23, Z+1	; 0x01
				tempG = testMat[k][ledPos] & 0x00f0;
    1148:	e0 91 11 0c 	lds	r30, 0x0C11
    114c:	f0 91 12 0c 	lds	r31, 0x0C12
    1150:	ea 0f       	add	r30, r26
    1152:	fb 1f       	adc	r31, r27
    1154:	ee 0f       	add	r30, r30
    1156:	ff 1f       	adc	r31, r31
    1158:	eb 5e       	subi	r30, 0xEB	; 235
    115a:	fd 4f       	sbci	r31, 0xFD	; 253
    115c:	40 81       	ld	r20, Z
    115e:	51 81       	ldd	r21, Z+1	; 0x01
    1160:	40 7f       	andi	r20, 0xF0	; 240
    1162:	50 70       	andi	r21, 0x00	; 0
				tempB = testMat[k][ledPos] & 0x0f00;
    1164:	80 91 11 0c 	lds	r24, 0x0C11
    1168:	90 91 12 0c 	lds	r25, 0x0C12
    116c:	a8 0f       	add	r26, r24
    116e:	b9 1f       	adc	r27, r25
    1170:	aa 0f       	add	r26, r26
    1172:	bb 1f       	adc	r27, r27
    1174:	ab 5e       	subi	r26, 0xEB	; 235
    1176:	bd 4f       	sbci	r27, 0xFD	; 253
    1178:	2d 91       	ld	r18, X+
    117a:	3c 91       	ld	r19, X
    117c:	20 70       	andi	r18, 0x00	; 0
    117e:	3f 70       	andi	r19, 0x0F	; 15
				r[k] = (uint8_t)((tempR<<4)+tempR);
    1180:	6f 70       	andi	r22, 0x0F	; 15
    1182:	f4 01       	movw	r30, r8
    1184:	e0 0f       	add	r30, r16
    1186:	f1 1f       	adc	r31, r17
    1188:	86 2f       	mov	r24, r22
    118a:	82 95       	swap	r24
    118c:	80 7f       	andi	r24, 0xF0	; 240
    118e:	86 0f       	add	r24, r22
    1190:	80 83       	st	Z, r24
				g[k] = (uint8_t)((tempG)+(tempG>>4));
    1192:	f3 01       	movw	r30, r6
    1194:	e0 0f       	add	r30, r16
    1196:	f1 1f       	adc	r31, r17
    1198:	ca 01       	movw	r24, r20
    119a:	54 e0       	ldi	r21, 0x04	; 4
    119c:	96 95       	lsr	r25
    119e:	87 95       	ror	r24
    11a0:	5a 95       	dec	r21
    11a2:	e1 f7       	brne	.-8      	; 0x119c <__stack+0x9d>
    11a4:	84 0f       	add	r24, r20
    11a6:	80 83       	st	Z, r24
				b[k] = (uint8_t)((tempB>>4)+(tempB>>8));
    11a8:	f2 01       	movw	r30, r4
    11aa:	e0 0f       	add	r30, r16
    11ac:	f1 1f       	adc	r31, r17
    11ae:	c9 01       	movw	r24, r18
    11b0:	44 e0       	ldi	r20, 0x04	; 4
    11b2:	96 95       	lsr	r25
    11b4:	87 95       	ror	r24
    11b6:	4a 95       	dec	r20
    11b8:	e1 f7       	brne	.-8      	; 0x11b2 <__stack+0xb3>
    11ba:	83 0f       	add	r24, r19
    11bc:	80 83       	st	Z, r24
		//if the ledPos varible is valid
		if(ledPos < 90)
		begin

			//for each row pixel in the col (= ledPos), update the LED intensity.   
			for(int k = 0; k < 14; k++)
    11be:	0f 5f       	subi	r16, 0xFF	; 255
    11c0:	1f 4f       	sbci	r17, 0xFF	; 255
    11c2:	0e 30       	cpi	r16, 0x0E	; 14
    11c4:	11 05       	cpc	r17, r1
    11c6:	09 f0       	breq	.+2      	; 0x11ca <__stack+0xcb>
    11c8:	ac cf       	rjmp	.-168    	; 0x1122 <__stack+0x23>
			14		G		4			1
			14		R		4			0
			*/	

			//Update all Red LED ports
			SPIwrite(0, MAX_PORT2, r[0]);
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	62 e0       	ldi	r22, 0x02	; 2
    11d0:	49 81       	ldd	r20, Y+1	; 0x01
    11d2:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(0, MAX_PORT7, r[1]);
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	67 e0       	ldi	r22, 0x07	; 7
    11dc:	4a 81       	ldd	r20, Y+2	; 0x02
    11de:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(2, MAX_PORT2, r[2]);
    11e2:	82 e0       	ldi	r24, 0x02	; 2
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	62 e0       	ldi	r22, 0x02	; 2
    11e8:	4b 81       	ldd	r20, Y+3	; 0x03
    11ea:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(1, MAX_PORT8, r[3]);
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	68 e0       	ldi	r22, 0x08	; 8
    11f4:	4c 81       	ldd	r20, Y+4	; 0x04
    11f6:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(2, MAX_PORT3, r[4]);
    11fa:	82 e0       	ldi	r24, 0x02	; 2
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	63 e0       	ldi	r22, 0x03	; 3
    1200:	4d 81       	ldd	r20, Y+5	; 0x05
    1202:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(2, MAX_PORT6, r[5]);
    1206:	82 e0       	ldi	r24, 0x02	; 2
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	66 e0       	ldi	r22, 0x06	; 6
    120c:	4e 81       	ldd	r20, Y+6	; 0x06
    120e:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(1, MAX_PORT3, r[6]);
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	63 e0       	ldi	r22, 0x03	; 3
    1218:	4f 81       	ldd	r20, Y+7	; 0x07
    121a:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(2, MAX_PORT9, r[7]);
    121e:	82 e0       	ldi	r24, 0x02	; 2
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	69 e0       	ldi	r22, 0x09	; 9
    1224:	48 85       	ldd	r20, Y+8	; 0x08
    1226:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(4, MAX_PORT8, r[8]);
    122a:	84 e0       	ldi	r24, 0x04	; 4
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	68 e0       	ldi	r22, 0x08	; 8
    1230:	49 85       	ldd	r20, Y+9	; 0x09
    1232:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(3, MAX_PORT1, r[9]);
    1236:	83 e0       	ldi	r24, 0x03	; 3
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	61 e0       	ldi	r22, 0x01	; 1
    123c:	4a 85       	ldd	r20, Y+10	; 0x0a
    123e:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(3, MAX_PORT6, r[10]);
    1242:	83 e0       	ldi	r24, 0x03	; 3
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	66 e0       	ldi	r22, 0x06	; 6
    1248:	4b 85       	ldd	r20, Y+11	; 0x0b
    124a:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(4, MAX_PORT3, r[11]);
    124e:	84 e0       	ldi	r24, 0x04	; 4
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	63 e0       	ldi	r22, 0x03	; 3
    1254:	4c 85       	ldd	r20, Y+12	; 0x0c
    1256:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(3, MAX_PORT9, r[12]);
    125a:	83 e0       	ldi	r24, 0x03	; 3
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	69 e0       	ldi	r22, 0x09	; 9
    1260:	4d 85       	ldd	r20, Y+13	; 0x0d
    1262:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(4, MAX_PORT0, 255);
    1266:	84 e0       	ldi	r24, 0x04	; 4
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	4f ef       	ldi	r20, 0xFF	; 255
    126e:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>

			//Update all Green LED ports
			SPIwrite(0, MAX_PORT1, g[0]);
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	61 e0       	ldi	r22, 0x01	; 1
    1278:	4f 85       	ldd	r20, Y+15	; 0x0f
    127a:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(0, MAX_PORT6, g[1]);
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	66 e0       	ldi	r22, 0x06	; 6
    1284:	48 89       	ldd	r20, Y+16	; 0x10
    1286:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(2, MAX_PORT1, g[2]);
    128a:	82 e0       	ldi	r24, 0x02	; 2
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	61 e0       	ldi	r22, 0x01	; 1
    1290:	49 89       	ldd	r20, Y+17	; 0x11
    1292:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(0, MAX_PORT9, g[3]);
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	69 e0       	ldi	r22, 0x09	; 9
    129c:	4a 89       	ldd	r20, Y+18	; 0x12
    129e:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(0, MAX_PORT4, g[4]);
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	64 e0       	ldi	r22, 0x04	; 4
    12a8:	4b 89       	ldd	r20, Y+19	; 0x13
    12aa:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(2, MAX_PORT5, g[5]);
    12ae:	82 e0       	ldi	r24, 0x02	; 2
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	65 e0       	ldi	r22, 0x05	; 5
    12b4:	4c 89       	ldd	r20, Y+20	; 0x14
    12b6:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(1, MAX_PORT2, g[6]);
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	62 e0       	ldi	r22, 0x02	; 2
    12c0:	4d 89       	ldd	r20, Y+21	; 0x15
    12c2:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(2, MAX_PORT8, g[7]);
    12c6:	82 e0       	ldi	r24, 0x02	; 2
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	68 e0       	ldi	r22, 0x08	; 8
    12cc:	4e 89       	ldd	r20, Y+22	; 0x16
    12ce:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(4, MAX_PORT7, g[8]);
    12d2:	84 e0       	ldi	r24, 0x04	; 4
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	67 e0       	ldi	r22, 0x07	; 7
    12d8:	4f 89       	ldd	r20, Y+23	; 0x17
    12da:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(3, MAX_PORT2, g[9]);
    12de:	83 e0       	ldi	r24, 0x03	; 3
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	62 e0       	ldi	r22, 0x02	; 2
    12e4:	48 8d       	ldd	r20, Y+24	; 0x18
    12e6:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(3, MAX_PORT5, g[10]);
    12ea:	83 e0       	ldi	r24, 0x03	; 3
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	65 e0       	ldi	r22, 0x05	; 5
    12f0:	49 8d       	ldd	r20, Y+25	; 0x19
    12f2:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(4, MAX_PORT4, g[11]);
    12f6:	84 e0       	ldi	r24, 0x04	; 4
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	64 e0       	ldi	r22, 0x04	; 4
    12fc:	4a 8d       	ldd	r20, Y+26	; 0x1a
    12fe:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(3, MAX_PORT8, g[12]);
    1302:	83 e0       	ldi	r24, 0x03	; 3
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	68 e0       	ldi	r22, 0x08	; 8
    1308:	4b 8d       	ldd	r20, Y+27	; 0x1b
    130a:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(4, MAX_PORT1, 255);
    130e:	84 e0       	ldi	r24, 0x04	; 4
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	61 e0       	ldi	r22, 0x01	; 1
    1314:	4f ef       	ldi	r20, 0xFF	; 255
    1316:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>

			//Update all Blue LED ports
			SPIwrite(0, MAX_PORT0, b[0]);
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1322:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(0, MAX_PORT5, b[1]);
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	65 e0       	ldi	r22, 0x05	; 5
    132c:	4e 8d       	ldd	r20, Y+30	; 0x1e
    132e:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(2, MAX_PORT0, b[2]);
    1332:	82 e0       	ldi	r24, 0x02	; 2
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	4f 8d       	ldd	r20, Y+31	; 0x1f
    133a:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(0, MAX_PORT8, b[3]);
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	68 e0       	ldi	r22, 0x08	; 8
    1344:	48 a1       	ldd	r20, Y+32	; 0x20
    1346:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(0, MAX_PORT3, b[4]);
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	63 e0       	ldi	r22, 0x03	; 3
    1350:	49 a1       	ldd	r20, Y+33	; 0x21
    1352:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(1, MAX_PORT9, b[5]);
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	69 e0       	ldi	r22, 0x09	; 9
    135c:	4a a1       	ldd	r20, Y+34	; 0x22
    135e:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(2, MAX_PORT4, b[6]);
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	64 e0       	ldi	r22, 0x04	; 4
    1368:	4b a1       	ldd	r20, Y+35	; 0x23
    136a:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(2, MAX_PORT7, b[7]);
    136e:	82 e0       	ldi	r24, 0x02	; 2
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	67 e0       	ldi	r22, 0x07	; 7
    1374:	4c a1       	ldd	r20, Y+36	; 0x24
    1376:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(1, MAX_PORT4, b[8]);
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	64 e0       	ldi	r22, 0x04	; 4
    1380:	4d a1       	ldd	r20, Y+37	; 0x25
    1382:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(3, MAX_PORT3, b[9]);
    1386:	83 e0       	ldi	r24, 0x03	; 3
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	63 e0       	ldi	r22, 0x03	; 3
    138c:	4e a1       	ldd	r20, Y+38	; 0x26
    138e:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(4, MAX_PORT9, b[10]);
    1392:	84 e0       	ldi	r24, 0x04	; 4
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	69 e0       	ldi	r22, 0x09	; 9
    1398:	4f a1       	ldd	r20, Y+39	; 0x27
    139a:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(3, MAX_PORT0, b[11]);
    139e:	83 e0       	ldi	r24, 0x03	; 3
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	48 a5       	ldd	r20, Y+40	; 0x28
    13a6:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(3, MAX_PORT7, b[12]);
    13aa:	83 e0       	ldi	r24, 0x03	; 3
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	67 e0       	ldi	r22, 0x07	; 7
    13b0:	49 a5       	ldd	r20, Y+41	; 0x29
    13b2:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
			SPIwrite(4, MAX_PORT2, 255);
    13b6:	84 e0       	ldi	r24, 0x04	; 4
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	62 e0       	ldi	r22, 0x02	; 2
    13bc:	4f ef       	ldi	r20, 0xFF	; 255
    13be:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
    13c2:	10 c0       	rjmp	.+32     	; 0x13e4 <__stack+0x2e5>
			//turn the other "half" of the canvas off
			for(int k = 0; k < 5; k++)
			begin
				for(int j = 0; j < 10; j++)
				begin
					SPIwrite(k, j, 255);
    13c4:	c8 01       	movw	r24, r16
    13c6:	6e 2d       	mov	r22, r14
    13c8:	4f ef       	ldi	r20, 0xFF	; 255
    13ca:	0e 94 0e 08 	call	0x101c	; 0x101c <SPIwrite>
    13ce:	e3 94       	inc	r14
		begin

			//turn the other "half" of the canvas off
			for(int k = 0; k < 5; k++)
			begin
				for(int j = 0; j < 10; j++)
    13d0:	8a e0       	ldi	r24, 0x0A	; 10
    13d2:	e8 16       	cp	r14, r24
    13d4:	b9 f7       	brne	.-18     	; 0x13c4 <__stack+0x2c5>

		else
		begin

			//turn the other "half" of the canvas off
			for(int k = 0; k < 5; k++)
    13d6:	0f 5f       	subi	r16, 0xFF	; 255
    13d8:	1f 4f       	sbci	r17, 0xFF	; 255
    13da:	05 30       	cpi	r16, 0x05	; 5
    13dc:	11 05       	cpc	r17, r1
    13de:	11 f0       	breq	.+4      	; 0x13e4 <__stack+0x2e5>
    13e0:	ee 24       	eor	r14, r14
    13e2:	f0 cf       	rjmp	.-32     	; 0x13c4 <__stack+0x2c5>
					SPIwrite(k, j, 255);
				end
			end
		end
		
		if(ledPos < 179)
    13e4:	80 91 11 0c 	lds	r24, 0x0C11
    13e8:	90 91 12 0c 	lds	r25, 0x0C12
    13ec:	83 3b       	cpi	r24, 0xB3	; 179
    13ee:	91 05       	cpc	r25, r1
    13f0:	4c f4       	brge	.+18     	; 0x1404 <__stack+0x305>
			ledPos++;
    13f2:	80 91 11 0c 	lds	r24, 0x0C11
    13f6:	90 91 12 0c 	lds	r25, 0x0C12
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	90 93 12 0c 	sts	0x0C12, r25
    1400:	80 93 11 0c 	sts	0x0C11, r24

		if(rpm != 0)
    1404:	a0 90 0a 0c 	lds	r10, 0x0C0A
    1408:	b0 90 0b 0c 	lds	r11, 0x0C0B
    140c:	c0 90 0c 0c 	lds	r12, 0x0C0C
    1410:	d0 90 0d 0c 	lds	r13, 0x0C0D
    1414:	c6 01       	movw	r24, r12
    1416:	b5 01       	movw	r22, r10
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e0       	ldi	r20, 0x00	; 0
    141e:	50 e0       	ldi	r21, 0x00	; 0
    1420:	0e 94 28 10 	call	0x2050	; 0x2050 <__nesf2>
    1424:	88 23       	and	r24, r24
    1426:	09 f4       	brne	.+2      	; 0x142a <__stack+0x32b>
    1428:	40 c0       	rjmp	.+128    	; 0x14aa <__stack+0x3ab>
    142a:	e0 90 84 00 	lds	r14, 0x0084
    142e:	f0 90 85 00 	lds	r15, 0x0085
		begin
			spr = (1.0/rpm)/180.0;
			//update release and deadline based on calculated rpm
			rel = trtCurrentTime() + SECONDS2TICKS(.3*spr);
    1432:	00 e0       	ldi	r16, 0x00	; 0
    1434:	10 e0       	ldi	r17, 0x00	; 0
    1436:	80 91 5a 0c 	lds	r24, 0x0C5A
    143a:	90 91 5b 0c 	lds	r25, 0x0C5B
    143e:	a0 91 5c 0c 	lds	r26, 0x0C5C
    1442:	b0 91 5d 0c 	lds	r27, 0x0C5D
    1446:	dc 01       	movw	r26, r24
    1448:	99 27       	eor	r25, r25
    144a:	88 27       	eor	r24, r24
    144c:	e8 0e       	add	r14, r24
    144e:	f9 1e       	adc	r15, r25
    1450:	0a 1f       	adc	r16, r26
    1452:	1b 1f       	adc	r17, r27
    1454:	60 e0       	ldi	r22, 0x00	; 0
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	80 e8       	ldi	r24, 0x80	; 128
    145a:	9f e3       	ldi	r25, 0x3F	; 63
    145c:	a6 01       	movw	r20, r12
    145e:	95 01       	movw	r18, r10
    1460:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__divsf3>
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	44 e3       	ldi	r20, 0x34	; 52
    146a:	53 e4       	ldi	r21, 0x43	; 67
    146c:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__divsf3>
    1470:	2a e9       	ldi	r18, 0x9A	; 154
    1472:	39 e9       	ldi	r19, 0x99	; 153
    1474:	49 e9       	ldi	r20, 0x99	; 153
    1476:	5e e3       	ldi	r21, 0x3E	; 62
    1478:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	34 e2       	ldi	r19, 0x24	; 36
    1480:	44 e7       	ldi	r20, 0x74	; 116
    1482:	5b e4       	ldi	r21, 0x4B	; 75
    1484:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e8       	ldi	r20, 0x80	; 128
    148e:	5a e3       	ldi	r21, 0x3A	; 58
    1490:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
    1494:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
    1498:	ab 01       	movw	r20, r22
    149a:	bc 01       	movw	r22, r24
    149c:	4e 0d       	add	r20, r14
    149e:	5f 1d       	adc	r21, r15
    14a0:	60 1f       	adc	r22, r16
    14a2:	71 1f       	adc	r23, r17
    14a4:	8a 01       	movw	r16, r20
    14a6:	9b 01       	movw	r18, r22
    14a8:	29 c0       	rjmp	.+82     	; 0x14fc <__stack+0x3fd>
    14aa:	80 91 5a 0c 	lds	r24, 0x0C5A
    14ae:	90 91 5b 0c 	lds	r25, 0x0C5B
    14b2:	a0 91 5c 0c 	lds	r26, 0x0C5C
    14b6:	b0 91 5d 0c 	lds	r27, 0x0C5D
    14ba:	dc 01       	movw	r26, r24
    14bc:	99 27       	eor	r25, r25
    14be:	88 27       	eor	r24, r24
    14c0:	20 91 84 00 	lds	r18, 0x0084
    14c4:	30 91 85 00 	lds	r19, 0x0085
		else
		begin
		
			spr = 0;
			//update release and deadline
			rel = trtCurrentTime() + SECONDS2TICKS(.01);
    14c8:	a9 01       	movw	r20, r18
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	48 0f       	add	r20, r24
    14d0:	59 1f       	adc	r21, r25
    14d2:	6a 1f       	adc	r22, r26
    14d4:	7b 1f       	adc	r23, r27
    14d6:	44 56       	subi	r20, 0x64	; 100
    14d8:	5f 4f       	sbci	r21, 0xFF	; 255
    14da:	6f 4f       	sbci	r22, 0xFF	; 255
    14dc:	7f 4f       	sbci	r23, 0xFF	; 255
    14de:	20 91 84 00 	lds	r18, 0x0084
    14e2:	30 91 85 00 	lds	r19, 0x0085
			dead = trtCurrentTime() + SECONDS2TICKS(.015);
    14e6:	89 01       	movw	r16, r18
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	08 0f       	add	r16, r24
    14ee:	19 1f       	adc	r17, r25
    14f0:	2a 1f       	adc	r18, r26
    14f2:	3b 1f       	adc	r19, r27
    14f4:	06 51       	subi	r16, 0x16	; 22
    14f6:	1f 4f       	sbci	r17, 0xFF	; 255
    14f8:	2f 4f       	sbci	r18, 0xFF	; 255
    14fa:	3f 4f       	sbci	r19, 0xFF	; 255
		end
		trtSleepUntil(rel, dead);
    14fc:	cb 01       	movw	r24, r22
    14fe:	ba 01       	movw	r22, r20
    1500:	a9 01       	movw	r20, r18
    1502:	98 01       	movw	r18, r16
    1504:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <trtSleepUntil>
    1508:	00 ce       	rjmp	.-1024   	; 0x110a <__stack+0xb>

0000150a <initLCD>:
//***************************************************************
// --- Initialize LCD ----------------------------------
void initLCD(void)
begin
	//initialize LCD
	LCDinit();	//initialize the display
    150a:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <LCDinit>
	LCDcursorOFF();
    150e:	0e 94 44 0c 	call	0x1888	; 0x1888 <LCDcursorOFF>
	LCDclr();				//clear the display
    1512:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCDclr>
	LCDGotoXY(0,0);
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCDGotoXY>
end
    151e:	08 95       	ret

00001520 <main>:
end

//***************************************************************
// --- Main Program ----------------------------------
int main(void) 
begin
    1520:	cf 92       	push	r12
    1522:	df 92       	push	r13
    1524:	ef 92       	push	r14
    1526:	ff 92       	push	r15
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
//***************************************************************
// --- Initialize Timer for INT0 ----------------------------------
void initTimers(void) 
begin
	//set up INT0
	EIMSK = 1<<INT0 ; // turn on int0
    152c:	91 e0       	ldi	r25, 0x01	; 1
    152e:	9d bb       	out	0x1d, r25	; 29
	EICRA = 3 ;       // rising edge
    1530:	83 e0       	ldi	r24, 0x03	; 3
    1532:	80 93 69 00 	sts	0x0069, r24
	// turn on timer 2 to be read in int0 ISR	
	TCCR2B = 7 ; // divide by 1024
    1536:	87 e0       	ldi	r24, 0x07	; 7
    1538:	80 93 b1 00 	sts	0x00B1, r24
	// turn on timer 2 overflow ISR for double precision time
	TIMSK2 = 1 ;
    153c:	90 93 70 00 	sts	0x0070, r25
//***************************************************************
// --- Main Program ----------------------------------
int main(void) 
begin
	initTimers();
	initUART();
    1540:	0e 94 df 07 	call	0xfbe	; 0xfbe <initUART>
	//initLCD();
	// LED Port
	DDRD = 0x00;
    1544:	1a b8       	out	0x0a, r1	; 10
	SPIinitialize(); 
    1546:	0e 94 28 08 	call	0x1050	; 0x1050 <SPIinitialize>
	//init rand number generator
	srand(1234);
    154a:	82 ed       	ldi	r24, 0xD2	; 210
    154c:	94 e0       	ldi	r25, 0x04	; 4
    154e:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <srand>
	led = 0;
    1552:	10 92 f5 0b 	sts	0x0BF5, r1
    1556:	10 92 f4 0b 	sts	0x0BF4, r1
	
	//initialize led matrix
	state = WAIT_SYNC;
    155a:	10 92 f3 0b 	sts	0x0BF3, r1
    155e:	10 92 f2 0b 	sts	0x0BF2, r1
	next_state = WAIT_SYNC;
    1562:	10 92 f0 0b 	sts	0x0BF0, r1
    1566:	10 92 ef 0b 	sts	0x0BEF, r1
	ledPos = 0;
    156a:	10 92 12 0c 	sts	0x0C12, r1
    156e:	10 92 11 0c 	sts	0x0C11, r1
	matSize = 90;
    1572:	8a e5       	ldi	r24, 0x5A	; 90
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	90 93 14 0c 	sts	0x0C14, r25
    157a:	80 93 13 0c 	sts	0x0C13, r24
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
	for(int k = 0; k < 14; k++)
	begin
		for(int j = 0; j < matSize; j++)
		begin
			testMat[k][j] = (uint16_t)0xffff;
    1582:	aa e5       	ldi	r26, 0x5A	; 90
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	6f ef       	ldi	r22, 0xFF	; 255
    1588:	7f ef       	ldi	r23, 0xFF	; 255
    158a:	12 c0       	rjmp	.+36     	; 0x15b0 <main+0x90>
    158c:	fa 01       	movw	r30, r20
    158e:	e8 0f       	add	r30, r24
    1590:	f9 1f       	adc	r31, r25
    1592:	ee 0f       	add	r30, r30
    1594:	ff 1f       	adc	r31, r31
    1596:	eb 5e       	subi	r30, 0xEB	; 235
    1598:	fd 4f       	sbci	r31, 0xFD	; 253
    159a:	71 83       	std	Z+1, r23	; 0x01
    159c:	60 83       	st	Z, r22
	next_state = WAIT_SYNC;
	ledPos = 0;
	matSize = 90;
	for(int k = 0; k < 14; k++)
	begin
		for(int j = 0; j < matSize; j++)
    159e:	01 96       	adiw	r24, 0x01	; 1
    15a0:	8a 35       	cpi	r24, 0x5A	; 90
    15a2:	91 05       	cpc	r25, r1
    15a4:	99 f7       	brne	.-26     	; 0x158c <main+0x6c>
	//initialize led matrix
	state = WAIT_SYNC;
	next_state = WAIT_SYNC;
	ledPos = 0;
	matSize = 90;
	for(int k = 0; k < 14; k++)
    15a6:	2f 5f       	subi	r18, 0xFF	; 255
    15a8:	3f 4f       	sbci	r19, 0xFF	; 255
    15aa:	2e 30       	cpi	r18, 0x0E	; 14
    15ac:	31 05       	cpc	r19, r1
    15ae:	51 f0       	breq	.+20     	; 0x15c4 <main+0xa4>
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
	begin
		for(int j = 0; j < matSize; j++)
		begin
			testMat[k][j] = (uint16_t)0xffff;
    15b4:	2a 9f       	mul	r18, r26
    15b6:	a0 01       	movw	r20, r0
    15b8:	2b 9f       	mul	r18, r27
    15ba:	50 0d       	add	r21, r0
    15bc:	3a 9f       	mul	r19, r26
    15be:	50 0d       	add	r21, r0
    15c0:	11 24       	eor	r1, r1
    15c2:	e4 cf       	rjmp	.-56     	; 0x158c <main+0x6c>
		end
	end
	
	//initialize for animation
	runAnimations = 0;	
    15c4:	10 92 ee 0b 	sts	0x0BEE, r1
    15c8:	10 92 ed 0b 	sts	0x0BED, r1
	moveTime = 10;
    15cc:	8a e0       	ldi	r24, 0x0A	; 10
    15ce:	80 93 62 0c 	sts	0x0C62, r24

	//initialize motor period calculation
	motor_period = 0;
    15d2:	10 92 66 0c 	sts	0x0C66, r1
    15d6:	10 92 65 0c 	sts	0x0C65, r1
	motor_period_ovlf = 0;
    15da:	10 92 16 0c 	sts	0x0C16, r1
    15de:	10 92 15 0c 	sts	0x0C15, r1

  // start TRT
  trtInitKernel(300); // 80 bytes for the idle task stack
    15e2:	8c e2       	ldi	r24, 0x2C	; 44
    15e4:	91 e0       	ldi	r25, 0x01	; 1
    15e6:	0e 94 ba 01 	call	0x374	; 0x374 <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    15ea:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	80 93 54 0c 	sts	0x0C54, r24
  
  sei(); // set enabled interrupts;
    15f2:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    15f4:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    15f6:	10 92 55 0c 	sts	0x0C55, r1
  
  sei(); // set enabled interrupts;
    15fa:	78 94       	sei
  // message protection
  trtCreateSemaphore(SEM_TX_WAIT, 1) ; // message send interlock
  trtCreateSemaphore(SEM_RX_WAIT, 0) ; // message receive interlock

 // --- creat tasks  ----------------
  trtCreateTask(task1, 200, SECONDS2TICKS(0.8), SECONDS2TICKS(0.13), &(args[0]));
    15fc:	8b e0       	ldi	r24, 0x0B	; 11
    15fe:	95 e0       	ldi	r25, 0x05	; 5
    1600:	68 ec       	ldi	r22, 0xC8	; 200
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	24 ed       	ldi	r18, 0xD4	; 212
    1606:	30 e3       	ldi	r19, 0x30	; 48
    1608:	40 e0       	ldi	r20, 0x00	; 0
    160a:	50 e0       	ldi	r21, 0x00	; 0
    160c:	ef ee       	ldi	r30, 0xEF	; 239
    160e:	ee 2e       	mov	r14, r30
    1610:	e7 e0       	ldi	r30, 0x07	; 7
    1612:	fe 2e       	mov	r15, r30
    1614:	01 2d       	mov	r16, r1
    1616:	11 2d       	mov	r17, r1
    1618:	bc e0       	ldi	r27, 0x0C	; 12
    161a:	cb 2e       	mov	r12, r27
    161c:	b2 e0       	ldi	r27, 0x02	; 2
    161e:	db 2e       	mov	r13, r27
    1620:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <trtCreateTask>
  trtCreateTask(task3, 200, SECONDS2TICKS(0.5), SECONDS2TICKS(0.1), &(args[1]));
    1624:	8a e5       	ldi	r24, 0x5A	; 90
    1626:	98 e0       	ldi	r25, 0x08	; 8
    1628:	68 ec       	ldi	r22, 0xC8	; 200
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	24 e8       	ldi	r18, 0x84	; 132
    162e:	3e e1       	ldi	r19, 0x1E	; 30
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	aa e1       	ldi	r26, 0x1A	; 26
    1636:	ea 2e       	mov	r14, r26
    1638:	a6 e0       	ldi	r26, 0x06	; 6
    163a:	fa 2e       	mov	r15, r26
    163c:	01 2d       	mov	r16, r1
    163e:	11 2d       	mov	r17, r1
    1640:	fe e0       	ldi	r31, 0x0E	; 14
    1642:	cf 2e       	mov	r12, r31
    1644:	f2 e0       	ldi	r31, 0x02	; 2
    1646:	df 2e       	mov	r13, r31
    1648:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <trtCreateTask>
  trtCreateTask(task4, 200, SECONDS2TICKS(0.1), SECONDS2TICKS(0.15), &(args[1]));
    164c:	86 e7       	ldi	r24, 0x76	; 118
    164e:	95 e0       	ldi	r25, 0x05	; 5
    1650:	68 ec       	ldi	r22, 0xC8	; 200
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	2a e1       	ldi	r18, 0x1A	; 26
    1656:	36 e0       	ldi	r19, 0x06	; 6
    1658:	40 e0       	ldi	r20, 0x00	; 0
    165a:	50 e0       	ldi	r21, 0x00	; 0
    165c:	e7 e2       	ldi	r30, 0x27	; 39
    165e:	ee 2e       	mov	r14, r30
    1660:	e9 e0       	ldi	r30, 0x09	; 9
    1662:	fe 2e       	mov	r15, r30
    1664:	01 2d       	mov	r16, r1
    1666:	11 2d       	mov	r17, r1
    1668:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <trtCreateTask>
    166c:	ff cf       	rjmp	.-2      	; 0x166c <main+0x14c>

0000166e <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
    166e:	28 2f       	mov	r18, r24
    1670:	20 7f       	andi	r18, 0xF0	; 240
    1672:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
    1674:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    1676:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1678:	20 ea       	ldi	r18, 0xA0	; 160
    167a:	3f e0       	ldi	r19, 0x0F	; 15
    167c:	f9 01       	movw	r30, r18
    167e:	31 97       	sbiw	r30, 0x01	; 1
    1680:	f1 f7       	brne	.-4      	; 0x167e <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
    1682:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    1684:	40 98       	cbi	0x08, 0	; 8
    1686:	f9 01       	movw	r30, r18
    1688:	31 97       	sbiw	r30, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	44 e0       	ldi	r20, 0x04	; 4
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	4a 95       	dec	r20
    1696:	e1 f7       	brne	.-8      	; 0x1690 <LCDsendChar+0x22>
    1698:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
    169a:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    169c:	42 9a       	sbi	0x08, 2	; 8
    169e:	c9 01       	movw	r24, r18
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
    16a4:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    16a6:	40 98       	cbi	0x08, 0	; 8
    16a8:	c9 01       	movw	r24, r18
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
    16ae:	08 95       	ret

000016b0 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
    16b0:	28 2f       	mov	r18, r24
    16b2:	20 7f       	andi	r18, 0xF0	; 240
    16b4:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
    16b6:	42 9a       	sbi	0x08, 2	; 8
    16b8:	20 ea       	ldi	r18, 0xA0	; 160
    16ba:	3f e0       	ldi	r19, 0x0F	; 15
    16bc:	f9 01       	movw	r30, r18
    16be:	31 97       	sbiw	r30, 0x01	; 1
    16c0:	f1 f7       	brne	.-4      	; 0x16be <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    16c2:	42 98       	cbi	0x08, 2	; 8
    16c4:	f9 01       	movw	r30, r18
    16c6:	31 97       	sbiw	r30, 0x01	; 1
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	54 e0       	ldi	r21, 0x04	; 4
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	5a 95       	dec	r21
    16d4:	e1 f7       	brne	.-8      	; 0x16ce <LCDsendCommand+0x1e>
    16d6:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
    16d8:	42 9a       	sbi	0x08, 2	; 8
    16da:	c9 01       	movw	r24, r18
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	f1 f7       	brne	.-4      	; 0x16dc <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    16e0:	42 98       	cbi	0x08, 2	; 8
    16e2:	c9 01       	movw	r24, r18
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
    16e8:	08 95       	ret

000016ea <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCDsendCommand>
}
    16f0:	08 95       	ret

000016f2 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
    16f2:	82 e0       	ldi	r24, 0x02	; 2
    16f4:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCDsendCommand>
}
    16f8:	08 95       	ret

000016fa <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	49 f0       	breq	.+18     	; 0x171a <LCDstring+0x20>
    1708:	ec 01       	movw	r28, r24
    170a:	10 e0       	ldi	r17, 0x00	; 0
    170c:	04 c0       	rjmp	.+8      	; 0x1716 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    170e:	89 91       	ld	r24, Y+
    1710:	0e 94 37 0b 	call	0x166e	; 0x166e <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    1714:	1f 5f       	subi	r17, 0xFF	; 255
    1716:	10 17       	cp	r17, r16
    1718:	d0 f3       	brcs	.-12     	; 0x170e <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	1f 91       	pop	r17
    1720:	0f 91       	pop	r16
    1722:	08 95       	ret

00001724 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    1724:	62 30       	cpi	r22, 0x02	; 2
    1726:	31 f0       	breq	.+12     	; 0x1734 <LCDGotoXY+0x10>
    1728:	63 30       	cpi	r22, 0x03	; 3
    172a:	31 f0       	breq	.+12     	; 0x1738 <LCDGotoXY+0x14>
    172c:	61 30       	cpi	r22, 0x01	; 1
    172e:	29 f4       	brne	.+10     	; 0x173a <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    1730:	80 5c       	subi	r24, 0xC0	; 192
    1732:	03 c0       	rjmp	.+6      	; 0x173a <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    1734:	8c 5e       	subi	r24, 0xEC	; 236
    1736:	01 c0       	rjmp	.+2      	; 0x173a <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    1738:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    173a:	80 68       	ori	r24, 0x80	; 128
    173c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCDsendCommand>
	
}
    1740:	08 95       	ret

00001742 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    1742:	1f 93       	push	r17
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	ec 01       	movw	r28, r24
    174a:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    174c:	64 2f       	mov	r22, r20
    174e:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCDGotoXY>
    1752:	10 e0       	ldi	r17, 0x00	; 0
    1754:	03 c0       	rjmp	.+6      	; 0x175c <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    1756:	0e 94 37 0b 	call	0x166e	; 0x166e <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    175a:	1f 5f       	subi	r17, 0xFF	; 255
    175c:	fe 01       	movw	r30, r28
    175e:	e1 0f       	add	r30, r17
    1760:	f1 1d       	adc	r31, r1
    1762:	84 91       	lpm	r24, Z+
    1764:	88 23       	and	r24, r24
    1766:	b9 f7       	brne	.-18     	; 0x1756 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	1f 91       	pop	r17
    176e:	08 95       	ret

00001770 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    1770:	ef 92       	push	r14
    1772:	ff 92       	push	r15
    1774:	0f 93       	push	r16
    1776:	1f 93       	push	r17
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	7c 01       	movw	r14, r24
    177e:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    1780:	11 0f       	add	r17, r17
    1782:	11 0f       	add	r17, r17
    1784:	11 0f       	add	r17, r17
    1786:	10 64       	ori	r17, 0x40	; 64
    1788:	c0 e0       	ldi	r28, 0x00	; 0
    178a:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    178c:	f7 01       	movw	r30, r14
    178e:	ec 0f       	add	r30, r28
    1790:	fd 1f       	adc	r31, r29
    1792:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    1794:	81 2f       	mov	r24, r17
    1796:	8c 0f       	add	r24, r28
    1798:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCDsendCommand>
		LCDsendChar(pcc);
    179c:	80 2f       	mov	r24, r16
    179e:	0e 94 37 0b 	call	0x166e	; 0x166e <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    17a2:	21 96       	adiw	r28, 0x01	; 1
    17a4:	c8 30       	cpi	r28, 0x08	; 8
    17a6:	d1 05       	cpc	r29, r1
    17a8:	89 f7       	brne	.-30     	; 0x178c <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	ff 90       	pop	r15
    17b4:	ef 90       	pop	r14
    17b6:	08 95       	ret

000017b8 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    17b8:	1f 93       	push	r17
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	80 e6       	ldi	r24, 0x60	; 96
    17c0:	9a ee       	ldi	r25, 0xEA	; 234
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    17c6:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    17c8:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    17ca:	87 b1       	in	r24, 0x07	; 7
    17cc:	80 6f       	ori	r24, 0xF0	; 240
    17ce:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    17d0:	87 b1       	in	r24, 0x07	; 7
    17d2:	87 60       	ori	r24, 0x07	; 7
    17d4:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    17d6:	80 e3       	ldi	r24, 0x30	; 48
    17d8:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    17da:	42 9a       	sbi	0x08, 2	; 8
    17dc:	20 ea       	ldi	r18, 0xA0	; 160
    17de:	3f e0       	ldi	r19, 0x0F	; 15
    17e0:	f9 01       	movw	r30, r18
    17e2:	31 97       	sbiw	r30, 0x01	; 1
    17e4:	f1 f7       	brne	.-4      	; 0x17e2 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    17e6:	42 98       	cbi	0x08, 2	; 8
    17e8:	f9 01       	movw	r30, r18
    17ea:	31 97       	sbiw	r30, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    17ee:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    17f0:	42 9a       	sbi	0x08, 2	; 8
    17f2:	c9 01       	movw	r24, r18
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	f1 f7       	brne	.-4      	; 0x17f4 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    17f8:	42 98       	cbi	0x08, 2	; 8
    17fa:	c9 01       	movw	r24, r18
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	f1 f7       	brne	.-4      	; 0x17fc <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    1800:	80 e2       	ldi	r24, 0x20	; 32
    1802:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1804:	42 9a       	sbi	0x08, 2	; 8
    1806:	c9 01       	movw	r24, r18
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    180c:	42 98       	cbi	0x08, 2	; 8
    180e:	c9 01       	movw	r24, r18
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	f1 f7       	brne	.-4      	; 0x1810 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    1814:	88 e2       	ldi	r24, 0x28	; 40
    1816:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    181a:	8c e0       	ldi	r24, 0x0C	; 12
    181c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCDsendCommand>
    1820:	c6 e7       	ldi	r28, 0x76	; 118
    1822:	d0 e0       	ldi	r29, 0x00	; 0
    1824:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1826:	16 2f       	mov	r17, r22
    1828:	1f 5f       	subi	r17, 0xFF	; 255
    182a:	ce 01       	movw	r24, r28
    182c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCDdefinechar>
    1830:	28 96       	adiw	r28, 0x08	; 8
    1832:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    1834:	18 30       	cpi	r17, 0x08	; 8
    1836:	b9 f7       	brne	.-18     	; 0x1826 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	1f 91       	pop	r17
    183e:	08 95       	ret

00001840 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	08 2f       	mov	r16, r24
    1846:	10 e0       	ldi	r17, 0x00	; 0
    1848:	04 c0       	rjmp	.+8      	; 0x1852 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    184a:	8e e1       	ldi	r24, 0x1E	; 30
    184c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    1850:	1f 5f       	subi	r17, 0xFF	; 255
    1852:	10 17       	cp	r17, r16
    1854:	d0 f3       	brcs	.-12     	; 0x184a <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	08 95       	ret

0000185c <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    185c:	0f 93       	push	r16
    185e:	1f 93       	push	r17
    1860:	08 2f       	mov	r16, r24
    1862:	10 e0       	ldi	r17, 0x00	; 0
    1864:	04 c0       	rjmp	.+8      	; 0x186e <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    1866:	88 e1       	ldi	r24, 0x18	; 24
    1868:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    186c:	1f 5f       	subi	r17, 0xFF	; 255
    186e:	10 17       	cp	r17, r16
    1870:	d0 f3       	brcs	.-12     	; 0x1866 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    1872:	1f 91       	pop	r17
    1874:	0f 91       	pop	r16
    1876:	08 95       	ret

00001878 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    1878:	8e e0       	ldi	r24, 0x0E	; 14
    187a:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCDsendCommand>
}
    187e:	08 95       	ret

00001880 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    1880:	8f e0       	ldi	r24, 0x0F	; 15
    1882:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCDsendCommand>
}
    1886:	08 95       	ret

00001888 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    1888:	8c e0       	ldi	r24, 0x0C	; 12
    188a:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCDsendCommand>
}
    188e:	08 95       	ret

00001890 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    1890:	88 e0       	ldi	r24, 0x08	; 8
    1892:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCDsendCommand>
}
    1896:	08 95       	ret

00001898 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    1898:	8c e0       	ldi	r24, 0x0C	; 12
    189a:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCDsendCommand>
}
    189e:	08 95       	ret

000018a0 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    18a0:	0f 93       	push	r16
    18a2:	1f 93       	push	r17
    18a4:	08 2f       	mov	r16, r24
    18a6:	10 e0       	ldi	r17, 0x00	; 0
    18a8:	04 c0       	rjmp	.+8      	; 0x18b2 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    18aa:	80 e1       	ldi	r24, 0x10	; 16
    18ac:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    18b0:	1f 5f       	subi	r17, 0xFF	; 255
    18b2:	10 17       	cp	r17, r16
    18b4:	d0 f3       	brcs	.-12     	; 0x18aa <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    18b6:	1f 91       	pop	r17
    18b8:	0f 91       	pop	r16
    18ba:	08 95       	ret

000018bc <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    18bc:	0f 93       	push	r16
    18be:	1f 93       	push	r17
    18c0:	08 2f       	mov	r16, r24
    18c2:	10 e0       	ldi	r17, 0x00	; 0
    18c4:	04 c0       	rjmp	.+8      	; 0x18ce <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    18c6:	84 e1       	ldi	r24, 0x14	; 20
    18c8:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    18cc:	1f 5f       	subi	r17, 0xFF	; 255
    18ce:	10 17       	cp	r17, r16
    18d0:	d0 f3       	brcs	.-12     	; 0x18c6 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    18d2:	1f 91       	pop	r17
    18d4:	0f 91       	pop	r16
    18d6:	08 95       	ret

000018d8 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    18d8:	df 92       	push	r13
    18da:	ef 92       	push	r14
    18dc:	ff 92       	push	r15
    18de:	0f 93       	push	r16
    18e0:	1f 93       	push	r17
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    18e8:	96 e0       	ldi	r25, 0x06	; 6
    18ea:	89 9f       	mul	r24, r25
    18ec:	c0 01       	movw	r24, r0
    18ee:	11 24       	eor	r1, r1
    18f0:	24 2f       	mov	r18, r20
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	ac 01       	movw	r20, r24
    18f6:	42 9f       	mul	r20, r18
    18f8:	c0 01       	movw	r24, r0
    18fa:	43 9f       	mul	r20, r19
    18fc:	90 0d       	add	r25, r0
    18fe:	52 9f       	mul	r21, r18
    1900:	90 0d       	add	r25, r0
    1902:	11 24       	eor	r1, r1
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	0e 94 43 13 	call	0x2686	; 0x2686 <__divmodhi4>
    190a:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    190c:	cb 01       	movw	r24, r22
    190e:	66 e0       	ldi	r22, 0x06	; 6
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	0e 94 2f 13 	call	0x265e	; 0x265e <__udivmodhi4>
    1916:	e8 2e       	mov	r14, r24
    1918:	ff 24       	eor	r15, r15
    191a:	00 e0       	ldi	r16, 0x00	; 0
    191c:	10 e0       	ldi	r17, 0x00	; 0
    191e:	12 c0       	rjmp	.+36     	; 0x1944 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    1920:	c8 01       	movw	r24, r16
    1922:	05 96       	adiw	r24, 0x05	; 5
    1924:	c8 17       	cp	r28, r24
    1926:	d9 07       	cpc	r29, r25
    1928:	10 f0       	brcs	.+4      	; 0x192e <LCDprogressBar+0x56>
    192a:	85 e0       	ldi	r24, 0x05	; 5
    192c:	06 c0       	rjmp	.+12     	; 0x193a <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    192e:	c0 17       	cp	r28, r16
    1930:	d1 07       	cpc	r29, r17
    1932:	10 f0       	brcs	.+4      	; 0x1938 <LCDprogressBar+0x60>
    1934:	8e 2d       	mov	r24, r14
    1936:	01 c0       	rjmp	.+2      	; 0x193a <LCDprogressBar+0x62>
    1938:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    193a:	0e 94 37 0b 	call	0x166e	; 0x166e <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    193e:	f3 94       	inc	r15
    1940:	0a 5f       	subi	r16, 0xFA	; 250
    1942:	1f 4f       	sbci	r17, 0xFF	; 255
    1944:	fd 14       	cp	r15, r13
    1946:	60 f3       	brcs	.-40     	; 0x1920 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	1f 91       	pop	r17
    194e:	0f 91       	pop	r16
    1950:	ff 90       	pop	r15
    1952:	ef 90       	pop	r14
    1954:	df 90       	pop	r13
    1956:	08 95       	ret

00001958 <__fixunssfsi>:
    1958:	ef 92       	push	r14
    195a:	ff 92       	push	r15
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	7b 01       	movw	r14, r22
    1962:	8c 01       	movw	r16, r24
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	40 e0       	ldi	r20, 0x00	; 0
    196a:	5f e4       	ldi	r21, 0x4F	; 79
    196c:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__gesf2>
    1970:	88 23       	and	r24, r24
    1972:	8c f0       	brlt	.+34     	; 0x1996 <__fixunssfsi+0x3e>
    1974:	c8 01       	movw	r24, r16
    1976:	b7 01       	movw	r22, r14
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	5f e4       	ldi	r21, 0x4F	; 79
    1980:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__subsf3>
    1984:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__fixsfsi>
    1988:	9b 01       	movw	r18, r22
    198a:	ac 01       	movw	r20, r24
    198c:	20 50       	subi	r18, 0x00	; 0
    198e:	30 40       	sbci	r19, 0x00	; 0
    1990:	40 40       	sbci	r20, 0x00	; 0
    1992:	50 48       	sbci	r21, 0x80	; 128
    1994:	06 c0       	rjmp	.+12     	; 0x19a2 <__fixunssfsi+0x4a>
    1996:	c8 01       	movw	r24, r16
    1998:	b7 01       	movw	r22, r14
    199a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__fixsfsi>
    199e:	9b 01       	movw	r18, r22
    19a0:	ac 01       	movw	r20, r24
    19a2:	b9 01       	movw	r22, r18
    19a4:	ca 01       	movw	r24, r20
    19a6:	1f 91       	pop	r17
    19a8:	0f 91       	pop	r16
    19aa:	ff 90       	pop	r15
    19ac:	ef 90       	pop	r14
    19ae:	08 95       	ret

000019b0 <_fpadd_parts>:
    19b0:	a0 e0       	ldi	r26, 0x00	; 0
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	ee ed       	ldi	r30, 0xDE	; 222
    19b6:	fc e0       	ldi	r31, 0x0C	; 12
    19b8:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <__prologue_saves__>
    19bc:	dc 01       	movw	r26, r24
    19be:	2b 01       	movw	r4, r22
    19c0:	fa 01       	movw	r30, r20
    19c2:	9c 91       	ld	r25, X
    19c4:	92 30       	cpi	r25, 0x02	; 2
    19c6:	08 f4       	brcc	.+2      	; 0x19ca <_fpadd_parts+0x1a>
    19c8:	39 c1       	rjmp	.+626    	; 0x1c3c <_fpadd_parts+0x28c>
    19ca:	eb 01       	movw	r28, r22
    19cc:	88 81       	ld	r24, Y
    19ce:	82 30       	cpi	r24, 0x02	; 2
    19d0:	08 f4       	brcc	.+2      	; 0x19d4 <_fpadd_parts+0x24>
    19d2:	33 c1       	rjmp	.+614    	; 0x1c3a <_fpadd_parts+0x28a>
    19d4:	94 30       	cpi	r25, 0x04	; 4
    19d6:	69 f4       	brne	.+26     	; 0x19f2 <_fpadd_parts+0x42>
    19d8:	84 30       	cpi	r24, 0x04	; 4
    19da:	09 f0       	breq	.+2      	; 0x19de <_fpadd_parts+0x2e>
    19dc:	2f c1       	rjmp	.+606    	; 0x1c3c <_fpadd_parts+0x28c>
    19de:	11 96       	adiw	r26, 0x01	; 1
    19e0:	9c 91       	ld	r25, X
    19e2:	11 97       	sbiw	r26, 0x01	; 1
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	98 17       	cp	r25, r24
    19e8:	09 f4       	brne	.+2      	; 0x19ec <_fpadd_parts+0x3c>
    19ea:	28 c1       	rjmp	.+592    	; 0x1c3c <_fpadd_parts+0x28c>
    19ec:	a0 e0       	ldi	r26, 0x00	; 0
    19ee:	b1 e0       	ldi	r27, 0x01	; 1
    19f0:	25 c1       	rjmp	.+586    	; 0x1c3c <_fpadd_parts+0x28c>
    19f2:	84 30       	cpi	r24, 0x04	; 4
    19f4:	09 f4       	brne	.+2      	; 0x19f8 <_fpadd_parts+0x48>
    19f6:	21 c1       	rjmp	.+578    	; 0x1c3a <_fpadd_parts+0x28a>
    19f8:	82 30       	cpi	r24, 0x02	; 2
    19fa:	a9 f4       	brne	.+42     	; 0x1a26 <_fpadd_parts+0x76>
    19fc:	92 30       	cpi	r25, 0x02	; 2
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <_fpadd_parts+0x52>
    1a00:	1d c1       	rjmp	.+570    	; 0x1c3c <_fpadd_parts+0x28c>
    1a02:	9a 01       	movw	r18, r20
    1a04:	ad 01       	movw	r20, r26
    1a06:	88 e0       	ldi	r24, 0x08	; 8
    1a08:	ea 01       	movw	r28, r20
    1a0a:	09 90       	ld	r0, Y+
    1a0c:	ae 01       	movw	r20, r28
    1a0e:	e9 01       	movw	r28, r18
    1a10:	09 92       	st	Y+, r0
    1a12:	9e 01       	movw	r18, r28
    1a14:	81 50       	subi	r24, 0x01	; 1
    1a16:	c1 f7       	brne	.-16     	; 0x1a08 <_fpadd_parts+0x58>
    1a18:	e2 01       	movw	r28, r4
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	11 96       	adiw	r26, 0x01	; 1
    1a1e:	9c 91       	ld	r25, X
    1a20:	89 23       	and	r24, r25
    1a22:	81 83       	std	Z+1, r24	; 0x01
    1a24:	08 c1       	rjmp	.+528    	; 0x1c36 <_fpadd_parts+0x286>
    1a26:	92 30       	cpi	r25, 0x02	; 2
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <_fpadd_parts+0x7c>
    1a2a:	07 c1       	rjmp	.+526    	; 0x1c3a <_fpadd_parts+0x28a>
    1a2c:	12 96       	adiw	r26, 0x02	; 2
    1a2e:	2d 90       	ld	r2, X+
    1a30:	3c 90       	ld	r3, X
    1a32:	13 97       	sbiw	r26, 0x03	; 3
    1a34:	eb 01       	movw	r28, r22
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	9b 81       	ldd	r25, Y+3	; 0x03
    1a3a:	14 96       	adiw	r26, 0x04	; 4
    1a3c:	ad 90       	ld	r10, X+
    1a3e:	bd 90       	ld	r11, X+
    1a40:	cd 90       	ld	r12, X+
    1a42:	dc 90       	ld	r13, X
    1a44:	17 97       	sbiw	r26, 0x07	; 7
    1a46:	ec 80       	ldd	r14, Y+4	; 0x04
    1a48:	fd 80       	ldd	r15, Y+5	; 0x05
    1a4a:	0e 81       	ldd	r16, Y+6	; 0x06
    1a4c:	1f 81       	ldd	r17, Y+7	; 0x07
    1a4e:	91 01       	movw	r18, r2
    1a50:	28 1b       	sub	r18, r24
    1a52:	39 0b       	sbc	r19, r25
    1a54:	b9 01       	movw	r22, r18
    1a56:	37 ff       	sbrs	r19, 7
    1a58:	04 c0       	rjmp	.+8      	; 0x1a62 <_fpadd_parts+0xb2>
    1a5a:	66 27       	eor	r22, r22
    1a5c:	77 27       	eor	r23, r23
    1a5e:	62 1b       	sub	r22, r18
    1a60:	73 0b       	sbc	r23, r19
    1a62:	60 32       	cpi	r22, 0x20	; 32
    1a64:	71 05       	cpc	r23, r1
    1a66:	0c f0       	brlt	.+2      	; 0x1a6a <_fpadd_parts+0xba>
    1a68:	61 c0       	rjmp	.+194    	; 0x1b2c <_fpadd_parts+0x17c>
    1a6a:	12 16       	cp	r1, r18
    1a6c:	13 06       	cpc	r1, r19
    1a6e:	6c f5       	brge	.+90     	; 0x1aca <_fpadd_parts+0x11a>
    1a70:	37 01       	movw	r6, r14
    1a72:	48 01       	movw	r8, r16
    1a74:	06 2e       	mov	r0, r22
    1a76:	04 c0       	rjmp	.+8      	; 0x1a80 <_fpadd_parts+0xd0>
    1a78:	96 94       	lsr	r9
    1a7a:	87 94       	ror	r8
    1a7c:	77 94       	ror	r7
    1a7e:	67 94       	ror	r6
    1a80:	0a 94       	dec	r0
    1a82:	d2 f7       	brpl	.-12     	; 0x1a78 <_fpadd_parts+0xc8>
    1a84:	21 e0       	ldi	r18, 0x01	; 1
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e0       	ldi	r20, 0x00	; 0
    1a8a:	50 e0       	ldi	r21, 0x00	; 0
    1a8c:	04 c0       	rjmp	.+8      	; 0x1a96 <_fpadd_parts+0xe6>
    1a8e:	22 0f       	add	r18, r18
    1a90:	33 1f       	adc	r19, r19
    1a92:	44 1f       	adc	r20, r20
    1a94:	55 1f       	adc	r21, r21
    1a96:	6a 95       	dec	r22
    1a98:	d2 f7       	brpl	.-12     	; 0x1a8e <_fpadd_parts+0xde>
    1a9a:	21 50       	subi	r18, 0x01	; 1
    1a9c:	30 40       	sbci	r19, 0x00	; 0
    1a9e:	40 40       	sbci	r20, 0x00	; 0
    1aa0:	50 40       	sbci	r21, 0x00	; 0
    1aa2:	2e 21       	and	r18, r14
    1aa4:	3f 21       	and	r19, r15
    1aa6:	40 23       	and	r20, r16
    1aa8:	51 23       	and	r21, r17
    1aaa:	21 15       	cp	r18, r1
    1aac:	31 05       	cpc	r19, r1
    1aae:	41 05       	cpc	r20, r1
    1ab0:	51 05       	cpc	r21, r1
    1ab2:	21 f0       	breq	.+8      	; 0x1abc <_fpadd_parts+0x10c>
    1ab4:	21 e0       	ldi	r18, 0x01	; 1
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	50 e0       	ldi	r21, 0x00	; 0
    1abc:	79 01       	movw	r14, r18
    1abe:	8a 01       	movw	r16, r20
    1ac0:	e6 28       	or	r14, r6
    1ac2:	f7 28       	or	r15, r7
    1ac4:	08 29       	or	r16, r8
    1ac6:	19 29       	or	r17, r9
    1ac8:	3c c0       	rjmp	.+120    	; 0x1b42 <_fpadd_parts+0x192>
    1aca:	23 2b       	or	r18, r19
    1acc:	d1 f1       	breq	.+116    	; 0x1b42 <_fpadd_parts+0x192>
    1ace:	26 0e       	add	r2, r22
    1ad0:	37 1e       	adc	r3, r23
    1ad2:	35 01       	movw	r6, r10
    1ad4:	46 01       	movw	r8, r12
    1ad6:	06 2e       	mov	r0, r22
    1ad8:	04 c0       	rjmp	.+8      	; 0x1ae2 <_fpadd_parts+0x132>
    1ada:	96 94       	lsr	r9
    1adc:	87 94       	ror	r8
    1ade:	77 94       	ror	r7
    1ae0:	67 94       	ror	r6
    1ae2:	0a 94       	dec	r0
    1ae4:	d2 f7       	brpl	.-12     	; 0x1ada <_fpadd_parts+0x12a>
    1ae6:	21 e0       	ldi	r18, 0x01	; 1
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	04 c0       	rjmp	.+8      	; 0x1af8 <_fpadd_parts+0x148>
    1af0:	22 0f       	add	r18, r18
    1af2:	33 1f       	adc	r19, r19
    1af4:	44 1f       	adc	r20, r20
    1af6:	55 1f       	adc	r21, r21
    1af8:	6a 95       	dec	r22
    1afa:	d2 f7       	brpl	.-12     	; 0x1af0 <_fpadd_parts+0x140>
    1afc:	21 50       	subi	r18, 0x01	; 1
    1afe:	30 40       	sbci	r19, 0x00	; 0
    1b00:	40 40       	sbci	r20, 0x00	; 0
    1b02:	50 40       	sbci	r21, 0x00	; 0
    1b04:	2a 21       	and	r18, r10
    1b06:	3b 21       	and	r19, r11
    1b08:	4c 21       	and	r20, r12
    1b0a:	5d 21       	and	r21, r13
    1b0c:	21 15       	cp	r18, r1
    1b0e:	31 05       	cpc	r19, r1
    1b10:	41 05       	cpc	r20, r1
    1b12:	51 05       	cpc	r21, r1
    1b14:	21 f0       	breq	.+8      	; 0x1b1e <_fpadd_parts+0x16e>
    1b16:	21 e0       	ldi	r18, 0x01	; 1
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e0       	ldi	r20, 0x00	; 0
    1b1c:	50 e0       	ldi	r21, 0x00	; 0
    1b1e:	59 01       	movw	r10, r18
    1b20:	6a 01       	movw	r12, r20
    1b22:	a6 28       	or	r10, r6
    1b24:	b7 28       	or	r11, r7
    1b26:	c8 28       	or	r12, r8
    1b28:	d9 28       	or	r13, r9
    1b2a:	0b c0       	rjmp	.+22     	; 0x1b42 <_fpadd_parts+0x192>
    1b2c:	82 15       	cp	r24, r2
    1b2e:	93 05       	cpc	r25, r3
    1b30:	2c f0       	brlt	.+10     	; 0x1b3c <_fpadd_parts+0x18c>
    1b32:	1c 01       	movw	r2, r24
    1b34:	aa 24       	eor	r10, r10
    1b36:	bb 24       	eor	r11, r11
    1b38:	65 01       	movw	r12, r10
    1b3a:	03 c0       	rjmp	.+6      	; 0x1b42 <_fpadd_parts+0x192>
    1b3c:	ee 24       	eor	r14, r14
    1b3e:	ff 24       	eor	r15, r15
    1b40:	87 01       	movw	r16, r14
    1b42:	11 96       	adiw	r26, 0x01	; 1
    1b44:	9c 91       	ld	r25, X
    1b46:	d2 01       	movw	r26, r4
    1b48:	11 96       	adiw	r26, 0x01	; 1
    1b4a:	8c 91       	ld	r24, X
    1b4c:	98 17       	cp	r25, r24
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <_fpadd_parts+0x1a2>
    1b50:	45 c0       	rjmp	.+138    	; 0x1bdc <_fpadd_parts+0x22c>
    1b52:	99 23       	and	r25, r25
    1b54:	39 f0       	breq	.+14     	; 0x1b64 <_fpadd_parts+0x1b4>
    1b56:	a8 01       	movw	r20, r16
    1b58:	97 01       	movw	r18, r14
    1b5a:	2a 19       	sub	r18, r10
    1b5c:	3b 09       	sbc	r19, r11
    1b5e:	4c 09       	sbc	r20, r12
    1b60:	5d 09       	sbc	r21, r13
    1b62:	06 c0       	rjmp	.+12     	; 0x1b70 <_fpadd_parts+0x1c0>
    1b64:	a6 01       	movw	r20, r12
    1b66:	95 01       	movw	r18, r10
    1b68:	2e 19       	sub	r18, r14
    1b6a:	3f 09       	sbc	r19, r15
    1b6c:	40 0b       	sbc	r20, r16
    1b6e:	51 0b       	sbc	r21, r17
    1b70:	57 fd       	sbrc	r21, 7
    1b72:	08 c0       	rjmp	.+16     	; 0x1b84 <_fpadd_parts+0x1d4>
    1b74:	11 82       	std	Z+1, r1	; 0x01
    1b76:	33 82       	std	Z+3, r3	; 0x03
    1b78:	22 82       	std	Z+2, r2	; 0x02
    1b7a:	24 83       	std	Z+4, r18	; 0x04
    1b7c:	35 83       	std	Z+5, r19	; 0x05
    1b7e:	46 83       	std	Z+6, r20	; 0x06
    1b80:	57 83       	std	Z+7, r21	; 0x07
    1b82:	1d c0       	rjmp	.+58     	; 0x1bbe <_fpadd_parts+0x20e>
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	81 83       	std	Z+1, r24	; 0x01
    1b88:	33 82       	std	Z+3, r3	; 0x03
    1b8a:	22 82       	std	Z+2, r2	; 0x02
    1b8c:	88 27       	eor	r24, r24
    1b8e:	99 27       	eor	r25, r25
    1b90:	dc 01       	movw	r26, r24
    1b92:	82 1b       	sub	r24, r18
    1b94:	93 0b       	sbc	r25, r19
    1b96:	a4 0b       	sbc	r26, r20
    1b98:	b5 0b       	sbc	r27, r21
    1b9a:	84 83       	std	Z+4, r24	; 0x04
    1b9c:	95 83       	std	Z+5, r25	; 0x05
    1b9e:	a6 83       	std	Z+6, r26	; 0x06
    1ba0:	b7 83       	std	Z+7, r27	; 0x07
    1ba2:	0d c0       	rjmp	.+26     	; 0x1bbe <_fpadd_parts+0x20e>
    1ba4:	22 0f       	add	r18, r18
    1ba6:	33 1f       	adc	r19, r19
    1ba8:	44 1f       	adc	r20, r20
    1baa:	55 1f       	adc	r21, r21
    1bac:	24 83       	std	Z+4, r18	; 0x04
    1bae:	35 83       	std	Z+5, r19	; 0x05
    1bb0:	46 83       	std	Z+6, r20	; 0x06
    1bb2:	57 83       	std	Z+7, r21	; 0x07
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	93 83       	std	Z+3, r25	; 0x03
    1bbc:	82 83       	std	Z+2, r24	; 0x02
    1bbe:	24 81       	ldd	r18, Z+4	; 0x04
    1bc0:	35 81       	ldd	r19, Z+5	; 0x05
    1bc2:	46 81       	ldd	r20, Z+6	; 0x06
    1bc4:	57 81       	ldd	r21, Z+7	; 0x07
    1bc6:	da 01       	movw	r26, r20
    1bc8:	c9 01       	movw	r24, r18
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	a1 09       	sbc	r26, r1
    1bce:	b1 09       	sbc	r27, r1
    1bd0:	8f 5f       	subi	r24, 0xFF	; 255
    1bd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd4:	af 4f       	sbci	r26, 0xFF	; 255
    1bd6:	bf 43       	sbci	r27, 0x3F	; 63
    1bd8:	28 f3       	brcs	.-54     	; 0x1ba4 <_fpadd_parts+0x1f4>
    1bda:	0b c0       	rjmp	.+22     	; 0x1bf2 <_fpadd_parts+0x242>
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	33 82       	std	Z+3, r3	; 0x03
    1be0:	22 82       	std	Z+2, r2	; 0x02
    1be2:	ea 0c       	add	r14, r10
    1be4:	fb 1c       	adc	r15, r11
    1be6:	0c 1d       	adc	r16, r12
    1be8:	1d 1d       	adc	r17, r13
    1bea:	e4 82       	std	Z+4, r14	; 0x04
    1bec:	f5 82       	std	Z+5, r15	; 0x05
    1bee:	06 83       	std	Z+6, r16	; 0x06
    1bf0:	17 83       	std	Z+7, r17	; 0x07
    1bf2:	83 e0       	ldi	r24, 0x03	; 3
    1bf4:	80 83       	st	Z, r24
    1bf6:	24 81       	ldd	r18, Z+4	; 0x04
    1bf8:	35 81       	ldd	r19, Z+5	; 0x05
    1bfa:	46 81       	ldd	r20, Z+6	; 0x06
    1bfc:	57 81       	ldd	r21, Z+7	; 0x07
    1bfe:	57 ff       	sbrs	r21, 7
    1c00:	1a c0       	rjmp	.+52     	; 0x1c36 <_fpadd_parts+0x286>
    1c02:	c9 01       	movw	r24, r18
    1c04:	aa 27       	eor	r26, r26
    1c06:	97 fd       	sbrc	r25, 7
    1c08:	a0 95       	com	r26
    1c0a:	ba 2f       	mov	r27, r26
    1c0c:	81 70       	andi	r24, 0x01	; 1
    1c0e:	90 70       	andi	r25, 0x00	; 0
    1c10:	a0 70       	andi	r26, 0x00	; 0
    1c12:	b0 70       	andi	r27, 0x00	; 0
    1c14:	56 95       	lsr	r21
    1c16:	47 95       	ror	r20
    1c18:	37 95       	ror	r19
    1c1a:	27 95       	ror	r18
    1c1c:	82 2b       	or	r24, r18
    1c1e:	93 2b       	or	r25, r19
    1c20:	a4 2b       	or	r26, r20
    1c22:	b5 2b       	or	r27, r21
    1c24:	84 83       	std	Z+4, r24	; 0x04
    1c26:	95 83       	std	Z+5, r25	; 0x05
    1c28:	a6 83       	std	Z+6, r26	; 0x06
    1c2a:	b7 83       	std	Z+7, r27	; 0x07
    1c2c:	82 81       	ldd	r24, Z+2	; 0x02
    1c2e:	93 81       	ldd	r25, Z+3	; 0x03
    1c30:	01 96       	adiw	r24, 0x01	; 1
    1c32:	93 83       	std	Z+3, r25	; 0x03
    1c34:	82 83       	std	Z+2, r24	; 0x02
    1c36:	df 01       	movw	r26, r30
    1c38:	01 c0       	rjmp	.+2      	; 0x1c3c <_fpadd_parts+0x28c>
    1c3a:	d2 01       	movw	r26, r4
    1c3c:	cd 01       	movw	r24, r26
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	e2 e1       	ldi	r30, 0x12	; 18
    1c44:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__epilogue_restores__>

00001c48 <__subsf3>:
    1c48:	a0 e2       	ldi	r26, 0x20	; 32
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	ea e2       	ldi	r30, 0x2A	; 42
    1c4e:	fe e0       	ldi	r31, 0x0E	; 14
    1c50:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__prologue_saves__+0x18>
    1c54:	69 83       	std	Y+1, r22	; 0x01
    1c56:	7a 83       	std	Y+2, r23	; 0x02
    1c58:	8b 83       	std	Y+3, r24	; 0x03
    1c5a:	9c 83       	std	Y+4, r25	; 0x04
    1c5c:	2d 83       	std	Y+5, r18	; 0x05
    1c5e:	3e 83       	std	Y+6, r19	; 0x06
    1c60:	4f 83       	std	Y+7, r20	; 0x07
    1c62:	58 87       	std	Y+8, r21	; 0x08
    1c64:	e9 e0       	ldi	r30, 0x09	; 9
    1c66:	ee 2e       	mov	r14, r30
    1c68:	f1 2c       	mov	r15, r1
    1c6a:	ec 0e       	add	r14, r28
    1c6c:	fd 1e       	adc	r15, r29
    1c6e:	ce 01       	movw	r24, r28
    1c70:	01 96       	adiw	r24, 0x01	; 1
    1c72:	b7 01       	movw	r22, r14
    1c74:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__unpack_f>
    1c78:	8e 01       	movw	r16, r28
    1c7a:	0f 5e       	subi	r16, 0xEF	; 239
    1c7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7e:	ce 01       	movw	r24, r28
    1c80:	05 96       	adiw	r24, 0x05	; 5
    1c82:	b8 01       	movw	r22, r16
    1c84:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__unpack_f>
    1c88:	8a 89       	ldd	r24, Y+18	; 0x12
    1c8a:	91 e0       	ldi	r25, 0x01	; 1
    1c8c:	89 27       	eor	r24, r25
    1c8e:	8a 8b       	std	Y+18, r24	; 0x12
    1c90:	c7 01       	movw	r24, r14
    1c92:	b8 01       	movw	r22, r16
    1c94:	ae 01       	movw	r20, r28
    1c96:	47 5e       	subi	r20, 0xE7	; 231
    1c98:	5f 4f       	sbci	r21, 0xFF	; 255
    1c9a:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <_fpadd_parts>
    1c9e:	0e 94 89 11 	call	0x2312	; 0x2312 <__pack_f>
    1ca2:	a0 96       	adiw	r28, 0x20	; 32
    1ca4:	e6 e0       	ldi	r30, 0x06	; 6
    1ca6:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__epilogue_restores__+0x18>

00001caa <__addsf3>:
    1caa:	a0 e2       	ldi	r26, 0x20	; 32
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	eb e5       	ldi	r30, 0x5B	; 91
    1cb0:	fe e0       	ldi	r31, 0x0E	; 14
    1cb2:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__prologue_saves__+0x18>
    1cb6:	69 83       	std	Y+1, r22	; 0x01
    1cb8:	7a 83       	std	Y+2, r23	; 0x02
    1cba:	8b 83       	std	Y+3, r24	; 0x03
    1cbc:	9c 83       	std	Y+4, r25	; 0x04
    1cbe:	2d 83       	std	Y+5, r18	; 0x05
    1cc0:	3e 83       	std	Y+6, r19	; 0x06
    1cc2:	4f 83       	std	Y+7, r20	; 0x07
    1cc4:	58 87       	std	Y+8, r21	; 0x08
    1cc6:	f9 e0       	ldi	r31, 0x09	; 9
    1cc8:	ef 2e       	mov	r14, r31
    1cca:	f1 2c       	mov	r15, r1
    1ccc:	ec 0e       	add	r14, r28
    1cce:	fd 1e       	adc	r15, r29
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	01 96       	adiw	r24, 0x01	; 1
    1cd4:	b7 01       	movw	r22, r14
    1cd6:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__unpack_f>
    1cda:	8e 01       	movw	r16, r28
    1cdc:	0f 5e       	subi	r16, 0xEF	; 239
    1cde:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	05 96       	adiw	r24, 0x05	; 5
    1ce4:	b8 01       	movw	r22, r16
    1ce6:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__unpack_f>
    1cea:	c7 01       	movw	r24, r14
    1cec:	b8 01       	movw	r22, r16
    1cee:	ae 01       	movw	r20, r28
    1cf0:	47 5e       	subi	r20, 0xE7	; 231
    1cf2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf4:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <_fpadd_parts>
    1cf8:	0e 94 89 11 	call	0x2312	; 0x2312 <__pack_f>
    1cfc:	a0 96       	adiw	r28, 0x20	; 32
    1cfe:	e6 e0       	ldi	r30, 0x06	; 6
    1d00:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__epilogue_restores__+0x18>

00001d04 <__mulsf3>:
    1d04:	a0 e2       	ldi	r26, 0x20	; 32
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e8 e8       	ldi	r30, 0x88	; 136
    1d0a:	fe e0       	ldi	r31, 0x0E	; 14
    1d0c:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <__prologue_saves__>
    1d10:	69 83       	std	Y+1, r22	; 0x01
    1d12:	7a 83       	std	Y+2, r23	; 0x02
    1d14:	8b 83       	std	Y+3, r24	; 0x03
    1d16:	9c 83       	std	Y+4, r25	; 0x04
    1d18:	2d 83       	std	Y+5, r18	; 0x05
    1d1a:	3e 83       	std	Y+6, r19	; 0x06
    1d1c:	4f 83       	std	Y+7, r20	; 0x07
    1d1e:	58 87       	std	Y+8, r21	; 0x08
    1d20:	ce 01       	movw	r24, r28
    1d22:	01 96       	adiw	r24, 0x01	; 1
    1d24:	be 01       	movw	r22, r28
    1d26:	67 5f       	subi	r22, 0xF7	; 247
    1d28:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2a:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__unpack_f>
    1d2e:	ce 01       	movw	r24, r28
    1d30:	05 96       	adiw	r24, 0x05	; 5
    1d32:	be 01       	movw	r22, r28
    1d34:	6f 5e       	subi	r22, 0xEF	; 239
    1d36:	7f 4f       	sbci	r23, 0xFF	; 255
    1d38:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__unpack_f>
    1d3c:	99 85       	ldd	r25, Y+9	; 0x09
    1d3e:	92 30       	cpi	r25, 0x02	; 2
    1d40:	88 f0       	brcs	.+34     	; 0x1d64 <__mulsf3+0x60>
    1d42:	89 89       	ldd	r24, Y+17	; 0x11
    1d44:	82 30       	cpi	r24, 0x02	; 2
    1d46:	c8 f0       	brcs	.+50     	; 0x1d7a <__mulsf3+0x76>
    1d48:	94 30       	cpi	r25, 0x04	; 4
    1d4a:	19 f4       	brne	.+6      	; 0x1d52 <__mulsf3+0x4e>
    1d4c:	82 30       	cpi	r24, 0x02	; 2
    1d4e:	51 f4       	brne	.+20     	; 0x1d64 <__mulsf3+0x60>
    1d50:	04 c0       	rjmp	.+8      	; 0x1d5a <__mulsf3+0x56>
    1d52:	84 30       	cpi	r24, 0x04	; 4
    1d54:	29 f4       	brne	.+10     	; 0x1d60 <__mulsf3+0x5c>
    1d56:	92 30       	cpi	r25, 0x02	; 2
    1d58:	81 f4       	brne	.+32     	; 0x1d7a <__mulsf3+0x76>
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	91 e0       	ldi	r25, 0x01	; 1
    1d5e:	c6 c0       	rjmp	.+396    	; 0x1eec <__mulsf3+0x1e8>
    1d60:	92 30       	cpi	r25, 0x02	; 2
    1d62:	49 f4       	brne	.+18     	; 0x1d76 <__mulsf3+0x72>
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d68:	8a 89       	ldd	r24, Y+18	; 0x12
    1d6a:	98 13       	cpse	r25, r24
    1d6c:	21 e0       	ldi	r18, 0x01	; 1
    1d6e:	2a 87       	std	Y+10, r18	; 0x0a
    1d70:	ce 01       	movw	r24, r28
    1d72:	09 96       	adiw	r24, 0x09	; 9
    1d74:	bb c0       	rjmp	.+374    	; 0x1eec <__mulsf3+0x1e8>
    1d76:	82 30       	cpi	r24, 0x02	; 2
    1d78:	49 f4       	brne	.+18     	; 0x1d8c <__mulsf3+0x88>
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7e:	8a 89       	ldd	r24, Y+18	; 0x12
    1d80:	98 13       	cpse	r25, r24
    1d82:	21 e0       	ldi	r18, 0x01	; 1
    1d84:	2a 8b       	std	Y+18, r18	; 0x12
    1d86:	ce 01       	movw	r24, r28
    1d88:	41 96       	adiw	r24, 0x11	; 17
    1d8a:	b0 c0       	rjmp	.+352    	; 0x1eec <__mulsf3+0x1e8>
    1d8c:	2d 84       	ldd	r2, Y+13	; 0x0d
    1d8e:	3e 84       	ldd	r3, Y+14	; 0x0e
    1d90:	4f 84       	ldd	r4, Y+15	; 0x0f
    1d92:	58 88       	ldd	r5, Y+16	; 0x10
    1d94:	6d 88       	ldd	r6, Y+21	; 0x15
    1d96:	7e 88       	ldd	r7, Y+22	; 0x16
    1d98:	8f 88       	ldd	r8, Y+23	; 0x17
    1d9a:	98 8c       	ldd	r9, Y+24	; 0x18
    1d9c:	ee 24       	eor	r14, r14
    1d9e:	ff 24       	eor	r15, r15
    1da0:	87 01       	movw	r16, r14
    1da2:	aa 24       	eor	r10, r10
    1da4:	bb 24       	eor	r11, r11
    1da6:	65 01       	movw	r12, r10
    1da8:	40 e0       	ldi	r20, 0x00	; 0
    1daa:	50 e0       	ldi	r21, 0x00	; 0
    1dac:	60 e0       	ldi	r22, 0x00	; 0
    1dae:	70 e0       	ldi	r23, 0x00	; 0
    1db0:	e0 e0       	ldi	r30, 0x00	; 0
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	c1 01       	movw	r24, r2
    1db6:	81 70       	andi	r24, 0x01	; 1
    1db8:	90 70       	andi	r25, 0x00	; 0
    1dba:	89 2b       	or	r24, r25
    1dbc:	e9 f0       	breq	.+58     	; 0x1df8 <__mulsf3+0xf4>
    1dbe:	e6 0c       	add	r14, r6
    1dc0:	f7 1c       	adc	r15, r7
    1dc2:	08 1d       	adc	r16, r8
    1dc4:	19 1d       	adc	r17, r9
    1dc6:	9a 01       	movw	r18, r20
    1dc8:	ab 01       	movw	r20, r22
    1dca:	2a 0d       	add	r18, r10
    1dcc:	3b 1d       	adc	r19, r11
    1dce:	4c 1d       	adc	r20, r12
    1dd0:	5d 1d       	adc	r21, r13
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	a0 e0       	ldi	r26, 0x00	; 0
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e6 14       	cp	r14, r6
    1ddc:	f7 04       	cpc	r15, r7
    1dde:	08 05       	cpc	r16, r8
    1de0:	19 05       	cpc	r17, r9
    1de2:	20 f4       	brcc	.+8      	; 0x1dec <__mulsf3+0xe8>
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	a0 e0       	ldi	r26, 0x00	; 0
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	ba 01       	movw	r22, r20
    1dee:	a9 01       	movw	r20, r18
    1df0:	48 0f       	add	r20, r24
    1df2:	59 1f       	adc	r21, r25
    1df4:	6a 1f       	adc	r22, r26
    1df6:	7b 1f       	adc	r23, r27
    1df8:	aa 0c       	add	r10, r10
    1dfa:	bb 1c       	adc	r11, r11
    1dfc:	cc 1c       	adc	r12, r12
    1dfe:	dd 1c       	adc	r13, r13
    1e00:	97 fe       	sbrs	r9, 7
    1e02:	08 c0       	rjmp	.+16     	; 0x1e14 <__mulsf3+0x110>
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	a0 e0       	ldi	r26, 0x00	; 0
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	a8 2a       	or	r10, r24
    1e0e:	b9 2a       	or	r11, r25
    1e10:	ca 2a       	or	r12, r26
    1e12:	db 2a       	or	r13, r27
    1e14:	31 96       	adiw	r30, 0x01	; 1
    1e16:	e0 32       	cpi	r30, 0x20	; 32
    1e18:	f1 05       	cpc	r31, r1
    1e1a:	49 f0       	breq	.+18     	; 0x1e2e <__mulsf3+0x12a>
    1e1c:	66 0c       	add	r6, r6
    1e1e:	77 1c       	adc	r7, r7
    1e20:	88 1c       	adc	r8, r8
    1e22:	99 1c       	adc	r9, r9
    1e24:	56 94       	lsr	r5
    1e26:	47 94       	ror	r4
    1e28:	37 94       	ror	r3
    1e2a:	27 94       	ror	r2
    1e2c:	c3 cf       	rjmp	.-122    	; 0x1db4 <__mulsf3+0xb0>
    1e2e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1e30:	ea 89       	ldd	r30, Y+18	; 0x12
    1e32:	2b 89       	ldd	r18, Y+19	; 0x13
    1e34:	3c 89       	ldd	r19, Y+20	; 0x14
    1e36:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e38:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e3a:	28 0f       	add	r18, r24
    1e3c:	39 1f       	adc	r19, r25
    1e3e:	2e 5f       	subi	r18, 0xFE	; 254
    1e40:	3f 4f       	sbci	r19, 0xFF	; 255
    1e42:	17 c0       	rjmp	.+46     	; 0x1e72 <__mulsf3+0x16e>
    1e44:	ca 01       	movw	r24, r20
    1e46:	81 70       	andi	r24, 0x01	; 1
    1e48:	90 70       	andi	r25, 0x00	; 0
    1e4a:	89 2b       	or	r24, r25
    1e4c:	61 f0       	breq	.+24     	; 0x1e66 <__mulsf3+0x162>
    1e4e:	16 95       	lsr	r17
    1e50:	07 95       	ror	r16
    1e52:	f7 94       	ror	r15
    1e54:	e7 94       	ror	r14
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	a0 e0       	ldi	r26, 0x00	; 0
    1e5c:	b0 e8       	ldi	r27, 0x80	; 128
    1e5e:	e8 2a       	or	r14, r24
    1e60:	f9 2a       	or	r15, r25
    1e62:	0a 2b       	or	r16, r26
    1e64:	1b 2b       	or	r17, r27
    1e66:	76 95       	lsr	r23
    1e68:	67 95       	ror	r22
    1e6a:	57 95       	ror	r21
    1e6c:	47 95       	ror	r20
    1e6e:	2f 5f       	subi	r18, 0xFF	; 255
    1e70:	3f 4f       	sbci	r19, 0xFF	; 255
    1e72:	77 fd       	sbrc	r23, 7
    1e74:	e7 cf       	rjmp	.-50     	; 0x1e44 <__mulsf3+0x140>
    1e76:	0c c0       	rjmp	.+24     	; 0x1e90 <__mulsf3+0x18c>
    1e78:	44 0f       	add	r20, r20
    1e7a:	55 1f       	adc	r21, r21
    1e7c:	66 1f       	adc	r22, r22
    1e7e:	77 1f       	adc	r23, r23
    1e80:	17 fd       	sbrc	r17, 7
    1e82:	41 60       	ori	r20, 0x01	; 1
    1e84:	ee 0c       	add	r14, r14
    1e86:	ff 1c       	adc	r15, r15
    1e88:	00 1f       	adc	r16, r16
    1e8a:	11 1f       	adc	r17, r17
    1e8c:	21 50       	subi	r18, 0x01	; 1
    1e8e:	30 40       	sbci	r19, 0x00	; 0
    1e90:	40 30       	cpi	r20, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	59 07       	cpc	r21, r25
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	69 07       	cpc	r22, r25
    1e9a:	90 e4       	ldi	r25, 0x40	; 64
    1e9c:	79 07       	cpc	r23, r25
    1e9e:	60 f3       	brcs	.-40     	; 0x1e78 <__mulsf3+0x174>
    1ea0:	2b 8f       	std	Y+27, r18	; 0x1b
    1ea2:	3c 8f       	std	Y+28, r19	; 0x1c
    1ea4:	db 01       	movw	r26, r22
    1ea6:	ca 01       	movw	r24, r20
    1ea8:	8f 77       	andi	r24, 0x7F	; 127
    1eaa:	90 70       	andi	r25, 0x00	; 0
    1eac:	a0 70       	andi	r26, 0x00	; 0
    1eae:	b0 70       	andi	r27, 0x00	; 0
    1eb0:	80 34       	cpi	r24, 0x40	; 64
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	a1 05       	cpc	r26, r1
    1eb6:	b1 05       	cpc	r27, r1
    1eb8:	61 f4       	brne	.+24     	; 0x1ed2 <__mulsf3+0x1ce>
    1eba:	47 fd       	sbrc	r20, 7
    1ebc:	0a c0       	rjmp	.+20     	; 0x1ed2 <__mulsf3+0x1ce>
    1ebe:	e1 14       	cp	r14, r1
    1ec0:	f1 04       	cpc	r15, r1
    1ec2:	01 05       	cpc	r16, r1
    1ec4:	11 05       	cpc	r17, r1
    1ec6:	29 f0       	breq	.+10     	; 0x1ed2 <__mulsf3+0x1ce>
    1ec8:	40 5c       	subi	r20, 0xC0	; 192
    1eca:	5f 4f       	sbci	r21, 0xFF	; 255
    1ecc:	6f 4f       	sbci	r22, 0xFF	; 255
    1ece:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed0:	40 78       	andi	r20, 0x80	; 128
    1ed2:	1a 8e       	std	Y+26, r1	; 0x1a
    1ed4:	fe 17       	cp	r31, r30
    1ed6:	11 f0       	breq	.+4      	; 0x1edc <__mulsf3+0x1d8>
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	8a 8f       	std	Y+26, r24	; 0x1a
    1edc:	4d 8f       	std	Y+29, r20	; 0x1d
    1ede:	5e 8f       	std	Y+30, r21	; 0x1e
    1ee0:	6f 8f       	std	Y+31, r22	; 0x1f
    1ee2:	78 a3       	std	Y+32, r23	; 0x20
    1ee4:	83 e0       	ldi	r24, 0x03	; 3
    1ee6:	89 8f       	std	Y+25, r24	; 0x19
    1ee8:	ce 01       	movw	r24, r28
    1eea:	49 96       	adiw	r24, 0x19	; 25
    1eec:	0e 94 89 11 	call	0x2312	; 0x2312 <__pack_f>
    1ef0:	a0 96       	adiw	r28, 0x20	; 32
    1ef2:	e2 e1       	ldi	r30, 0x12	; 18
    1ef4:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__epilogue_restores__>

00001ef8 <__divsf3>:
    1ef8:	a8 e1       	ldi	r26, 0x18	; 24
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	e2 e8       	ldi	r30, 0x82	; 130
    1efe:	ff e0       	ldi	r31, 0x0F	; 15
    1f00:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__prologue_saves__+0x10>
    1f04:	69 83       	std	Y+1, r22	; 0x01
    1f06:	7a 83       	std	Y+2, r23	; 0x02
    1f08:	8b 83       	std	Y+3, r24	; 0x03
    1f0a:	9c 83       	std	Y+4, r25	; 0x04
    1f0c:	2d 83       	std	Y+5, r18	; 0x05
    1f0e:	3e 83       	std	Y+6, r19	; 0x06
    1f10:	4f 83       	std	Y+7, r20	; 0x07
    1f12:	58 87       	std	Y+8, r21	; 0x08
    1f14:	b9 e0       	ldi	r27, 0x09	; 9
    1f16:	eb 2e       	mov	r14, r27
    1f18:	f1 2c       	mov	r15, r1
    1f1a:	ec 0e       	add	r14, r28
    1f1c:	fd 1e       	adc	r15, r29
    1f1e:	ce 01       	movw	r24, r28
    1f20:	01 96       	adiw	r24, 0x01	; 1
    1f22:	b7 01       	movw	r22, r14
    1f24:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__unpack_f>
    1f28:	8e 01       	movw	r16, r28
    1f2a:	0f 5e       	subi	r16, 0xEF	; 239
    1f2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2e:	ce 01       	movw	r24, r28
    1f30:	05 96       	adiw	r24, 0x05	; 5
    1f32:	b8 01       	movw	r22, r16
    1f34:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__unpack_f>
    1f38:	29 85       	ldd	r18, Y+9	; 0x09
    1f3a:	22 30       	cpi	r18, 0x02	; 2
    1f3c:	08 f4       	brcc	.+2      	; 0x1f40 <__divsf3+0x48>
    1f3e:	7e c0       	rjmp	.+252    	; 0x203c <__divsf3+0x144>
    1f40:	39 89       	ldd	r19, Y+17	; 0x11
    1f42:	32 30       	cpi	r19, 0x02	; 2
    1f44:	10 f4       	brcc	.+4      	; 0x1f4a <__divsf3+0x52>
    1f46:	b8 01       	movw	r22, r16
    1f48:	7c c0       	rjmp	.+248    	; 0x2042 <__divsf3+0x14a>
    1f4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f4e:	89 27       	eor	r24, r25
    1f50:	8a 87       	std	Y+10, r24	; 0x0a
    1f52:	24 30       	cpi	r18, 0x04	; 4
    1f54:	11 f0       	breq	.+4      	; 0x1f5a <__divsf3+0x62>
    1f56:	22 30       	cpi	r18, 0x02	; 2
    1f58:	31 f4       	brne	.+12     	; 0x1f66 <__divsf3+0x6e>
    1f5a:	23 17       	cp	r18, r19
    1f5c:	09 f0       	breq	.+2      	; 0x1f60 <__divsf3+0x68>
    1f5e:	6e c0       	rjmp	.+220    	; 0x203c <__divsf3+0x144>
    1f60:	60 e0       	ldi	r22, 0x00	; 0
    1f62:	71 e0       	ldi	r23, 0x01	; 1
    1f64:	6e c0       	rjmp	.+220    	; 0x2042 <__divsf3+0x14a>
    1f66:	34 30       	cpi	r19, 0x04	; 4
    1f68:	39 f4       	brne	.+14     	; 0x1f78 <__divsf3+0x80>
    1f6a:	1d 86       	std	Y+13, r1	; 0x0d
    1f6c:	1e 86       	std	Y+14, r1	; 0x0e
    1f6e:	1f 86       	std	Y+15, r1	; 0x0f
    1f70:	18 8a       	std	Y+16, r1	; 0x10
    1f72:	1c 86       	std	Y+12, r1	; 0x0c
    1f74:	1b 86       	std	Y+11, r1	; 0x0b
    1f76:	04 c0       	rjmp	.+8      	; 0x1f80 <__divsf3+0x88>
    1f78:	32 30       	cpi	r19, 0x02	; 2
    1f7a:	21 f4       	brne	.+8      	; 0x1f84 <__divsf3+0x8c>
    1f7c:	84 e0       	ldi	r24, 0x04	; 4
    1f7e:	89 87       	std	Y+9, r24	; 0x09
    1f80:	b7 01       	movw	r22, r14
    1f82:	5f c0       	rjmp	.+190    	; 0x2042 <__divsf3+0x14a>
    1f84:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f86:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f88:	8b 89       	ldd	r24, Y+19	; 0x13
    1f8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f8c:	28 1b       	sub	r18, r24
    1f8e:	39 0b       	sbc	r19, r25
    1f90:	3c 87       	std	Y+12, r19	; 0x0c
    1f92:	2b 87       	std	Y+11, r18	; 0x0b
    1f94:	ed 84       	ldd	r14, Y+13	; 0x0d
    1f96:	fe 84       	ldd	r15, Y+14	; 0x0e
    1f98:	0f 85       	ldd	r16, Y+15	; 0x0f
    1f9a:	18 89       	ldd	r17, Y+16	; 0x10
    1f9c:	ad 88       	ldd	r10, Y+21	; 0x15
    1f9e:	be 88       	ldd	r11, Y+22	; 0x16
    1fa0:	cf 88       	ldd	r12, Y+23	; 0x17
    1fa2:	d8 8c       	ldd	r13, Y+24	; 0x18
    1fa4:	ea 14       	cp	r14, r10
    1fa6:	fb 04       	cpc	r15, r11
    1fa8:	0c 05       	cpc	r16, r12
    1faa:	1d 05       	cpc	r17, r13
    1fac:	40 f4       	brcc	.+16     	; 0x1fbe <__divsf3+0xc6>
    1fae:	ee 0c       	add	r14, r14
    1fb0:	ff 1c       	adc	r15, r15
    1fb2:	00 1f       	adc	r16, r16
    1fb4:	11 1f       	adc	r17, r17
    1fb6:	21 50       	subi	r18, 0x01	; 1
    1fb8:	30 40       	sbci	r19, 0x00	; 0
    1fba:	3c 87       	std	Y+12, r19	; 0x0c
    1fbc:	2b 87       	std	Y+11, r18	; 0x0b
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e0       	ldi	r20, 0x00	; 0
    1fc4:	50 e0       	ldi	r21, 0x00	; 0
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	a0 e0       	ldi	r26, 0x00	; 0
    1fcc:	b0 e4       	ldi	r27, 0x40	; 64
    1fce:	60 e0       	ldi	r22, 0x00	; 0
    1fd0:	70 e0       	ldi	r23, 0x00	; 0
    1fd2:	ea 14       	cp	r14, r10
    1fd4:	fb 04       	cpc	r15, r11
    1fd6:	0c 05       	cpc	r16, r12
    1fd8:	1d 05       	cpc	r17, r13
    1fda:	40 f0       	brcs	.+16     	; 0x1fec <__divsf3+0xf4>
    1fdc:	28 2b       	or	r18, r24
    1fde:	39 2b       	or	r19, r25
    1fe0:	4a 2b       	or	r20, r26
    1fe2:	5b 2b       	or	r21, r27
    1fe4:	ea 18       	sub	r14, r10
    1fe6:	fb 08       	sbc	r15, r11
    1fe8:	0c 09       	sbc	r16, r12
    1fea:	1d 09       	sbc	r17, r13
    1fec:	b6 95       	lsr	r27
    1fee:	a7 95       	ror	r26
    1ff0:	97 95       	ror	r25
    1ff2:	87 95       	ror	r24
    1ff4:	ee 0c       	add	r14, r14
    1ff6:	ff 1c       	adc	r15, r15
    1ff8:	00 1f       	adc	r16, r16
    1ffa:	11 1f       	adc	r17, r17
    1ffc:	6f 5f       	subi	r22, 0xFF	; 255
    1ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    2000:	6f 31       	cpi	r22, 0x1F	; 31
    2002:	71 05       	cpc	r23, r1
    2004:	31 f7       	brne	.-52     	; 0x1fd2 <__divsf3+0xda>
    2006:	da 01       	movw	r26, r20
    2008:	c9 01       	movw	r24, r18
    200a:	8f 77       	andi	r24, 0x7F	; 127
    200c:	90 70       	andi	r25, 0x00	; 0
    200e:	a0 70       	andi	r26, 0x00	; 0
    2010:	b0 70       	andi	r27, 0x00	; 0
    2012:	80 34       	cpi	r24, 0x40	; 64
    2014:	91 05       	cpc	r25, r1
    2016:	a1 05       	cpc	r26, r1
    2018:	b1 05       	cpc	r27, r1
    201a:	61 f4       	brne	.+24     	; 0x2034 <__divsf3+0x13c>
    201c:	27 fd       	sbrc	r18, 7
    201e:	0a c0       	rjmp	.+20     	; 0x2034 <__divsf3+0x13c>
    2020:	e1 14       	cp	r14, r1
    2022:	f1 04       	cpc	r15, r1
    2024:	01 05       	cpc	r16, r1
    2026:	11 05       	cpc	r17, r1
    2028:	29 f0       	breq	.+10     	; 0x2034 <__divsf3+0x13c>
    202a:	20 5c       	subi	r18, 0xC0	; 192
    202c:	3f 4f       	sbci	r19, 0xFF	; 255
    202e:	4f 4f       	sbci	r20, 0xFF	; 255
    2030:	5f 4f       	sbci	r21, 0xFF	; 255
    2032:	20 78       	andi	r18, 0x80	; 128
    2034:	2d 87       	std	Y+13, r18	; 0x0d
    2036:	3e 87       	std	Y+14, r19	; 0x0e
    2038:	4f 87       	std	Y+15, r20	; 0x0f
    203a:	58 8b       	std	Y+16, r21	; 0x10
    203c:	be 01       	movw	r22, r28
    203e:	67 5f       	subi	r22, 0xF7	; 247
    2040:	7f 4f       	sbci	r23, 0xFF	; 255
    2042:	cb 01       	movw	r24, r22
    2044:	0e 94 89 11 	call	0x2312	; 0x2312 <__pack_f>
    2048:	68 96       	adiw	r28, 0x18	; 24
    204a:	ea e0       	ldi	r30, 0x0A	; 10
    204c:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__epilogue_restores__+0x10>

00002050 <__nesf2>:
    2050:	a8 e1       	ldi	r26, 0x18	; 24
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	ee e2       	ldi	r30, 0x2E	; 46
    2056:	f0 e1       	ldi	r31, 0x10	; 16
    2058:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__prologue_saves__+0x18>
    205c:	69 83       	std	Y+1, r22	; 0x01
    205e:	7a 83       	std	Y+2, r23	; 0x02
    2060:	8b 83       	std	Y+3, r24	; 0x03
    2062:	9c 83       	std	Y+4, r25	; 0x04
    2064:	2d 83       	std	Y+5, r18	; 0x05
    2066:	3e 83       	std	Y+6, r19	; 0x06
    2068:	4f 83       	std	Y+7, r20	; 0x07
    206a:	58 87       	std	Y+8, r21	; 0x08
    206c:	89 e0       	ldi	r24, 0x09	; 9
    206e:	e8 2e       	mov	r14, r24
    2070:	f1 2c       	mov	r15, r1
    2072:	ec 0e       	add	r14, r28
    2074:	fd 1e       	adc	r15, r29
    2076:	ce 01       	movw	r24, r28
    2078:	01 96       	adiw	r24, 0x01	; 1
    207a:	b7 01       	movw	r22, r14
    207c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__unpack_f>
    2080:	8e 01       	movw	r16, r28
    2082:	0f 5e       	subi	r16, 0xEF	; 239
    2084:	1f 4f       	sbci	r17, 0xFF	; 255
    2086:	ce 01       	movw	r24, r28
    2088:	05 96       	adiw	r24, 0x05	; 5
    208a:	b8 01       	movw	r22, r16
    208c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__unpack_f>
    2090:	89 85       	ldd	r24, Y+9	; 0x09
    2092:	82 30       	cpi	r24, 0x02	; 2
    2094:	40 f0       	brcs	.+16     	; 0x20a6 <__nesf2+0x56>
    2096:	89 89       	ldd	r24, Y+17	; 0x11
    2098:	82 30       	cpi	r24, 0x02	; 2
    209a:	28 f0       	brcs	.+10     	; 0x20a6 <__nesf2+0x56>
    209c:	c7 01       	movw	r24, r14
    209e:	b8 01       	movw	r22, r16
    20a0:	0e 94 d6 12 	call	0x25ac	; 0x25ac <__fpcmp_parts_f>
    20a4:	01 c0       	rjmp	.+2      	; 0x20a8 <__nesf2+0x58>
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	68 96       	adiw	r28, 0x18	; 24
    20aa:	e6 e0       	ldi	r30, 0x06	; 6
    20ac:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__epilogue_restores__+0x18>

000020b0 <__gesf2>:
    20b0:	a8 e1       	ldi	r26, 0x18	; 24
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	ee e5       	ldi	r30, 0x5E	; 94
    20b6:	f0 e1       	ldi	r31, 0x10	; 16
    20b8:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__prologue_saves__+0x18>
    20bc:	69 83       	std	Y+1, r22	; 0x01
    20be:	7a 83       	std	Y+2, r23	; 0x02
    20c0:	8b 83       	std	Y+3, r24	; 0x03
    20c2:	9c 83       	std	Y+4, r25	; 0x04
    20c4:	2d 83       	std	Y+5, r18	; 0x05
    20c6:	3e 83       	std	Y+6, r19	; 0x06
    20c8:	4f 83       	std	Y+7, r20	; 0x07
    20ca:	58 87       	std	Y+8, r21	; 0x08
    20cc:	89 e0       	ldi	r24, 0x09	; 9
    20ce:	e8 2e       	mov	r14, r24
    20d0:	f1 2c       	mov	r15, r1
    20d2:	ec 0e       	add	r14, r28
    20d4:	fd 1e       	adc	r15, r29
    20d6:	ce 01       	movw	r24, r28
    20d8:	01 96       	adiw	r24, 0x01	; 1
    20da:	b7 01       	movw	r22, r14
    20dc:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__unpack_f>
    20e0:	8e 01       	movw	r16, r28
    20e2:	0f 5e       	subi	r16, 0xEF	; 239
    20e4:	1f 4f       	sbci	r17, 0xFF	; 255
    20e6:	ce 01       	movw	r24, r28
    20e8:	05 96       	adiw	r24, 0x05	; 5
    20ea:	b8 01       	movw	r22, r16
    20ec:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__unpack_f>
    20f0:	89 85       	ldd	r24, Y+9	; 0x09
    20f2:	82 30       	cpi	r24, 0x02	; 2
    20f4:	40 f0       	brcs	.+16     	; 0x2106 <__gesf2+0x56>
    20f6:	89 89       	ldd	r24, Y+17	; 0x11
    20f8:	82 30       	cpi	r24, 0x02	; 2
    20fa:	28 f0       	brcs	.+10     	; 0x2106 <__gesf2+0x56>
    20fc:	c7 01       	movw	r24, r14
    20fe:	b8 01       	movw	r22, r16
    2100:	0e 94 d6 12 	call	0x25ac	; 0x25ac <__fpcmp_parts_f>
    2104:	01 c0       	rjmp	.+2      	; 0x2108 <__gesf2+0x58>
    2106:	8f ef       	ldi	r24, 0xFF	; 255
    2108:	68 96       	adiw	r28, 0x18	; 24
    210a:	e6 e0       	ldi	r30, 0x06	; 6
    210c:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__epilogue_restores__+0x18>

00002110 <__floatsisf>:
    2110:	a8 e0       	ldi	r26, 0x08	; 8
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	ee e8       	ldi	r30, 0x8E	; 142
    2116:	f0 e1       	ldi	r31, 0x10	; 16
    2118:	0c 94 5f 13 	jmp	0x26be	; 0x26be <__prologue_saves__+0x12>
    211c:	9b 01       	movw	r18, r22
    211e:	ac 01       	movw	r20, r24
    2120:	83 e0       	ldi	r24, 0x03	; 3
    2122:	89 83       	std	Y+1, r24	; 0x01
    2124:	da 01       	movw	r26, r20
    2126:	c9 01       	movw	r24, r18
    2128:	88 27       	eor	r24, r24
    212a:	b7 fd       	sbrc	r27, 7
    212c:	83 95       	inc	r24
    212e:	99 27       	eor	r25, r25
    2130:	aa 27       	eor	r26, r26
    2132:	bb 27       	eor	r27, r27
    2134:	b8 2e       	mov	r11, r24
    2136:	21 15       	cp	r18, r1
    2138:	31 05       	cpc	r19, r1
    213a:	41 05       	cpc	r20, r1
    213c:	51 05       	cpc	r21, r1
    213e:	19 f4       	brne	.+6      	; 0x2146 <__floatsisf+0x36>
    2140:	82 e0       	ldi	r24, 0x02	; 2
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	3a c0       	rjmp	.+116    	; 0x21ba <__floatsisf+0xaa>
    2146:	88 23       	and	r24, r24
    2148:	a9 f0       	breq	.+42     	; 0x2174 <__floatsisf+0x64>
    214a:	20 30       	cpi	r18, 0x00	; 0
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	38 07       	cpc	r19, r24
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	48 07       	cpc	r20, r24
    2154:	80 e8       	ldi	r24, 0x80	; 128
    2156:	58 07       	cpc	r21, r24
    2158:	29 f4       	brne	.+10     	; 0x2164 <__floatsisf+0x54>
    215a:	60 e0       	ldi	r22, 0x00	; 0
    215c:	70 e0       	ldi	r23, 0x00	; 0
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	9f ec       	ldi	r25, 0xCF	; 207
    2162:	30 c0       	rjmp	.+96     	; 0x21c4 <__floatsisf+0xb4>
    2164:	ee 24       	eor	r14, r14
    2166:	ff 24       	eor	r15, r15
    2168:	87 01       	movw	r16, r14
    216a:	e2 1a       	sub	r14, r18
    216c:	f3 0a       	sbc	r15, r19
    216e:	04 0b       	sbc	r16, r20
    2170:	15 0b       	sbc	r17, r21
    2172:	02 c0       	rjmp	.+4      	; 0x2178 <__floatsisf+0x68>
    2174:	79 01       	movw	r14, r18
    2176:	8a 01       	movw	r16, r20
    2178:	8e e1       	ldi	r24, 0x1E	; 30
    217a:	c8 2e       	mov	r12, r24
    217c:	d1 2c       	mov	r13, r1
    217e:	dc 82       	std	Y+4, r13	; 0x04
    2180:	cb 82       	std	Y+3, r12	; 0x03
    2182:	ed 82       	std	Y+5, r14	; 0x05
    2184:	fe 82       	std	Y+6, r15	; 0x06
    2186:	0f 83       	std	Y+7, r16	; 0x07
    2188:	18 87       	std	Y+8, r17	; 0x08
    218a:	c8 01       	movw	r24, r16
    218c:	b7 01       	movw	r22, r14
    218e:	0e 94 3a 11 	call	0x2274	; 0x2274 <__clzsi2>
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	18 16       	cp	r1, r24
    2196:	19 06       	cpc	r1, r25
    2198:	84 f4       	brge	.+32     	; 0x21ba <__floatsisf+0xaa>
    219a:	08 2e       	mov	r0, r24
    219c:	04 c0       	rjmp	.+8      	; 0x21a6 <__floatsisf+0x96>
    219e:	ee 0c       	add	r14, r14
    21a0:	ff 1c       	adc	r15, r15
    21a2:	00 1f       	adc	r16, r16
    21a4:	11 1f       	adc	r17, r17
    21a6:	0a 94       	dec	r0
    21a8:	d2 f7       	brpl	.-12     	; 0x219e <__floatsisf+0x8e>
    21aa:	ed 82       	std	Y+5, r14	; 0x05
    21ac:	fe 82       	std	Y+6, r15	; 0x06
    21ae:	0f 83       	std	Y+7, r16	; 0x07
    21b0:	18 87       	std	Y+8, r17	; 0x08
    21b2:	c8 1a       	sub	r12, r24
    21b4:	d9 0a       	sbc	r13, r25
    21b6:	dc 82       	std	Y+4, r13	; 0x04
    21b8:	cb 82       	std	Y+3, r12	; 0x03
    21ba:	ba 82       	std	Y+2, r11	; 0x02
    21bc:	ce 01       	movw	r24, r28
    21be:	01 96       	adiw	r24, 0x01	; 1
    21c0:	0e 94 89 11 	call	0x2312	; 0x2312 <__pack_f>
    21c4:	28 96       	adiw	r28, 0x08	; 8
    21c6:	e9 e0       	ldi	r30, 0x09	; 9
    21c8:	0c 94 7b 13 	jmp	0x26f6	; 0x26f6 <__epilogue_restores__+0x12>

000021cc <__fixsfsi>:
    21cc:	ac e0       	ldi	r26, 0x0C	; 12
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	ec ee       	ldi	r30, 0xEC	; 236
    21d2:	f0 e1       	ldi	r31, 0x10	; 16
    21d4:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <__prologue_saves__+0x20>
    21d8:	69 83       	std	Y+1, r22	; 0x01
    21da:	7a 83       	std	Y+2, r23	; 0x02
    21dc:	8b 83       	std	Y+3, r24	; 0x03
    21de:	9c 83       	std	Y+4, r25	; 0x04
    21e0:	ce 01       	movw	r24, r28
    21e2:	01 96       	adiw	r24, 0x01	; 1
    21e4:	be 01       	movw	r22, r28
    21e6:	6b 5f       	subi	r22, 0xFB	; 251
    21e8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ea:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__unpack_f>
    21ee:	8d 81       	ldd	r24, Y+5	; 0x05
    21f0:	82 30       	cpi	r24, 0x02	; 2
    21f2:	61 f1       	breq	.+88     	; 0x224c <__fixsfsi+0x80>
    21f4:	82 30       	cpi	r24, 0x02	; 2
    21f6:	50 f1       	brcs	.+84     	; 0x224c <__fixsfsi+0x80>
    21f8:	84 30       	cpi	r24, 0x04	; 4
    21fa:	21 f4       	brne	.+8      	; 0x2204 <__fixsfsi+0x38>
    21fc:	8e 81       	ldd	r24, Y+6	; 0x06
    21fe:	88 23       	and	r24, r24
    2200:	51 f1       	breq	.+84     	; 0x2256 <__fixsfsi+0x8a>
    2202:	2e c0       	rjmp	.+92     	; 0x2260 <__fixsfsi+0x94>
    2204:	2f 81       	ldd	r18, Y+7	; 0x07
    2206:	38 85       	ldd	r19, Y+8	; 0x08
    2208:	37 fd       	sbrc	r19, 7
    220a:	20 c0       	rjmp	.+64     	; 0x224c <__fixsfsi+0x80>
    220c:	6e 81       	ldd	r22, Y+6	; 0x06
    220e:	2f 31       	cpi	r18, 0x1F	; 31
    2210:	31 05       	cpc	r19, r1
    2212:	1c f0       	brlt	.+6      	; 0x221a <__fixsfsi+0x4e>
    2214:	66 23       	and	r22, r22
    2216:	f9 f0       	breq	.+62     	; 0x2256 <__fixsfsi+0x8a>
    2218:	23 c0       	rjmp	.+70     	; 0x2260 <__fixsfsi+0x94>
    221a:	8e e1       	ldi	r24, 0x1E	; 30
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	82 1b       	sub	r24, r18
    2220:	93 0b       	sbc	r25, r19
    2222:	29 85       	ldd	r18, Y+9	; 0x09
    2224:	3a 85       	ldd	r19, Y+10	; 0x0a
    2226:	4b 85       	ldd	r20, Y+11	; 0x0b
    2228:	5c 85       	ldd	r21, Y+12	; 0x0c
    222a:	04 c0       	rjmp	.+8      	; 0x2234 <__fixsfsi+0x68>
    222c:	56 95       	lsr	r21
    222e:	47 95       	ror	r20
    2230:	37 95       	ror	r19
    2232:	27 95       	ror	r18
    2234:	8a 95       	dec	r24
    2236:	d2 f7       	brpl	.-12     	; 0x222c <__fixsfsi+0x60>
    2238:	66 23       	and	r22, r22
    223a:	b1 f0       	breq	.+44     	; 0x2268 <__fixsfsi+0x9c>
    223c:	50 95       	com	r21
    223e:	40 95       	com	r20
    2240:	30 95       	com	r19
    2242:	21 95       	neg	r18
    2244:	3f 4f       	sbci	r19, 0xFF	; 255
    2246:	4f 4f       	sbci	r20, 0xFF	; 255
    2248:	5f 4f       	sbci	r21, 0xFF	; 255
    224a:	0e c0       	rjmp	.+28     	; 0x2268 <__fixsfsi+0x9c>
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e0       	ldi	r20, 0x00	; 0
    2252:	50 e0       	ldi	r21, 0x00	; 0
    2254:	09 c0       	rjmp	.+18     	; 0x2268 <__fixsfsi+0x9c>
    2256:	2f ef       	ldi	r18, 0xFF	; 255
    2258:	3f ef       	ldi	r19, 0xFF	; 255
    225a:	4f ef       	ldi	r20, 0xFF	; 255
    225c:	5f e7       	ldi	r21, 0x7F	; 127
    225e:	04 c0       	rjmp	.+8      	; 0x2268 <__fixsfsi+0x9c>
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e0       	ldi	r20, 0x00	; 0
    2266:	50 e8       	ldi	r21, 0x80	; 128
    2268:	b9 01       	movw	r22, r18
    226a:	ca 01       	movw	r24, r20
    226c:	2c 96       	adiw	r28, 0x0c	; 12
    226e:	e2 e0       	ldi	r30, 0x02	; 2
    2270:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__epilogue_restores__+0x20>

00002274 <__clzsi2>:
    2274:	ef 92       	push	r14
    2276:	ff 92       	push	r15
    2278:	0f 93       	push	r16
    227a:	1f 93       	push	r17
    227c:	7b 01       	movw	r14, r22
    227e:	8c 01       	movw	r16, r24
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	e8 16       	cp	r14, r24
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	f8 06       	cpc	r15, r24
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	08 07       	cpc	r16, r24
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	18 07       	cpc	r17, r24
    2290:	88 f4       	brcc	.+34     	; 0x22b4 <__clzsi2+0x40>
    2292:	8f ef       	ldi	r24, 0xFF	; 255
    2294:	e8 16       	cp	r14, r24
    2296:	f1 04       	cpc	r15, r1
    2298:	01 05       	cpc	r16, r1
    229a:	11 05       	cpc	r17, r1
    229c:	31 f0       	breq	.+12     	; 0x22aa <__clzsi2+0x36>
    229e:	28 f0       	brcs	.+10     	; 0x22aa <__clzsi2+0x36>
    22a0:	88 e0       	ldi	r24, 0x08	; 8
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	a0 e0       	ldi	r26, 0x00	; 0
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	17 c0       	rjmp	.+46     	; 0x22d8 <__clzsi2+0x64>
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	a0 e0       	ldi	r26, 0x00	; 0
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	12 c0       	rjmp	.+36     	; 0x22d8 <__clzsi2+0x64>
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	e8 16       	cp	r14, r24
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	f8 06       	cpc	r15, r24
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	08 07       	cpc	r16, r24
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	18 07       	cpc	r17, r24
    22c4:	28 f0       	brcs	.+10     	; 0x22d0 <__clzsi2+0x5c>
    22c6:	88 e1       	ldi	r24, 0x18	; 24
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	a0 e0       	ldi	r26, 0x00	; 0
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	04 c0       	rjmp	.+8      	; 0x22d8 <__clzsi2+0x64>
    22d0:	80 e1       	ldi	r24, 0x10	; 16
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	a0 e0       	ldi	r26, 0x00	; 0
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	20 e2       	ldi	r18, 0x20	; 32
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e0       	ldi	r20, 0x00	; 0
    22de:	50 e0       	ldi	r21, 0x00	; 0
    22e0:	28 1b       	sub	r18, r24
    22e2:	39 0b       	sbc	r19, r25
    22e4:	4a 0b       	sbc	r20, r26
    22e6:	5b 0b       	sbc	r21, r27
    22e8:	04 c0       	rjmp	.+8      	; 0x22f2 <__clzsi2+0x7e>
    22ea:	16 95       	lsr	r17
    22ec:	07 95       	ror	r16
    22ee:	f7 94       	ror	r15
    22f0:	e7 94       	ror	r14
    22f2:	8a 95       	dec	r24
    22f4:	d2 f7       	brpl	.-12     	; 0x22ea <__clzsi2+0x76>
    22f6:	f7 01       	movw	r30, r14
    22f8:	e8 5f       	subi	r30, 0xF8	; 248
    22fa:	fe 4f       	sbci	r31, 0xFE	; 254
    22fc:	80 81       	ld	r24, Z
    22fe:	28 1b       	sub	r18, r24
    2300:	31 09       	sbc	r19, r1
    2302:	41 09       	sbc	r20, r1
    2304:	51 09       	sbc	r21, r1
    2306:	c9 01       	movw	r24, r18
    2308:	1f 91       	pop	r17
    230a:	0f 91       	pop	r16
    230c:	ff 90       	pop	r15
    230e:	ef 90       	pop	r14
    2310:	08 95       	ret

00002312 <__pack_f>:
    2312:	df 92       	push	r13
    2314:	ef 92       	push	r14
    2316:	ff 92       	push	r15
    2318:	0f 93       	push	r16
    231a:	1f 93       	push	r17
    231c:	fc 01       	movw	r30, r24
    231e:	e4 80       	ldd	r14, Z+4	; 0x04
    2320:	f5 80       	ldd	r15, Z+5	; 0x05
    2322:	06 81       	ldd	r16, Z+6	; 0x06
    2324:	17 81       	ldd	r17, Z+7	; 0x07
    2326:	d1 80       	ldd	r13, Z+1	; 0x01
    2328:	80 81       	ld	r24, Z
    232a:	82 30       	cpi	r24, 0x02	; 2
    232c:	48 f4       	brcc	.+18     	; 0x2340 <__pack_f+0x2e>
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	a0 e1       	ldi	r26, 0x10	; 16
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	e8 2a       	or	r14, r24
    2338:	f9 2a       	or	r15, r25
    233a:	0a 2b       	or	r16, r26
    233c:	1b 2b       	or	r17, r27
    233e:	a5 c0       	rjmp	.+330    	; 0x248a <__pack_f+0x178>
    2340:	84 30       	cpi	r24, 0x04	; 4
    2342:	09 f4       	brne	.+2      	; 0x2346 <__pack_f+0x34>
    2344:	9f c0       	rjmp	.+318    	; 0x2484 <__pack_f+0x172>
    2346:	82 30       	cpi	r24, 0x02	; 2
    2348:	21 f4       	brne	.+8      	; 0x2352 <__pack_f+0x40>
    234a:	ee 24       	eor	r14, r14
    234c:	ff 24       	eor	r15, r15
    234e:	87 01       	movw	r16, r14
    2350:	05 c0       	rjmp	.+10     	; 0x235c <__pack_f+0x4a>
    2352:	e1 14       	cp	r14, r1
    2354:	f1 04       	cpc	r15, r1
    2356:	01 05       	cpc	r16, r1
    2358:	11 05       	cpc	r17, r1
    235a:	19 f4       	brne	.+6      	; 0x2362 <__pack_f+0x50>
    235c:	e0 e0       	ldi	r30, 0x00	; 0
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	96 c0       	rjmp	.+300    	; 0x248e <__pack_f+0x17c>
    2362:	62 81       	ldd	r22, Z+2	; 0x02
    2364:	73 81       	ldd	r23, Z+3	; 0x03
    2366:	9f ef       	ldi	r25, 0xFF	; 255
    2368:	62 38       	cpi	r22, 0x82	; 130
    236a:	79 07       	cpc	r23, r25
    236c:	0c f0       	brlt	.+2      	; 0x2370 <__pack_f+0x5e>
    236e:	5b c0       	rjmp	.+182    	; 0x2426 <__pack_f+0x114>
    2370:	22 e8       	ldi	r18, 0x82	; 130
    2372:	3f ef       	ldi	r19, 0xFF	; 255
    2374:	26 1b       	sub	r18, r22
    2376:	37 0b       	sbc	r19, r23
    2378:	2a 31       	cpi	r18, 0x1A	; 26
    237a:	31 05       	cpc	r19, r1
    237c:	2c f0       	brlt	.+10     	; 0x2388 <__pack_f+0x76>
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e0       	ldi	r20, 0x00	; 0
    2384:	50 e0       	ldi	r21, 0x00	; 0
    2386:	2a c0       	rjmp	.+84     	; 0x23dc <__pack_f+0xca>
    2388:	b8 01       	movw	r22, r16
    238a:	a7 01       	movw	r20, r14
    238c:	02 2e       	mov	r0, r18
    238e:	04 c0       	rjmp	.+8      	; 0x2398 <__pack_f+0x86>
    2390:	76 95       	lsr	r23
    2392:	67 95       	ror	r22
    2394:	57 95       	ror	r21
    2396:	47 95       	ror	r20
    2398:	0a 94       	dec	r0
    239a:	d2 f7       	brpl	.-12     	; 0x2390 <__pack_f+0x7e>
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	a0 e0       	ldi	r26, 0x00	; 0
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	04 c0       	rjmp	.+8      	; 0x23ae <__pack_f+0x9c>
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	aa 1f       	adc	r26, r26
    23ac:	bb 1f       	adc	r27, r27
    23ae:	2a 95       	dec	r18
    23b0:	d2 f7       	brpl	.-12     	; 0x23a6 <__pack_f+0x94>
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	a1 09       	sbc	r26, r1
    23b6:	b1 09       	sbc	r27, r1
    23b8:	8e 21       	and	r24, r14
    23ba:	9f 21       	and	r25, r15
    23bc:	a0 23       	and	r26, r16
    23be:	b1 23       	and	r27, r17
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	a1 05       	cpc	r26, r1
    23c4:	b1 05       	cpc	r27, r1
    23c6:	21 f0       	breq	.+8      	; 0x23d0 <__pack_f+0xbe>
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	a0 e0       	ldi	r26, 0x00	; 0
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	9a 01       	movw	r18, r20
    23d2:	ab 01       	movw	r20, r22
    23d4:	28 2b       	or	r18, r24
    23d6:	39 2b       	or	r19, r25
    23d8:	4a 2b       	or	r20, r26
    23da:	5b 2b       	or	r21, r27
    23dc:	da 01       	movw	r26, r20
    23de:	c9 01       	movw	r24, r18
    23e0:	8f 77       	andi	r24, 0x7F	; 127
    23e2:	90 70       	andi	r25, 0x00	; 0
    23e4:	a0 70       	andi	r26, 0x00	; 0
    23e6:	b0 70       	andi	r27, 0x00	; 0
    23e8:	80 34       	cpi	r24, 0x40	; 64
    23ea:	91 05       	cpc	r25, r1
    23ec:	a1 05       	cpc	r26, r1
    23ee:	b1 05       	cpc	r27, r1
    23f0:	39 f4       	brne	.+14     	; 0x2400 <__pack_f+0xee>
    23f2:	27 ff       	sbrs	r18, 7
    23f4:	09 c0       	rjmp	.+18     	; 0x2408 <__pack_f+0xf6>
    23f6:	20 5c       	subi	r18, 0xC0	; 192
    23f8:	3f 4f       	sbci	r19, 0xFF	; 255
    23fa:	4f 4f       	sbci	r20, 0xFF	; 255
    23fc:	5f 4f       	sbci	r21, 0xFF	; 255
    23fe:	04 c0       	rjmp	.+8      	; 0x2408 <__pack_f+0xf6>
    2400:	21 5c       	subi	r18, 0xC1	; 193
    2402:	3f 4f       	sbci	r19, 0xFF	; 255
    2404:	4f 4f       	sbci	r20, 0xFF	; 255
    2406:	5f 4f       	sbci	r21, 0xFF	; 255
    2408:	e0 e0       	ldi	r30, 0x00	; 0
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	20 30       	cpi	r18, 0x00	; 0
    240e:	a0 e0       	ldi	r26, 0x00	; 0
    2410:	3a 07       	cpc	r19, r26
    2412:	a0 e0       	ldi	r26, 0x00	; 0
    2414:	4a 07       	cpc	r20, r26
    2416:	a0 e4       	ldi	r26, 0x40	; 64
    2418:	5a 07       	cpc	r21, r26
    241a:	10 f0       	brcs	.+4      	; 0x2420 <__pack_f+0x10e>
    241c:	e1 e0       	ldi	r30, 0x01	; 1
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	79 01       	movw	r14, r18
    2422:	8a 01       	movw	r16, r20
    2424:	27 c0       	rjmp	.+78     	; 0x2474 <__pack_f+0x162>
    2426:	60 38       	cpi	r22, 0x80	; 128
    2428:	71 05       	cpc	r23, r1
    242a:	64 f5       	brge	.+88     	; 0x2484 <__pack_f+0x172>
    242c:	fb 01       	movw	r30, r22
    242e:	e1 58       	subi	r30, 0x81	; 129
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	d8 01       	movw	r26, r16
    2434:	c7 01       	movw	r24, r14
    2436:	8f 77       	andi	r24, 0x7F	; 127
    2438:	90 70       	andi	r25, 0x00	; 0
    243a:	a0 70       	andi	r26, 0x00	; 0
    243c:	b0 70       	andi	r27, 0x00	; 0
    243e:	80 34       	cpi	r24, 0x40	; 64
    2440:	91 05       	cpc	r25, r1
    2442:	a1 05       	cpc	r26, r1
    2444:	b1 05       	cpc	r27, r1
    2446:	39 f4       	brne	.+14     	; 0x2456 <__pack_f+0x144>
    2448:	e7 fe       	sbrs	r14, 7
    244a:	0d c0       	rjmp	.+26     	; 0x2466 <__pack_f+0x154>
    244c:	80 e4       	ldi	r24, 0x40	; 64
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	a0 e0       	ldi	r26, 0x00	; 0
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	04 c0       	rjmp	.+8      	; 0x245e <__pack_f+0x14c>
    2456:	8f e3       	ldi	r24, 0x3F	; 63
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	a0 e0       	ldi	r26, 0x00	; 0
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e8 0e       	add	r14, r24
    2460:	f9 1e       	adc	r15, r25
    2462:	0a 1f       	adc	r16, r26
    2464:	1b 1f       	adc	r17, r27
    2466:	17 ff       	sbrs	r17, 7
    2468:	05 c0       	rjmp	.+10     	; 0x2474 <__pack_f+0x162>
    246a:	16 95       	lsr	r17
    246c:	07 95       	ror	r16
    246e:	f7 94       	ror	r15
    2470:	e7 94       	ror	r14
    2472:	31 96       	adiw	r30, 0x01	; 1
    2474:	87 e0       	ldi	r24, 0x07	; 7
    2476:	16 95       	lsr	r17
    2478:	07 95       	ror	r16
    247a:	f7 94       	ror	r15
    247c:	e7 94       	ror	r14
    247e:	8a 95       	dec	r24
    2480:	d1 f7       	brne	.-12     	; 0x2476 <__pack_f+0x164>
    2482:	05 c0       	rjmp	.+10     	; 0x248e <__pack_f+0x17c>
    2484:	ee 24       	eor	r14, r14
    2486:	ff 24       	eor	r15, r15
    2488:	87 01       	movw	r16, r14
    248a:	ef ef       	ldi	r30, 0xFF	; 255
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	6e 2f       	mov	r22, r30
    2490:	67 95       	ror	r22
    2492:	66 27       	eor	r22, r22
    2494:	67 95       	ror	r22
    2496:	90 2f       	mov	r25, r16
    2498:	9f 77       	andi	r25, 0x7F	; 127
    249a:	d7 94       	ror	r13
    249c:	dd 24       	eor	r13, r13
    249e:	d7 94       	ror	r13
    24a0:	8e 2f       	mov	r24, r30
    24a2:	86 95       	lsr	r24
    24a4:	49 2f       	mov	r20, r25
    24a6:	46 2b       	or	r20, r22
    24a8:	58 2f       	mov	r21, r24
    24aa:	5d 29       	or	r21, r13
    24ac:	b7 01       	movw	r22, r14
    24ae:	ca 01       	movw	r24, r20
    24b0:	1f 91       	pop	r17
    24b2:	0f 91       	pop	r16
    24b4:	ff 90       	pop	r15
    24b6:	ef 90       	pop	r14
    24b8:	df 90       	pop	r13
    24ba:	08 95       	ret

000024bc <__unpack_f>:
    24bc:	fc 01       	movw	r30, r24
    24be:	db 01       	movw	r26, r22
    24c0:	40 81       	ld	r20, Z
    24c2:	51 81       	ldd	r21, Z+1	; 0x01
    24c4:	22 81       	ldd	r18, Z+2	; 0x02
    24c6:	62 2f       	mov	r22, r18
    24c8:	6f 77       	andi	r22, 0x7F	; 127
    24ca:	70 e0       	ldi	r23, 0x00	; 0
    24cc:	22 1f       	adc	r18, r18
    24ce:	22 27       	eor	r18, r18
    24d0:	22 1f       	adc	r18, r18
    24d2:	93 81       	ldd	r25, Z+3	; 0x03
    24d4:	89 2f       	mov	r24, r25
    24d6:	88 0f       	add	r24, r24
    24d8:	82 2b       	or	r24, r18
    24da:	28 2f       	mov	r18, r24
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	99 1f       	adc	r25, r25
    24e0:	99 27       	eor	r25, r25
    24e2:	99 1f       	adc	r25, r25
    24e4:	11 96       	adiw	r26, 0x01	; 1
    24e6:	9c 93       	st	X, r25
    24e8:	11 97       	sbiw	r26, 0x01	; 1
    24ea:	21 15       	cp	r18, r1
    24ec:	31 05       	cpc	r19, r1
    24ee:	a9 f5       	brne	.+106    	; 0x255a <__unpack_f+0x9e>
    24f0:	41 15       	cp	r20, r1
    24f2:	51 05       	cpc	r21, r1
    24f4:	61 05       	cpc	r22, r1
    24f6:	71 05       	cpc	r23, r1
    24f8:	11 f4       	brne	.+4      	; 0x24fe <__unpack_f+0x42>
    24fa:	82 e0       	ldi	r24, 0x02	; 2
    24fc:	37 c0       	rjmp	.+110    	; 0x256c <__unpack_f+0xb0>
    24fe:	82 e8       	ldi	r24, 0x82	; 130
    2500:	9f ef       	ldi	r25, 0xFF	; 255
    2502:	13 96       	adiw	r26, 0x03	; 3
    2504:	9c 93       	st	X, r25
    2506:	8e 93       	st	-X, r24
    2508:	12 97       	sbiw	r26, 0x02	; 2
    250a:	9a 01       	movw	r18, r20
    250c:	ab 01       	movw	r20, r22
    250e:	67 e0       	ldi	r22, 0x07	; 7
    2510:	22 0f       	add	r18, r18
    2512:	33 1f       	adc	r19, r19
    2514:	44 1f       	adc	r20, r20
    2516:	55 1f       	adc	r21, r21
    2518:	6a 95       	dec	r22
    251a:	d1 f7       	brne	.-12     	; 0x2510 <__unpack_f+0x54>
    251c:	83 e0       	ldi	r24, 0x03	; 3
    251e:	8c 93       	st	X, r24
    2520:	0d c0       	rjmp	.+26     	; 0x253c <__unpack_f+0x80>
    2522:	22 0f       	add	r18, r18
    2524:	33 1f       	adc	r19, r19
    2526:	44 1f       	adc	r20, r20
    2528:	55 1f       	adc	r21, r21
    252a:	12 96       	adiw	r26, 0x02	; 2
    252c:	8d 91       	ld	r24, X+
    252e:	9c 91       	ld	r25, X
    2530:	13 97       	sbiw	r26, 0x03	; 3
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	13 96       	adiw	r26, 0x03	; 3
    2536:	9c 93       	st	X, r25
    2538:	8e 93       	st	-X, r24
    253a:	12 97       	sbiw	r26, 0x02	; 2
    253c:	20 30       	cpi	r18, 0x00	; 0
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	38 07       	cpc	r19, r24
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	48 07       	cpc	r20, r24
    2546:	80 e4       	ldi	r24, 0x40	; 64
    2548:	58 07       	cpc	r21, r24
    254a:	58 f3       	brcs	.-42     	; 0x2522 <__unpack_f+0x66>
    254c:	14 96       	adiw	r26, 0x04	; 4
    254e:	2d 93       	st	X+, r18
    2550:	3d 93       	st	X+, r19
    2552:	4d 93       	st	X+, r20
    2554:	5c 93       	st	X, r21
    2556:	17 97       	sbiw	r26, 0x07	; 7
    2558:	08 95       	ret
    255a:	2f 3f       	cpi	r18, 0xFF	; 255
    255c:	31 05       	cpc	r19, r1
    255e:	79 f4       	brne	.+30     	; 0x257e <__unpack_f+0xc2>
    2560:	41 15       	cp	r20, r1
    2562:	51 05       	cpc	r21, r1
    2564:	61 05       	cpc	r22, r1
    2566:	71 05       	cpc	r23, r1
    2568:	19 f4       	brne	.+6      	; 0x2570 <__unpack_f+0xb4>
    256a:	84 e0       	ldi	r24, 0x04	; 4
    256c:	8c 93       	st	X, r24
    256e:	08 95       	ret
    2570:	64 ff       	sbrs	r22, 4
    2572:	03 c0       	rjmp	.+6      	; 0x257a <__unpack_f+0xbe>
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	8c 93       	st	X, r24
    2578:	12 c0       	rjmp	.+36     	; 0x259e <__unpack_f+0xe2>
    257a:	1c 92       	st	X, r1
    257c:	10 c0       	rjmp	.+32     	; 0x259e <__unpack_f+0xe2>
    257e:	2f 57       	subi	r18, 0x7F	; 127
    2580:	30 40       	sbci	r19, 0x00	; 0
    2582:	13 96       	adiw	r26, 0x03	; 3
    2584:	3c 93       	st	X, r19
    2586:	2e 93       	st	-X, r18
    2588:	12 97       	sbiw	r26, 0x02	; 2
    258a:	83 e0       	ldi	r24, 0x03	; 3
    258c:	8c 93       	st	X, r24
    258e:	87 e0       	ldi	r24, 0x07	; 7
    2590:	44 0f       	add	r20, r20
    2592:	55 1f       	adc	r21, r21
    2594:	66 1f       	adc	r22, r22
    2596:	77 1f       	adc	r23, r23
    2598:	8a 95       	dec	r24
    259a:	d1 f7       	brne	.-12     	; 0x2590 <__unpack_f+0xd4>
    259c:	70 64       	ori	r23, 0x40	; 64
    259e:	14 96       	adiw	r26, 0x04	; 4
    25a0:	4d 93       	st	X+, r20
    25a2:	5d 93       	st	X+, r21
    25a4:	6d 93       	st	X+, r22
    25a6:	7c 93       	st	X, r23
    25a8:	17 97       	sbiw	r26, 0x07	; 7
    25aa:	08 95       	ret

000025ac <__fpcmp_parts_f>:
    25ac:	1f 93       	push	r17
    25ae:	dc 01       	movw	r26, r24
    25b0:	fb 01       	movw	r30, r22
    25b2:	9c 91       	ld	r25, X
    25b4:	92 30       	cpi	r25, 0x02	; 2
    25b6:	08 f4       	brcc	.+2      	; 0x25ba <__fpcmp_parts_f+0xe>
    25b8:	47 c0       	rjmp	.+142    	; 0x2648 <__fpcmp_parts_f+0x9c>
    25ba:	80 81       	ld	r24, Z
    25bc:	82 30       	cpi	r24, 0x02	; 2
    25be:	08 f4       	brcc	.+2      	; 0x25c2 <__fpcmp_parts_f+0x16>
    25c0:	43 c0       	rjmp	.+134    	; 0x2648 <__fpcmp_parts_f+0x9c>
    25c2:	94 30       	cpi	r25, 0x04	; 4
    25c4:	51 f4       	brne	.+20     	; 0x25da <__fpcmp_parts_f+0x2e>
    25c6:	11 96       	adiw	r26, 0x01	; 1
    25c8:	1c 91       	ld	r17, X
    25ca:	84 30       	cpi	r24, 0x04	; 4
    25cc:	99 f5       	brne	.+102    	; 0x2634 <__fpcmp_parts_f+0x88>
    25ce:	81 81       	ldd	r24, Z+1	; 0x01
    25d0:	68 2f       	mov	r22, r24
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	61 1b       	sub	r22, r17
    25d6:	71 09       	sbc	r23, r1
    25d8:	3f c0       	rjmp	.+126    	; 0x2658 <__fpcmp_parts_f+0xac>
    25da:	84 30       	cpi	r24, 0x04	; 4
    25dc:	21 f0       	breq	.+8      	; 0x25e6 <__fpcmp_parts_f+0x3a>
    25de:	92 30       	cpi	r25, 0x02	; 2
    25e0:	31 f4       	brne	.+12     	; 0x25ee <__fpcmp_parts_f+0x42>
    25e2:	82 30       	cpi	r24, 0x02	; 2
    25e4:	b9 f1       	breq	.+110    	; 0x2654 <__fpcmp_parts_f+0xa8>
    25e6:	81 81       	ldd	r24, Z+1	; 0x01
    25e8:	88 23       	and	r24, r24
    25ea:	89 f1       	breq	.+98     	; 0x264e <__fpcmp_parts_f+0xa2>
    25ec:	2d c0       	rjmp	.+90     	; 0x2648 <__fpcmp_parts_f+0x9c>
    25ee:	11 96       	adiw	r26, 0x01	; 1
    25f0:	1c 91       	ld	r17, X
    25f2:	11 97       	sbiw	r26, 0x01	; 1
    25f4:	82 30       	cpi	r24, 0x02	; 2
    25f6:	f1 f0       	breq	.+60     	; 0x2634 <__fpcmp_parts_f+0x88>
    25f8:	81 81       	ldd	r24, Z+1	; 0x01
    25fa:	18 17       	cp	r17, r24
    25fc:	d9 f4       	brne	.+54     	; 0x2634 <__fpcmp_parts_f+0x88>
    25fe:	12 96       	adiw	r26, 0x02	; 2
    2600:	2d 91       	ld	r18, X+
    2602:	3c 91       	ld	r19, X
    2604:	13 97       	sbiw	r26, 0x03	; 3
    2606:	82 81       	ldd	r24, Z+2	; 0x02
    2608:	93 81       	ldd	r25, Z+3	; 0x03
    260a:	82 17       	cp	r24, r18
    260c:	93 07       	cpc	r25, r19
    260e:	94 f0       	brlt	.+36     	; 0x2634 <__fpcmp_parts_f+0x88>
    2610:	28 17       	cp	r18, r24
    2612:	39 07       	cpc	r19, r25
    2614:	bc f0       	brlt	.+46     	; 0x2644 <__fpcmp_parts_f+0x98>
    2616:	14 96       	adiw	r26, 0x04	; 4
    2618:	8d 91       	ld	r24, X+
    261a:	9d 91       	ld	r25, X+
    261c:	0d 90       	ld	r0, X+
    261e:	bc 91       	ld	r27, X
    2620:	a0 2d       	mov	r26, r0
    2622:	24 81       	ldd	r18, Z+4	; 0x04
    2624:	35 81       	ldd	r19, Z+5	; 0x05
    2626:	46 81       	ldd	r20, Z+6	; 0x06
    2628:	57 81       	ldd	r21, Z+7	; 0x07
    262a:	28 17       	cp	r18, r24
    262c:	39 07       	cpc	r19, r25
    262e:	4a 07       	cpc	r20, r26
    2630:	5b 07       	cpc	r21, r27
    2632:	18 f4       	brcc	.+6      	; 0x263a <__fpcmp_parts_f+0x8e>
    2634:	11 23       	and	r17, r17
    2636:	41 f0       	breq	.+16     	; 0x2648 <__fpcmp_parts_f+0x9c>
    2638:	0a c0       	rjmp	.+20     	; 0x264e <__fpcmp_parts_f+0xa2>
    263a:	82 17       	cp	r24, r18
    263c:	93 07       	cpc	r25, r19
    263e:	a4 07       	cpc	r26, r20
    2640:	b5 07       	cpc	r27, r21
    2642:	40 f4       	brcc	.+16     	; 0x2654 <__fpcmp_parts_f+0xa8>
    2644:	11 23       	and	r17, r17
    2646:	19 f0       	breq	.+6      	; 0x264e <__fpcmp_parts_f+0xa2>
    2648:	61 e0       	ldi	r22, 0x01	; 1
    264a:	70 e0       	ldi	r23, 0x00	; 0
    264c:	05 c0       	rjmp	.+10     	; 0x2658 <__fpcmp_parts_f+0xac>
    264e:	6f ef       	ldi	r22, 0xFF	; 255
    2650:	7f ef       	ldi	r23, 0xFF	; 255
    2652:	02 c0       	rjmp	.+4      	; 0x2658 <__fpcmp_parts_f+0xac>
    2654:	60 e0       	ldi	r22, 0x00	; 0
    2656:	70 e0       	ldi	r23, 0x00	; 0
    2658:	cb 01       	movw	r24, r22
    265a:	1f 91       	pop	r17
    265c:	08 95       	ret

0000265e <__udivmodhi4>:
    265e:	aa 1b       	sub	r26, r26
    2660:	bb 1b       	sub	r27, r27
    2662:	51 e1       	ldi	r21, 0x11	; 17
    2664:	07 c0       	rjmp	.+14     	; 0x2674 <__udivmodhi4_ep>

00002666 <__udivmodhi4_loop>:
    2666:	aa 1f       	adc	r26, r26
    2668:	bb 1f       	adc	r27, r27
    266a:	a6 17       	cp	r26, r22
    266c:	b7 07       	cpc	r27, r23
    266e:	10 f0       	brcs	.+4      	; 0x2674 <__udivmodhi4_ep>
    2670:	a6 1b       	sub	r26, r22
    2672:	b7 0b       	sbc	r27, r23

00002674 <__udivmodhi4_ep>:
    2674:	88 1f       	adc	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	5a 95       	dec	r21
    267a:	a9 f7       	brne	.-22     	; 0x2666 <__udivmodhi4_loop>
    267c:	80 95       	com	r24
    267e:	90 95       	com	r25
    2680:	bc 01       	movw	r22, r24
    2682:	cd 01       	movw	r24, r26
    2684:	08 95       	ret

00002686 <__divmodhi4>:
    2686:	97 fb       	bst	r25, 7
    2688:	09 2e       	mov	r0, r25
    268a:	07 26       	eor	r0, r23
    268c:	0a d0       	rcall	.+20     	; 0x26a2 <__divmodhi4_neg1>
    268e:	77 fd       	sbrc	r23, 7
    2690:	04 d0       	rcall	.+8      	; 0x269a <__divmodhi4_neg2>
    2692:	e5 df       	rcall	.-54     	; 0x265e <__udivmodhi4>
    2694:	06 d0       	rcall	.+12     	; 0x26a2 <__divmodhi4_neg1>
    2696:	00 20       	and	r0, r0
    2698:	1a f4       	brpl	.+6      	; 0x26a0 <__divmodhi4_exit>

0000269a <__divmodhi4_neg2>:
    269a:	70 95       	com	r23
    269c:	61 95       	neg	r22
    269e:	7f 4f       	sbci	r23, 0xFF	; 255

000026a0 <__divmodhi4_exit>:
    26a0:	08 95       	ret

000026a2 <__divmodhi4_neg1>:
    26a2:	f6 f7       	brtc	.-4      	; 0x26a0 <__divmodhi4_exit>
    26a4:	90 95       	com	r25
    26a6:	81 95       	neg	r24
    26a8:	9f 4f       	sbci	r25, 0xFF	; 255
    26aa:	08 95       	ret

000026ac <__prologue_saves__>:
    26ac:	2f 92       	push	r2
    26ae:	3f 92       	push	r3
    26b0:	4f 92       	push	r4
    26b2:	5f 92       	push	r5
    26b4:	6f 92       	push	r6
    26b6:	7f 92       	push	r7
    26b8:	8f 92       	push	r8
    26ba:	9f 92       	push	r9
    26bc:	af 92       	push	r10
    26be:	bf 92       	push	r11
    26c0:	cf 92       	push	r12
    26c2:	df 92       	push	r13
    26c4:	ef 92       	push	r14
    26c6:	ff 92       	push	r15
    26c8:	0f 93       	push	r16
    26ca:	1f 93       	push	r17
    26cc:	cf 93       	push	r28
    26ce:	df 93       	push	r29
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
    26d4:	ca 1b       	sub	r28, r26
    26d6:	db 0b       	sbc	r29, r27
    26d8:	0f b6       	in	r0, 0x3f	; 63
    26da:	f8 94       	cli
    26dc:	de bf       	out	0x3e, r29	; 62
    26de:	0f be       	out	0x3f, r0	; 63
    26e0:	cd bf       	out	0x3d, r28	; 61
    26e2:	09 94       	ijmp

000026e4 <__epilogue_restores__>:
    26e4:	2a 88       	ldd	r2, Y+18	; 0x12
    26e6:	39 88       	ldd	r3, Y+17	; 0x11
    26e8:	48 88       	ldd	r4, Y+16	; 0x10
    26ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    26ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    26ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    26f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    26f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    26f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    26f6:	b9 84       	ldd	r11, Y+9	; 0x09
    26f8:	c8 84       	ldd	r12, Y+8	; 0x08
    26fa:	df 80       	ldd	r13, Y+7	; 0x07
    26fc:	ee 80       	ldd	r14, Y+6	; 0x06
    26fe:	fd 80       	ldd	r15, Y+5	; 0x05
    2700:	0c 81       	ldd	r16, Y+4	; 0x04
    2702:	1b 81       	ldd	r17, Y+3	; 0x03
    2704:	aa 81       	ldd	r26, Y+2	; 0x02
    2706:	b9 81       	ldd	r27, Y+1	; 0x01
    2708:	ce 0f       	add	r28, r30
    270a:	d1 1d       	adc	r29, r1
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	f8 94       	cli
    2710:	de bf       	out	0x3e, r29	; 62
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	cd bf       	out	0x3d, r28	; 61
    2716:	ed 01       	movw	r28, r26
    2718:	08 95       	ret

0000271a <do_rand>:
    271a:	a0 e0       	ldi	r26, 0x00	; 0
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e3 e9       	ldi	r30, 0x93	; 147
    2720:	f3 e1       	ldi	r31, 0x13	; 19
    2722:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__prologue_saves__+0x10>
    2726:	ec 01       	movw	r28, r24
    2728:	a8 80       	ld	r10, Y
    272a:	b9 80       	ldd	r11, Y+1	; 0x01
    272c:	ca 80       	ldd	r12, Y+2	; 0x02
    272e:	db 80       	ldd	r13, Y+3	; 0x03
    2730:	a1 14       	cp	r10, r1
    2732:	b1 04       	cpc	r11, r1
    2734:	c1 04       	cpc	r12, r1
    2736:	d1 04       	cpc	r13, r1
    2738:	41 f4       	brne	.+16     	; 0x274a <do_rand+0x30>
    273a:	84 e2       	ldi	r24, 0x24	; 36
    273c:	a8 2e       	mov	r10, r24
    273e:	89 ed       	ldi	r24, 0xD9	; 217
    2740:	b8 2e       	mov	r11, r24
    2742:	8b e5       	ldi	r24, 0x5B	; 91
    2744:	c8 2e       	mov	r12, r24
    2746:	87 e0       	ldi	r24, 0x07	; 7
    2748:	d8 2e       	mov	r13, r24
    274a:	c6 01       	movw	r24, r12
    274c:	b5 01       	movw	r22, r10
    274e:	2d e1       	ldi	r18, 0x1D	; 29
    2750:	33 ef       	ldi	r19, 0xF3	; 243
    2752:	41 e0       	ldi	r20, 0x01	; 1
    2754:	50 e0       	ldi	r21, 0x00	; 0
    2756:	0e 94 0d 14 	call	0x281a	; 0x281a <__divmodsi4>
    275a:	27 ea       	ldi	r18, 0xA7	; 167
    275c:	31 e4       	ldi	r19, 0x41	; 65
    275e:	40 e0       	ldi	r20, 0x00	; 0
    2760:	50 e0       	ldi	r21, 0x00	; 0
    2762:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__mulsi3>
    2766:	7b 01       	movw	r14, r22
    2768:	8c 01       	movw	r16, r24
    276a:	c6 01       	movw	r24, r12
    276c:	b5 01       	movw	r22, r10
    276e:	2d e1       	ldi	r18, 0x1D	; 29
    2770:	33 ef       	ldi	r19, 0xF3	; 243
    2772:	41 e0       	ldi	r20, 0x01	; 1
    2774:	50 e0       	ldi	r21, 0x00	; 0
    2776:	0e 94 0d 14 	call	0x281a	; 0x281a <__divmodsi4>
    277a:	ca 01       	movw	r24, r20
    277c:	b9 01       	movw	r22, r18
    277e:	2c ee       	ldi	r18, 0xEC	; 236
    2780:	34 ef       	ldi	r19, 0xF4	; 244
    2782:	4f ef       	ldi	r20, 0xFF	; 255
    2784:	5f ef       	ldi	r21, 0xFF	; 255
    2786:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__mulsi3>
    278a:	6e 0d       	add	r22, r14
    278c:	7f 1d       	adc	r23, r15
    278e:	80 1f       	adc	r24, r16
    2790:	91 1f       	adc	r25, r17
    2792:	97 ff       	sbrs	r25, 7
    2794:	04 c0       	rjmp	.+8      	; 0x279e <do_rand+0x84>
    2796:	61 50       	subi	r22, 0x01	; 1
    2798:	70 40       	sbci	r23, 0x00	; 0
    279a:	80 40       	sbci	r24, 0x00	; 0
    279c:	90 48       	sbci	r25, 0x80	; 128
    279e:	68 83       	st	Y, r22
    27a0:	79 83       	std	Y+1, r23	; 0x01
    27a2:	8a 83       	std	Y+2, r24	; 0x02
    27a4:	9b 83       	std	Y+3, r25	; 0x03
    27a6:	9b 01       	movw	r18, r22
    27a8:	3f 77       	andi	r19, 0x7F	; 127
    27aa:	c9 01       	movw	r24, r18
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
    27b0:	ea e0       	ldi	r30, 0x0A	; 10
    27b2:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__epilogue_restores__+0x10>

000027b6 <rand_r>:
    27b6:	0e 94 8d 13 	call	0x271a	; 0x271a <do_rand>
    27ba:	08 95       	ret

000027bc <rand>:
    27bc:	88 e0       	ldi	r24, 0x08	; 8
    27be:	92 e0       	ldi	r25, 0x02	; 2
    27c0:	0e 94 8d 13 	call	0x271a	; 0x271a <do_rand>
    27c4:	08 95       	ret

000027c6 <srand>:
    27c6:	a0 e0       	ldi	r26, 0x00	; 0
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	80 93 08 02 	sts	0x0208, r24
    27ce:	90 93 09 02 	sts	0x0209, r25
    27d2:	a0 93 0a 02 	sts	0x020A, r26
    27d6:	b0 93 0b 02 	sts	0x020B, r27
    27da:	08 95       	ret

000027dc <__mulsi3>:
    27dc:	62 9f       	mul	r22, r18
    27de:	d0 01       	movw	r26, r0
    27e0:	73 9f       	mul	r23, r19
    27e2:	f0 01       	movw	r30, r0
    27e4:	82 9f       	mul	r24, r18
    27e6:	e0 0d       	add	r30, r0
    27e8:	f1 1d       	adc	r31, r1
    27ea:	64 9f       	mul	r22, r20
    27ec:	e0 0d       	add	r30, r0
    27ee:	f1 1d       	adc	r31, r1
    27f0:	92 9f       	mul	r25, r18
    27f2:	f0 0d       	add	r31, r0
    27f4:	83 9f       	mul	r24, r19
    27f6:	f0 0d       	add	r31, r0
    27f8:	74 9f       	mul	r23, r20
    27fa:	f0 0d       	add	r31, r0
    27fc:	65 9f       	mul	r22, r21
    27fe:	f0 0d       	add	r31, r0
    2800:	99 27       	eor	r25, r25
    2802:	72 9f       	mul	r23, r18
    2804:	b0 0d       	add	r27, r0
    2806:	e1 1d       	adc	r30, r1
    2808:	f9 1f       	adc	r31, r25
    280a:	63 9f       	mul	r22, r19
    280c:	b0 0d       	add	r27, r0
    280e:	e1 1d       	adc	r30, r1
    2810:	f9 1f       	adc	r31, r25
    2812:	bd 01       	movw	r22, r26
    2814:	cf 01       	movw	r24, r30
    2816:	11 24       	eor	r1, r1
    2818:	08 95       	ret

0000281a <__divmodsi4>:
    281a:	97 fb       	bst	r25, 7
    281c:	09 2e       	mov	r0, r25
    281e:	05 26       	eor	r0, r21
    2820:	0e d0       	rcall	.+28     	; 0x283e <__divmodsi4_neg1>
    2822:	57 fd       	sbrc	r21, 7
    2824:	04 d0       	rcall	.+8      	; 0x282e <__divmodsi4_neg2>
    2826:	14 d0       	rcall	.+40     	; 0x2850 <__udivmodsi4>
    2828:	0a d0       	rcall	.+20     	; 0x283e <__divmodsi4_neg1>
    282a:	00 1c       	adc	r0, r0
    282c:	38 f4       	brcc	.+14     	; 0x283c <__divmodsi4_exit>

0000282e <__divmodsi4_neg2>:
    282e:	50 95       	com	r21
    2830:	40 95       	com	r20
    2832:	30 95       	com	r19
    2834:	21 95       	neg	r18
    2836:	3f 4f       	sbci	r19, 0xFF	; 255
    2838:	4f 4f       	sbci	r20, 0xFF	; 255
    283a:	5f 4f       	sbci	r21, 0xFF	; 255

0000283c <__divmodsi4_exit>:
    283c:	08 95       	ret

0000283e <__divmodsi4_neg1>:
    283e:	f6 f7       	brtc	.-4      	; 0x283c <__divmodsi4_exit>
    2840:	90 95       	com	r25
    2842:	80 95       	com	r24
    2844:	70 95       	com	r23
    2846:	61 95       	neg	r22
    2848:	7f 4f       	sbci	r23, 0xFF	; 255
    284a:	8f 4f       	sbci	r24, 0xFF	; 255
    284c:	9f 4f       	sbci	r25, 0xFF	; 255
    284e:	08 95       	ret

00002850 <__udivmodsi4>:
    2850:	a1 e2       	ldi	r26, 0x21	; 33
    2852:	1a 2e       	mov	r1, r26
    2854:	aa 1b       	sub	r26, r26
    2856:	bb 1b       	sub	r27, r27
    2858:	fd 01       	movw	r30, r26
    285a:	0d c0       	rjmp	.+26     	; 0x2876 <__udivmodsi4_ep>

0000285c <__udivmodsi4_loop>:
    285c:	aa 1f       	adc	r26, r26
    285e:	bb 1f       	adc	r27, r27
    2860:	ee 1f       	adc	r30, r30
    2862:	ff 1f       	adc	r31, r31
    2864:	a2 17       	cp	r26, r18
    2866:	b3 07       	cpc	r27, r19
    2868:	e4 07       	cpc	r30, r20
    286a:	f5 07       	cpc	r31, r21
    286c:	20 f0       	brcs	.+8      	; 0x2876 <__udivmodsi4_ep>
    286e:	a2 1b       	sub	r26, r18
    2870:	b3 0b       	sbc	r27, r19
    2872:	e4 0b       	sbc	r30, r20
    2874:	f5 0b       	sbc	r31, r21

00002876 <__udivmodsi4_ep>:
    2876:	66 1f       	adc	r22, r22
    2878:	77 1f       	adc	r23, r23
    287a:	88 1f       	adc	r24, r24
    287c:	99 1f       	adc	r25, r25
    287e:	1a 94       	dec	r1
    2880:	69 f7       	brne	.-38     	; 0x285c <__udivmodsi4_loop>
    2882:	60 95       	com	r22
    2884:	70 95       	com	r23
    2886:	80 95       	com	r24
    2888:	90 95       	com	r25
    288a:	9b 01       	movw	r18, r22
    288c:	ac 01       	movw	r20, r24
    288e:	bd 01       	movw	r22, r26
    2890:	cf 01       	movw	r24, r30
    2892:	08 95       	ret

00002894 <_exit>:
    2894:	f8 94       	cli

00002896 <__stop_program>:
    2896:	ff cf       	rjmp	.-2      	; 0x2896 <__stop_program>
